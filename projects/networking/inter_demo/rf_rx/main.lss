
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000296  00800200  00005ce2  00005d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d2  00800496  00800496  0000600c  2**0
                  ALLOC
  3 .stab         0000f468  00000000  00000000  0000600c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008c88  00000000  00000000  00015474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__ctors_end>
       4:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__vector_1>
       8:	0c 94 35 22 	jmp	0x446a	; 0x446a <__vector_2>
       c:	0c 94 67 22 	jmp	0x44ce	; 0x44ce <__vector_3>
      10:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      14:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      18:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      1c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      20:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      24:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__vector_9>
      28:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      2c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      30:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      34:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__vector_13>
      38:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      3c:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__vector_13>
      40:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      44:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      48:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      4c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      50:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      54:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      58:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      5c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      60:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      64:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      68:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      6c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      70:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      74:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      78:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      7c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      80:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <__vector_32>
      84:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      88:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      8c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      90:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      94:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      98:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      9c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      a0:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      a4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      a8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      ac:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      b0:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      b4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      b8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      bc:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      c0:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      c4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      c8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      cc:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      d0:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      d4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      d8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      dc:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      e0:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      e4:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__vector_57>
      e8:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_58>
      ec:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_59>
      f0:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_60>
      f4:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__vector_61>
      f8:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_62>
      fc:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__vector_63>
     100:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_64>
     104:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     108:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     10c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     110:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     114:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     118:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     11c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
     120:	97 10       	cpse	r9, r7
     122:	9d 10       	cpse	r9, r13
     124:	a0 10       	cpse	r10, r0
     126:	a3 10       	cpse	r10, r3
     128:	a6 10       	cpse	r10, r6
     12a:	a9 10       	cpse	r10, r9
     12c:	af 10       	cpse	r10, r15
     12e:	ac 10       	cpse	r10, r12
     130:	b2 10       	cpse	r11, r2
     132:	b5 10       	cpse	r11, r5
     134:	b8 10       	cpse	r11, r8
     136:	c1 10       	cpse	r12, r1
     138:	c4 10       	cpse	r12, r4
     13a:	c7 10       	cpse	r12, r7
     13c:	ca 10       	cpse	r12, r10
     13e:	be 10       	cpse	r11, r14
     140:	94 10       	cpse	r9, r4
     142:	9a 10       	cpse	r9, r10
     144:	cd 10       	cpse	r12, r13
     146:	d0 10       	cpse	r13, r0
     148:	bb 10       	cpse	r11, r11
     14a:	91 10       	cpse	r9, r1

0000014c <__c.2918>:
     14c:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000153 <__c.2915>:
     153:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000162 <__c.2912>:
     162:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000173 <__c.2909>:
     173:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     183:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000018e <__c.2906>:
     18e:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     19e:	20 53 69 67 6e 61 6c 00                              Signal.

000001a6 <__c.2903>:
     1a6:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     1b6:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000001c6 <__c.2900>:
     1c6:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     1d6:	72 6f 72 00                                         ror.

000001da <__c.2897>:
     1da:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000001eb <__c.2894>:
     1eb:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     1fb:	61 72 74 00                                         art.

000001ff <__c.2891>:
     1ff:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000020e <__c.2888>:
     20e:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     21e:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000229 <__c.2885>:
     229:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000235 <__c.2882>:
     235:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     245:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     255:	20 6f 6b 3f 00                                       ok?.

0000025a <__c.2879>:
     25a:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     26a:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000278 <__c.2876>:
     278:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     288:	72 74 00                                            rt.

0000028b <__c.2873>:
     28b:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     29b:	49 44 00                                            ID.

0000029e <__c.2870>:
     29e:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     2ae:	20 57 61 6b 65 75 70 00                              Wakeup.

000002b6 <__c.2867>:
     2b6:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     2c6:	6c 61 74 65 64 00                                   lated.

000002cc <__c.2864>:
     2cc:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     2dc:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000002e7 <__c.2861>:
     2e7:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     2f7:	69 6e 74 65 72 00                                   inter.

000002fd <__c.2858>:
     2fd:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     30d:	6c 6f 77 00                                         low.

00000311 <__c.2855>:
     311:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     321:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     331:	6e 6f 75 67 68 21 00                                nough!.

00000338 <__c.2851>:
     338:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     348:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     358:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     368:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000374 <__c.2848>:
     374:	29 3a 20 00                                         ): .

00000378 <__c.2846>:
     378:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000384 <__c.2771>:
     384:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000393 <__c.1851>:
     393:	45 46 47 65 66 67 00                                EFGefg.

0000039a <__c.1845>:
     39a:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000003aa <__ctors_end>:
     3aa:	11 24       	eor	r1, r1
     3ac:	1f be       	out	0x3f, r1	; 63
     3ae:	cf ef       	ldi	r28, 0xFF	; 255
     3b0:	d1 e4       	ldi	r29, 0x41	; 65
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	cd bf       	out	0x3d, r28	; 61

000003b6 <__do_copy_data>:
     3b6:	14 e0       	ldi	r17, 0x04	; 4
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
     3ba:	b2 e0       	ldi	r27, 0x02	; 2
     3bc:	e2 ee       	ldi	r30, 0xE2	; 226
     3be:	fc e5       	ldi	r31, 0x5C	; 92
     3c0:	00 e0       	ldi	r16, 0x00	; 0
     3c2:	0b bf       	out	0x3b, r16	; 59
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <__do_copy_data+0x14>
     3c6:	07 90       	elpm	r0, Z+
     3c8:	0d 92       	st	X+, r0
     3ca:	a6 39       	cpi	r26, 0x96	; 150
     3cc:	b1 07       	cpc	r27, r17
     3ce:	d9 f7       	brne	.-10     	; 0x3c6 <__do_copy_data+0x10>

000003d0 <__do_clear_bss>:
     3d0:	17 e0       	ldi	r17, 0x07	; 7
     3d2:	a6 e9       	ldi	r26, 0x96	; 150
     3d4:	b4 e0       	ldi	r27, 0x04	; 4
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <.do_clear_bss_start>

000003d8 <.do_clear_bss_loop>:
     3d8:	1d 92       	st	X+, r1

000003da <.do_clear_bss_start>:
     3da:	a8 36       	cpi	r26, 0x68	; 104
     3dc:	b1 07       	cpc	r27, r17
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <.do_clear_bss_loop>
     3e0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <main>
     3e4:	0c 94 6f 2e 	jmp	0x5cde	; 0x5cde <_exit>

000003e8 <__bad_interrupt>:
     3e8:	0c 94 17 20 	jmp	0x402e	; 0x402e <__vector_default>

000003ec <main>:
//
//      DESCRIPTION:
//              Startup routine and main loop
//------------------------------------------------------------------------------
int main (void)
{
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
    uint8_t cnt,i,length,n;

    nrk_setup_ports(); 
     3f2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <nrk_setup_ports>
    nrk_setup_uart (UART_BAUDRATE_115K2);
     3f6:	80 e1       	ldi	r24, 0x10	; 16
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 85 0c 	call	0x190a	; 0x190a <nrk_setup_uart>
 
    printf( "Receiver\r\n" ); 
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	0e 94 35 2c 	call	0x586a	; 0x586a <puts>
    nrk_led_clr(0); 
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    nrk_led_clr(1); 
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    nrk_led_clr(2); 
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    nrk_led_clr(3); 
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>

    rfRxInfo.pPayload = rx_buf;
     426:	8a ea       	ldi	r24, 0xAA	; 170
     428:	94 e0       	ldi	r25, 0x04	; 4
     42a:	90 93 a0 04 	sts	0x04A0, r25
     42e:	80 93 9f 04 	sts	0x049F, r24
    rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
     432:	84 e7       	ldi	r24, 0x74	; 116
     434:	80 93 9e 04 	sts	0x049E, r24
    rfRxInfo.ackRequest= 0;
     438:	10 92 a1 04 	sts	0x04A1, r1
		nrk_int_enable();
     43c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
    rf_init (&rfRxInfo, 13, 0x2420, 0x1215);
     440:	8a e9       	ldi	r24, 0x9A	; 154
     442:	94 e0       	ldi	r25, 0x04	; 4
     444:	6d e0       	ldi	r22, 0x0D	; 13
     446:	40 e2       	ldi	r20, 0x20	; 32
     448:	54 e2       	ldi	r21, 0x24	; 36
     44a:	25 e1       	ldi	r18, 0x15	; 21
     44c:	32 e1       	ldi	r19, 0x12	; 18
     44e:	0e 94 35 03 	call	0x66a	; 0x66a <rf_init>
    printf( "Waiting for packet...\r\n" );
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	0e 94 35 2c 	call	0x586a	; 0x586a <puts>
    nrk_led_set(ORANGE_LED);
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
				//rf_rx_off();
    		if (n == 1) {
    				nrk_led_clr(RED_LED);
        		// CRC and checksum passed
						printf("packet received\r\n");
						printf("SEQNUM: %d  SRCADDR: 0x%x  SNR: %d\r\n[",
     462:	c2 e3       	ldi	r28, 0x32	; 50
     464:	d2 e0       	ldi	r29, 0x02	; 2
    rf_init (&rfRxInfo, 13, 0x2420, 0x1215);
    printf( "Waiting for packet...\r\n" );
    nrk_led_set(ORANGE_LED);
    
		while(1){
				nrk_led_clr(GREEN_LED);
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
        /*
				rf_init (&rfRxInfo, 13, 0x2420, 0x1215);
        rf_set_rx (&rfRxInfo, 13); 	
				*/

				rf_polling_rx_on();
     46e:	0e 94 b1 03 	call	0x762	; 0x762 <rf_polling_rx_on>
        while ((n = rf_rx_check_sfd()) == 0)
     472:	0e 94 84 06 	call	0xd08	; 0xd08 <rf_rx_check_sfd>
     476:	88 23       	and	r24, r24
     478:	e1 f3       	breq	.-8      	; 0x472 <main+0x86>
						continue; 
				nrk_led_set(GREEN_LED);
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
     482:	10 e0       	ldi	r17, 0x00	; 0
     484:	07 c0       	rjmp	.+14     	; 0x494 <main+0xa8>
 				if (n != 0) {
        		n = 0;
        		// Packet on its way
    				cnt=0;
        		while ((n = rf_polling_rx_packet ()) == 0) {
								if (cnt > 50) {
     486:	13 33       	cpi	r17, 0x33	; 51
     488:	71 f3       	breq	.-36     	; 0x466 <main+0x7a>
                		//printf( "PKT Timeout\r\n" );
										break;		// huge timeout as failsafe
								}
        				halWait(10000);
     48a:	80 e1       	ldi	r24, 0x10	; 16
     48c:	97 e2       	ldi	r25, 0x27	; 39
     48e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <halWait>
								cnt++;
     492:	1f 5f       	subi	r17, 0xFF	; 255
				nrk_led_set(GREEN_LED);
 				if (n != 0) {
        		n = 0;
        		// Packet on its way
    				cnt=0;
        		while ((n = rf_polling_rx_packet ()) == 0) {
     494:	0e 94 2d 05 	call	0xa5a	; 0xa5a <rf_rx_packet_nonblock>
     498:	88 23       	and	r24, r24
     49a:	a9 f3       	breq	.-22     	; 0x486 <main+0x9a>
								cnt++;
						}
    		}

				//rf_rx_off();
    		if (n == 1) {
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	09 f0       	breq	.+2      	; 0x4a2 <main+0xb6>
     4a0:	50 c0       	rjmp	.+160    	; 0x542 <main+0x156>
    				nrk_led_clr(RED_LED);
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
        		// CRC and checksum passed
						printf("packet received\r\n");
     4aa:	81 e2       	ldi	r24, 0x21	; 33
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	0e 94 35 2c 	call	0x586a	; 0x586a <puts>
						printf("SEQNUM: %d  SRCADDR: 0x%x  SNR: %d\r\n[",
     4b2:	8d b7       	in	r24, 0x3d	; 61
     4b4:	9e b7       	in	r25, 0x3e	; 62
     4b6:	08 97       	sbiw	r24, 0x08	; 8
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	9e bf       	out	0x3e, r25	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	8d bf       	out	0x3d, r24	; 61
     4c2:	ed b7       	in	r30, 0x3d	; 61
     4c4:	fe b7       	in	r31, 0x3e	; 62
     4c6:	31 96       	adiw	r30, 0x01	; 1
     4c8:	ad b7       	in	r26, 0x3d	; 61
     4ca:	be b7       	in	r27, 0x3e	; 62
     4cc:	12 96       	adiw	r26, 0x02	; 2
     4ce:	dc 93       	st	X, r29
     4d0:	ce 93       	st	-X, r28
     4d2:	11 97       	sbiw	r26, 0x01	; 1
     4d4:	80 91 9a 04 	lds	r24, 0x049A
     4d8:	82 83       	std	Z+2, r24	; 0x02
     4da:	13 82       	std	Z+3, r1	; 0x03
     4dc:	80 91 9b 04 	lds	r24, 0x049B
     4e0:	90 91 9c 04 	lds	r25, 0x049C
     4e4:	95 83       	std	Z+5, r25	; 0x05
     4e6:	84 83       	std	Z+4, r24	; 0x04
     4e8:	80 91 a2 04 	lds	r24, 0x04A2
     4ec:	99 27       	eor	r25, r25
     4ee:	87 fd       	sbrc	r24, 7
     4f0:	90 95       	com	r25
     4f2:	97 83       	std	Z+7, r25	; 0x07
     4f4:	86 83       	std	Z+6, r24	; 0x06
     4f6:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
								rfRxInfo.seqNumber, rfRxInfo.srcAddr, rfRxInfo.rssi);
        	
						for(i=0; i<rfRxInfo.length; i++ )
     4fa:	8d b7       	in	r24, 0x3d	; 61
     4fc:	9e b7       	in	r25, 0x3e	; 62
     4fe:	08 96       	adiw	r24, 0x08	; 8
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	9e bf       	out	0x3e, r25	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	8d bf       	out	0x3d, r24	; 61
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	0b c0       	rjmp	.+22     	; 0x524 <main+0x138>
								printf( "%c", rfRxInfo.pPayload[i]);
     50e:	e0 91 9f 04 	lds	r30, 0x049F
     512:	f0 91 a0 04 	lds	r31, 0x04A0
     516:	e8 0f       	add	r30, r24
     518:	f9 1f       	adc	r31, r25
     51a:	80 81       	ld	r24, Z
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 2e 2c 	call	0x585c	; 0x585c <putchar>
        		// CRC and checksum passed
						printf("packet received\r\n");
						printf("SEQNUM: %d  SRCADDR: 0x%x  SNR: %d\r\n[",
								rfRxInfo.seqNumber, rfRxInfo.srcAddr, rfRxInfo.rssi);
        	
						for(i=0; i<rfRxInfo.length; i++ )
     522:	1f 5f       	subi	r17, 0xFF	; 255
     524:	81 2f       	mov	r24, r17
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	20 91 9d 04 	lds	r18, 0x049D
     52c:	33 27       	eor	r19, r19
     52e:	27 fd       	sbrc	r18, 7
     530:	30 95       	com	r19
     532:	82 17       	cp	r24, r18
     534:	93 07       	cpc	r25, r19
     536:	5c f3       	brlt	.-42     	; 0x50e <main+0x122>
								printf( "%c", rfRxInfo.pPayload[i]);
						printf( "]\r\n\r\n" );
     538:	88 e5       	ldi	r24, 0x58	; 88
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	0e 94 35 2c 	call	0x586a	; 0x586a <puts>
     540:	92 cf       	rjmp	.-220    	; 0x466 <main+0x7a>
    		} 
				else if(n != 0){ 
						printf( "CRC failed!\r\n" ); nrk_led_set(RED_LED); 
     542:	8d e5       	ldi	r24, 0x5D	; 93
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 35 2c 	call	0x586a	; 0x586a <puts>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
     552:	89 cf       	rjmp	.-238    	; 0x466 <main+0x7a>

00000554 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     554:	90 91 41 01 	lds	r25, 0x0141
     558:	9f 71       	andi	r25, 0x1F	; 31
     55a:	9f 31       	cpi	r25, 0x1F	; 31
     55c:	d9 f3       	breq	.-10     	; 0x554 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     55e:	80 93 42 01 	sts	0x0142, r24
}
     562:	08 95       	ret

00000564 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	80 93 a1 05 	sts	0x05A1, r24
}
     56a:	08 95       	ret

0000056c <rf_disable_glossy>:

void rf_disable_glossy()
{
	use_glossy = 0;
     56c:	10 92 a1 05 	sts	0x05A1, r1
}
     570:	08 95       	ret

00000572 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     572:	80 91 41 01 	lds	r24, 0x0141
     576:	8f 71       	andi	r24, 0x1F	; 31
     578:	8f 31       	cpi	r24, 0x1F	; 31
     57a:	d9 f3       	breq	.-10     	; 0x572 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     57c:	80 91 41 01 	lds	r24, 0x0141
     580:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     582:	d1 f0       	breq	.+52     	; 0x5b8 <rf_power_down+0x46>
     584:	8f 30       	cpi	r24, 0x0F	; 15
     586:	c1 f0       	breq	.+48     	; 0x5b8 <rf_power_down+0x46>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     588:	80 91 41 01 	lds	r24, 0x0141
     58c:	8f 71       	andi	r24, 0x1F	; 31
     58e:	88 30       	cpi	r24, 0x08	; 8
     590:	41 f0       	breq	.+16     	; 0x5a2 <rf_power_down+0x30>
		rf_cmd(TRX_OFF);
     592:	88 e0       	ldi	r24, 0x08	; 8
     594:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     598:	80 91 41 01 	lds	r24, 0x0141
     59c:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     59e:	88 30       	cpi	r24, 0x08	; 8
     5a0:	d9 f7       	brne	.-10     	; 0x598 <rf_power_down+0x26>
	}

	TRXPR |= (1 << SLPTR);
     5a2:	80 91 39 01 	lds	r24, 0x0139
     5a6:	82 60       	ori	r24, 0x02	; 2
     5a8:	80 93 39 01 	sts	0x0139, r24
	do{
		status = (TRX_STATUS & 0x1F);
     5ac:	80 91 41 01 	lds	r24, 0x0141
     5b0:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     5b2:	11 f0       	breq	.+4      	; 0x5b8 <rf_power_down+0x46>
     5b4:	8f 30       	cpi	r24, 0x0F	; 15
     5b6:	d1 f7       	brne	.-12     	; 0x5ac <rf_power_down+0x3a>
     5b8:	08 95       	ret

000005ba <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     5ba:	80 91 41 01 	lds	r24, 0x0141
     5be:	8f 71       	andi	r24, 0x1F	; 31
     5c0:	8f 31       	cpi	r24, 0x1F	; 31
     5c2:	d9 f3       	breq	.-10     	; 0x5ba <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     5c4:	80 91 41 01 	lds	r24, 0x0141
     5c8:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     5ca:	11 f0       	breq	.+4      	; 0x5d0 <rf_power_up+0x16>
     5cc:	8f 30       	cpi	r24, 0x0F	; 15
     5ce:	51 f4       	brne	.+20     	; 0x5e4 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     5d0:	80 91 39 01 	lds	r24, 0x0139
     5d4:	8d 7f       	andi	r24, 0xFD	; 253
     5d6:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     5da:	80 91 41 01 	lds	r24, 0x0141
     5de:	8f 71       	andi	r24, 0x1F	; 31
     5e0:	88 30       	cpi	r24, 0x08	; 8
     5e2:	d9 f7       	brne	.-10     	; 0x5da <rf_power_up+0x20>
     5e4:	08 95       	ret

000005e6 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     5e6:	e5 e4       	ldi	r30, 0x45	; 69
     5e8:	f1 e0       	ldi	r31, 0x01	; 1
     5ea:	90 81       	ld	r25, Z
     5ec:	90 7f       	andi	r25, 0xF0	; 240
     5ee:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     5f0:	90 81       	ld	r25, Z
     5f2:	8f 70       	andi	r24, 0x0F	; 15
     5f4:	89 2b       	or	r24, r25
     5f6:	80 83       	st	Z, r24
}
     5f8:	08 95       	ret

000005fa <rf_addr_decode_enable>:

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     5fa:	e7 e5       	ldi	r30, 0x57	; 87
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	80 81       	ld	r24, Z
     600:	8d 7f       	andi	r24, 0xFD	; 253
     602:	80 83       	st	Z, r24
}
     604:	08 95       	ret

00000606 <rf_addr_decode_disable>:


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     606:	e7 e5       	ldi	r30, 0x57	; 87
     608:	f1 e0       	ldi	r31, 0x01	; 1
     60a:	80 81       	ld	r24, Z
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	80 83       	st	Z, r24
}
     610:	08 95       	ret

00000612 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     612:	ee e6       	ldi	r30, 0x6E	; 110
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	80 81       	ld	r24, Z
     618:	8f 7e       	andi	r24, 0xEF	; 239
     61a:	80 83       	st	Z, r24
}
     61c:	08 95       	ret

0000061e <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     61e:	ee e6       	ldi	r30, 0x6E	; 110
     620:	f1 e0       	ldi	r31, 0x01	; 1
     622:	80 81       	ld	r24, Z
     624:	80 61       	ori	r24, 0x10	; 16
     626:	80 83       	st	Z, r24
}
     628:	08 95       	ret

0000062a <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     62a:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     62e:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     632:	90 93 ac 05 	sts	0x05AC, r25
     636:	80 93 ab 05 	sts	0x05AB, r24
}
     63a:	08 95       	ret

0000063c <rf_set_rx>:


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     63c:	90 93 a6 05 	sts	0x05A6, r25
     640:	80 93 a5 05 	sts	0x05A5, r24
	PHY_CC_CCA &= ~(0x1F);
     644:	e8 e4       	ldi	r30, 0x48	; 72
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	80 81       	ld	r24, Z
     64a:	80 7e       	andi	r24, 0xE0	; 224
     64c:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     64e:	80 81       	ld	r24, Z
     650:	68 2b       	or	r22, r24
     652:	60 83       	st	Z, r22
}
     654:	08 95       	ret

00000656 <rx_start_callback>:

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     656:	90 93 97 04 	sts	0x0497, r25
     65a:	80 93 96 04 	sts	0x0496, r24
}
     65e:	08 95       	ret

00000660 <rx_end_callback>:

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     660:	90 93 99 04 	sts	0x0499, r25
     664:	80 93 98 04 	sts	0x0498, r24
}
     668:	08 95       	ret

0000066a <rf_init>:


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     66a:	1f 93       	push	r17

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     66c:	70 e2       	ldi	r23, 0x20	; 32
     66e:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     672:	70 ec       	ldi	r23, 0xC0	; 192
     674:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     678:	60 62       	ori	r22, 0x20	; 32
     67a:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     67e:	65 ec       	ldi	r22, 0xC5	; 197
     680:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     684:	67 ea       	ldi	r22, 0xA7	; 167
     686:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     68a:	60 e8       	ldi	r22, 0x80	; 128
     68c:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     690:	20 93 60 01 	sts	0x0160, r18
     694:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     698:	40 93 62 01 	sts	0x0162, r20
     69c:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     6a0:	e6 e4       	ldi	r30, 0x46	; 70
     6a2:	f1 e0       	ldi	r31, 0x01	; 1
     6a4:	10 81       	ld	r17, Z
     6a6:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     6a8:	60 81       	ld	r22, Z
     6aa:	70 81       	ld	r23, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     6ac:	12 95       	swap	r17
     6ae:	16 95       	lsr	r17
     6b0:	17 70       	andi	r17, 0x07	; 7
     6b2:	12 95       	swap	r17
     6b4:	11 0f       	add	r17, r17
     6b6:	11 0f       	add	r17, r17
     6b8:	10 7c       	andi	r17, 0xC0	; 192
     6ba:	72 95       	swap	r23
     6bc:	76 95       	lsr	r23
     6be:	73 70       	andi	r23, 0x03	; 3
     6c0:	17 2b       	or	r17, r23
     6c2:	a2 95       	swap	r26
     6c4:	a6 95       	lsr	r26
     6c6:	a7 70       	andi	r26, 0x07	; 7
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	a3 70       	andi	r26, 0x03	; 3
     6cc:	b0 70       	andi	r27, 0x00	; 0
     6ce:	74 e0       	ldi	r23, 0x04	; 4
     6d0:	aa 0f       	add	r26, r26
     6d2:	bb 1f       	adc	r27, r27
     6d4:	7a 95       	dec	r23
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <rf_init+0x66>
     6d8:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     6da:	62 95       	swap	r22
     6dc:	66 95       	lsr	r22
     6de:	67 70       	andi	r22, 0x07	; 7
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	63 70       	andi	r22, 0x03	; 3
     6e4:	70 70       	andi	r23, 0x00	; 0
     6e6:	66 0f       	add	r22, r22
     6e8:	77 1f       	adc	r23, r23
     6ea:	66 0f       	add	r22, r22
     6ec:	77 1f       	adc	r23, r23
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     6ee:	16 2b       	or	r17, r22
     6f0:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     6f4:	60 81       	ld	r22, Z
     6f6:	e0 81       	ld	r30, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     6f8:	e2 95       	swap	r30
     6fa:	e6 95       	lsr	r30
     6fc:	e3 70       	andi	r30, 0x03	; 3
     6fe:	e0 64       	ori	r30, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     700:	62 95       	swap	r22
     702:	66 95       	lsr	r22
     704:	67 70       	andi	r22, 0x07	; 7
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	63 70       	andi	r22, 0x03	; 3
     70a:	70 70       	andi	r23, 0x00	; 0
     70c:	66 0f       	add	r22, r22
     70e:	77 1f       	adc	r23, r23
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     710:	e6 2b       	or	r30, r22
     712:	e0 93 6e 01 	sts	0x016E, r30
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     716:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     71a:	6f ef       	ldi	r22, 0xFF	; 255
     71c:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     720:	90 93 a6 05 	sts	0x05A6, r25
     724:	80 93 a5 05 	sts	0x05A5, r24
	rfSettings.txSeqNumber = 0;
     728:	10 92 a7 05 	sts	0x05A7, r1
	rfSettings.ackReceived = 0;
     72c:	10 92 a8 05 	sts	0x05A8, r1
	rfSettings.panId = panId;
     730:	50 93 aa 05 	sts	0x05AA, r21
     734:	40 93 a9 05 	sts	0x05A9, r20
	rfSettings.myAddr = myAddr;
     738:	30 93 ac 05 	sts	0x05AC, r19
     73c:	20 93 ab 05 	sts	0x05AB, r18
	rfSettings.receiveOn = 0;
     740:	10 92 ad 05 	sts	0x05AD, r1

	rf_ready = 1;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 c8 05 	sts	0x05C8, r24
	rx_ready = 0;
     74a:	10 92 ec 05 	sts	0x05EC, r1
	tx_done = 0;
     74e:	10 92 b7 05 	sts	0x05B7, r1

	use_glossy = 0;
     752:	10 92 a1 05 	sts	0x05A1, r1

} // rf_init() 
     756:	1f 91       	pop	r17
     758:	08 95       	ret

0000075a <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     75a:	86 e1       	ldi	r24, 0x16	; 22
     75c:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>
}
     760:	08 95       	ret

00000762 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     762:	86 e1       	ldi	r24, 0x16	; 22
     764:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>
}
     768:	08 95       	ret

0000076a <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>
	rx_ready = 0;
     770:	10 92 ec 05 	sts	0x05EC, r1
}
     774:	08 95       	ret

00000776 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
     776:	2f 92       	push	r2
     778:	3f 92       	push	r3
     77a:	4f 92       	push	r4
     77c:	5f 92       	push	r5
     77e:	7f 92       	push	r7
     780:	8f 92       	push	r8
     782:	9f 92       	push	r9
     784:	af 92       	push	r10
     786:	bf 92       	push	r11
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	ec 01       	movw	r28, r24
     79a:	1b 01       	movw	r2, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     79c:	80 91 c8 05 	lds	r24, 0x05C8
     7a0:	88 23       	and	r24, r24
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <rf_tx_packet_repeat+0x30>
     7a4:	0e c1       	rjmp	.+540    	; 0x9c2 <rf_tx_packet_repeat+0x24c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     7a6:	8e 81       	ldd	r24, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     7a8:	90 91 a7 05 	lds	r25, 0x05A7
     7ac:	9f 5f       	subi	r25, 0xFF	; 255
     7ae:	90 93 a7 05 	sts	0x05A7, r25
	machead->fcf = fcf;
     7b2:	e1 e8       	ldi	r30, 0x81	; 129
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     7b6:	81 70       	andi	r24, 0x01	; 1
     7b8:	82 95       	swap	r24
     7ba:	88 0f       	add	r24, r24
     7bc:	80 72       	andi	r24, 0x20	; 32
     7be:	81 64       	ori	r24, 0x41	; 65
     7c0:	80 93 81 01 	sts	0x0181, r24
     7c4:	88 e8       	ldi	r24, 0x88	; 136
     7c6:	81 83       	std	Z+1, r24	; 0x01
	machead->fcf = fcf;
	if (use_glossy) {
     7c8:	80 91 a1 05 	lds	r24, 0x05A1
     7cc:	88 23       	and	r24, r24
     7ce:	49 f0       	breq	.+18     	; 0x7e2 <rf_tx_packet_repeat+0x6c>
		machead->seq_num = 0xFF;
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	82 83       	std	Z+2, r24	; 0x02
		machead->src_addr = 0xAAAA;
     7d4:	8a ea       	ldi	r24, 0xAA	; 170
     7d6:	9a ea       	ldi	r25, 0xAA	; 170
     7d8:	90 87       	std	Z+8, r25	; 0x08
     7da:	87 83       	std	Z+7, r24	; 0x07
		machead->dest_addr = 0xFFFF;
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	9f ef       	ldi	r25, 0xFF	; 255
     7e0:	10 c0       	rjmp	.+32     	; 0x802 <rf_tx_packet_repeat+0x8c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     7e2:	80 91 a7 05 	lds	r24, 0x05A7
     7e6:	82 83       	std	Z+2, r24	; 0x02
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     7e8:	90 91 61 01 	lds	r25, 0x0161
     7ec:	80 91 60 01 	lds	r24, 0x0160
     7f0:	39 2f       	mov	r19, r25
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	82 2b       	or	r24, r18
     7f8:	93 2b       	or	r25, r19
     7fa:	90 87       	std	Z+8, r25	; 0x08
     7fc:	87 83       	std	Z+7, r24	; 0x07
		machead->dest_addr = pRTI->destAddr;
     7fe:	88 81       	ld	r24, Y
     800:	99 81       	ldd	r25, Y+1	; 0x01
     802:	96 83       	std	Z+6, r25	; 0x06
     804:	85 83       	std	Z+5, r24	; 0x05
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     806:	90 91 63 01 	lds	r25, 0x0163
     80a:	80 91 62 01 	lds	r24, 0x0162
     80e:	39 2f       	mov	r19, r25
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	82 2b       	or	r24, r18
     816:	93 2b       	or	r25, r19
     818:	94 83       	std	Z+4, r25	; 0x04
     81a:	83 83       	std	Z+3, r24	; 0x03
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     81c:	4a 81       	ldd	r20, Y+2	; 0x02
     81e:	24 2f       	mov	r18, r20
     820:	33 27       	eor	r19, r19
     822:	27 fd       	sbrc	r18, 7
     824:	30 95       	com	r19
     826:	6b 81       	ldd	r22, Y+3	; 0x03
     828:	7c 81       	ldd	r23, Y+4	; 0x04
     82a:	8a e8       	ldi	r24, 0x8A	; 138
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	53 2f       	mov	r21, r19
     830:	0e 94 9c 2b 	call	0x5738	; 0x5738 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	85 5f       	subi	r24, 0xF5	; 245
     838:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     83c:	70 90 41 01 	lds	r7, 0x0141
     840:	8f e1       	ldi	r24, 0x1F	; 31
     842:	78 22       	and	r7, r24
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     844:	87 2d       	mov	r24, r7
     846:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     848:	82 30       	cpi	r24, 0x02	; 2
     84a:	c0 f3       	brcs	.-16     	; 0x83c <rf_tx_packet_repeat+0xc6>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     84c:	87 2d       	mov	r24, r7
     84e:	81 31       	cpi	r24, 0x11	; 17
     850:	a9 f3       	breq	.-22     	; 0x83c <rf_tx_packet_repeat+0xc6>
     852:	82 31       	cpi	r24, 0x12	; 18
     854:	99 f3       	breq	.-26     	; 0x83c <rf_tx_packet_repeat+0xc6>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     856:	8f 31       	cpi	r24, 0x1F	; 31
     858:	89 f3       	breq	.-30     	; 0x83c <rf_tx_packet_repeat+0xc6>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     85a:	88 30       	cpi	r24, 0x08	; 8
     85c:	39 f0       	breq	.+14     	; 0x86c <rf_tx_packet_repeat+0xf6>
     85e:	86 30       	cpi	r24, 0x06	; 6
     860:	29 f0       	breq	.+10     	; 0x86c <rf_tx_packet_repeat+0xf6>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
     862:	86 31       	cpi	r24, 0x16	; 22
     864:	19 f0       	breq	.+6      	; 0x86c <rf_tx_packet_repeat+0xf6>
     866:	89 30       	cpi	r24, 0x09	; 9
     868:	09 f0       	breq	.+2      	; 0x86c <rf_tx_packet_repeat+0xf6>
     86a:	ab c0       	rjmp	.+342    	; 0x9c2 <rf_tx_packet_repeat+0x24c>
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     86c:	86 e1       	ldi	r24, 0x16	; 22
     86e:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     872:	8d 81       	ldd	r24, Y+5	; 0x05
     874:	88 23       	and	r24, r24
     876:	69 f0       	breq	.+26     	; 0x892 <rf_tx_packet_repeat+0x11c>
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     878:	80 91 48 01 	lds	r24, 0x0148
     87c:	80 68       	ori	r24, 0x80	; 128
     87e:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     882:	80 91 41 01 	lds	r24, 0x0141
     886:	87 ff       	sbrs	r24, 7
     888:	fc cf       	rjmp	.-8      	; 0x882 <rf_tx_packet_repeat+0x10c>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     88a:	80 91 41 01 	lds	r24, 0x0141
     88e:	86 ff       	sbrs	r24, 6
     890:	98 c0       	rjmp	.+304    	; 0x9c2 <rf_tx_packet_repeat+0x24c>
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     892:	89 e0       	ldi	r24, 0x09	; 9
     894:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>
	if(pRTI->ackRequest)
     898:	8e 81       	ldd	r24, Y+6	; 0x06
     89a:	88 23       	and	r24, r24
     89c:	19 f0       	breq	.+6      	; 0x8a4 <rf_tx_packet_repeat+0x12e>
		rf_cmd(TX_ARET_ON);
     89e:	89 e1       	ldi	r24, 0x19	; 25
     8a0:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>
	
	if(ms != 0){
     8a4:	21 14       	cp	r2, r1
     8a6:	31 04       	cpc	r3, r1
     8a8:	a9 f1       	breq	.+106    	; 0x914 <rf_tx_packet_repeat+0x19e>
		nrk_time_get(&curr_t);
     8aa:	8f ea       	ldi	r24, 0xAF	; 175
     8ac:	95 e0       	ldi	r25, 0x05	; 5
     8ae:	0e 94 0a 19 	call	0x3214	; 0x3214 <nrk_time_get>
		target_t.secs = curr_t.secs;
     8b2:	80 91 af 05 	lds	r24, 0x05AF
     8b6:	90 91 b0 05 	lds	r25, 0x05B0
     8ba:	a0 91 b1 05 	lds	r26, 0x05B1
     8be:	b0 91 b2 05 	lds	r27, 0x05B2
     8c2:	80 93 c9 05 	sts	0x05C9, r24
     8c6:	90 93 ca 05 	sts	0x05CA, r25
     8ca:	a0 93 cb 05 	sts	0x05CB, r26
     8ce:	b0 93 cc 05 	sts	0x05CC, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
     8d2:	b1 01       	movw	r22, r2
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	20 e4       	ldi	r18, 0x40	; 64
     8da:	32 e4       	ldi	r19, 0x42	; 66
     8dc:	4f e0       	ldi	r20, 0x0F	; 15
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
     8e4:	20 91 b3 05 	lds	r18, 0x05B3
     8e8:	30 91 b4 05 	lds	r19, 0x05B4
     8ec:	40 91 b5 05 	lds	r20, 0x05B5
     8f0:	50 91 b6 05 	lds	r21, 0x05B6
     8f4:	62 0f       	add	r22, r18
     8f6:	73 1f       	adc	r23, r19
     8f8:	84 1f       	adc	r24, r20
     8fa:	95 1f       	adc	r25, r21
     8fc:	60 93 cd 05 	sts	0x05CD, r22
     900:	70 93 ce 05 	sts	0x05CE, r23
     904:	80 93 cf 05 	sts	0x05CF, r24
     908:	90 93 d0 05 	sts	0x05D0, r25
		nrk_time_compact_nanos(&target_t);
     90c:	89 ec       	ldi	r24, 0xC9	; 201
     90e:	95 e0       	ldi	r25, 0x05	; 5
     910:	0e 94 f7 19 	call	0x33ee	; 0x33ee <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
     914:	10 92 b7 05 	sts	0x05B7, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
     91e:	44 24       	eor	r4, r4
     920:	55 24       	eor	r5, r5
     922:	08 c0       	rjmp	.+16     	; 0x934 <rf_tx_packet_repeat+0x1be>
     924:	08 94       	sec
     926:	41 1c       	adc	r4, r1
     928:	51 1c       	adc	r5, r1
     92a:	88 ee       	ldi	r24, 0xE8	; 232
     92c:	48 16       	cp	r4, r24
     92e:	8d ef       	ldi	r24, 0xFD	; 253
     930:	58 06       	cpc	r5, r24
     932:	21 f0       	breq	.+8      	; 0x93c <rf_tx_packet_repeat+0x1c6>
     934:	80 91 b7 05 	lds	r24, 0x05B7
     938:	88 23       	and	r24, r24
     93a:	a1 f3       	breq	.-24     	; 0x924 <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
     93c:	21 14       	cp	r2, r1
     93e:	31 04       	cpc	r3, r1
     940:	59 f1       	breq	.+86     	; 0x998 <rf_tx_packet_repeat+0x222>
			break;
		nrk_time_get(&curr_t);
     942:	8f ea       	ldi	r24, 0xAF	; 175
     944:	95 e0       	ldi	r25, 0x05	; 5
     946:	0e 94 0a 19 	call	0x3214	; 0x3214 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
     94a:	8d e6       	ldi	r24, 0x6D	; 109
     94c:	96 e0       	ldi	r25, 0x06	; 6
     94e:	00 91 c9 05 	lds	r16, 0x05C9
     952:	10 91 ca 05 	lds	r17, 0x05CA
     956:	20 91 cb 05 	lds	r18, 0x05CB
     95a:	30 91 cc 05 	lds	r19, 0x05CC
     95e:	40 91 cd 05 	lds	r20, 0x05CD
     962:	50 91 ce 05 	lds	r21, 0x05CE
     966:	60 91 cf 05 	lds	r22, 0x05CF
     96a:	70 91 d0 05 	lds	r23, 0x05D0
     96e:	80 90 af 05 	lds	r8, 0x05AF
     972:	90 90 b0 05 	lds	r9, 0x05B0
     976:	a0 90 b1 05 	lds	r10, 0x05B1
     97a:	b0 90 b2 05 	lds	r11, 0x05B2
     97e:	c0 90 b3 05 	lds	r12, 0x05B3
     982:	d0 90 b4 05 	lds	r13, 0x05B4
     986:	e0 90 b5 05 	lds	r14, 0x05B5
     98a:	f0 90 b6 05 	lds	r15, 0x05B6
     98e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <nrk_time_sub>
     992:	8f 3f       	cpi	r24, 0xFF	; 255
     994:	09 f0       	breq	.+2      	; 0x998 <rf_tx_packet_repeat+0x222>
     996:	be cf       	rjmp	.-132    	; 0x914 <rf_tx_packet_repeat+0x19e>

	trx_error = ((pRTI->ackRequest && 
     998:	8e 81       	ldd	r24, Y+6	; 0x06
     99a:	88 23       	and	r24, r24
     99c:	31 f0       	breq	.+12     	; 0x9aa <rf_tx_packet_repeat+0x234>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     99e:	80 91 42 01 	lds	r24, 0x0142
     9a2:	82 95       	swap	r24
     9a4:	86 95       	lsr	r24
     9a6:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     9a8:	29 f4       	brne	.+10     	; 0x9b4 <rf_tx_packet_repeat+0x23e>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     9aa:	88 ee       	ldi	r24, 0xE8	; 232
     9ac:	48 16       	cp	r4, r24
     9ae:	8d ef       	ldi	r24, 0xFD	; 253
     9b0:	58 06       	cpc	r5, r24
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <rf_tx_packet_repeat+0x242>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     9b4:	1f ef       	ldi	r17, 0xFF	; 255
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <rf_tx_packet_repeat+0x244>
     9b8:	11 e0       	ldi	r17, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     9ba:	87 2d       	mov	r24, r7
     9bc:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <rf_tx_packet_repeat+0x24e>
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
		while(!(TRX_STATUS & (1 << CCA_DONE)))
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
     9c2:	1f ef       	ldi	r17, 0xFF	; 255
#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
}
     9c4:	81 2f       	mov	r24, r17
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	bf 90       	pop	r11
     9d8:	af 90       	pop	r10
     9da:	9f 90       	pop	r9
     9dc:	8f 90       	pop	r8
     9de:	7f 90       	pop	r7
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	3f 90       	pop	r3
     9e6:	2f 90       	pop	r2
     9e8:	08 95       	ret

000009ea <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	0e 94 bb 03 	call	0x776	; 0x776 <rf_tx_packet_repeat>
}
     9f2:	08 95       	ret

000009f4 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     9f8:	80 91 c8 05 	lds	r24, 0x05C8
     9fc:	88 23       	and	r24, r24
     9fe:	49 f1       	breq	.+82     	; 0xa52 <rf_cca_check+0x5e>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     a00:	10 91 41 01 	lds	r17, 0x0141
     a04:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     a06:	81 2f       	mov	r24, r17
     a08:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	c8 f3       	brcs	.-14     	; 0xa00 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     a0e:	11 31       	cpi	r17, 0x11	; 17
     a10:	b9 f3       	breq	.-18     	; 0xa00 <rf_cca_check+0xc>
     a12:	12 31       	cpi	r17, 0x12	; 18
     a14:	a9 f3       	breq	.-22     	; 0xa00 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     a16:	1f 31       	cpi	r17, 0x1F	; 31
     a18:	99 f3       	breq	.-26     	; 0xa00 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     a1a:	18 30       	cpi	r17, 0x08	; 8
     a1c:	21 f0       	breq	.+8      	; 0xa26 <rf_cca_check+0x32>
     a1e:	16 30       	cpi	r17, 0x06	; 6
     a20:	11 f0       	breq	.+4      	; 0xa26 <rf_cca_check+0x32>
			&& (trx_status != RX_AACK_ON))
     a22:	16 31       	cpi	r17, 0x16	; 22
     a24:	b1 f4       	brne	.+44     	; 0xa52 <rf_cca_check+0x5e>
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     a26:	86 e1       	ldi	r24, 0x16	; 22
     a28:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     a2c:	80 91 48 01 	lds	r24, 0x0148
     a30:	80 68       	ori	r24, 0x80	; 128
     a32:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     a36:	80 91 41 01 	lds	r24, 0x0141
     a3a:	87 ff       	sbrs	r24, 7
     a3c:	fc cf       	rjmp	.-8      	; 0xa36 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     a3e:	00 91 41 01 	lds	r16, 0x0141
	rf_cmd(trx_status);
     a42:	81 2f       	mov	r24, r17
     a44:	0e 94 aa 02 	call	0x554	; 0x554 <rf_cmd>

	return cca_value;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	06 fd       	sbrc	r16, 6
     a4c:	03 c0       	rjmp	.+6      	; 0xa54 <rf_cca_check+0x60>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <rf_cca_check+0x60>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
     a52:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     a5a:	80 91 c8 05 	lds	r24, 0x05C8
     a5e:	88 23       	and	r24, r24
     a60:	09 f4       	brne	.+2      	; 0xa64 <rf_rx_packet_nonblock+0xa>
     a62:	a2 c0       	rjmp	.+324    	; 0xba8 <rf_rx_packet_nonblock+0x14e>
		return NRK_ERROR;

	if(!rx_ready)
     a64:	80 91 ec 05 	lds	r24, 0x05EC
     a68:	88 23       	and	r24, r24
     a6a:	09 f4       	brne	.+2      	; 0xa6e <rf_rx_packet_nonblock+0x14>
     a6c:	9f c0       	rjmp	.+318    	; 0xbac <rf_rx_packet_nonblock+0x152>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     a6e:	80 91 7b 01 	lds	r24, 0x017B
     a72:	e0 91 a5 05 	lds	r30, 0x05A5
     a76:	f0 91 a6 05 	lds	r31, 0x05A6
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	02 97       	sbiw	r24, 0x02	; 2
     a7e:	24 81       	ldd	r18, Z+4	; 0x04
     a80:	33 27       	eor	r19, r19
     a82:	27 fd       	sbrc	r18, 7
     a84:	30 95       	com	r19
     a86:	28 17       	cp	r18, r24
     a88:	39 07       	cpc	r19, r25
     a8a:	0c f4       	brge	.+2      	; 0xa8e <rf_rx_packet_nonblock+0x34>
     a8c:	91 c0       	rjmp	.+290    	; 0xbb0 <rf_rx_packet_nonblock+0x156>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     a8e:	e0 91 a5 05 	lds	r30, 0x05A5
     a92:	f0 91 a6 05 	lds	r31, 0x05A6
     a96:	80 91 82 01 	lds	r24, 0x0182
     a9a:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     a9c:	e0 91 a5 05 	lds	r30, 0x05A5
     aa0:	f0 91 a6 05 	lds	r31, 0x05A6
     aa4:	80 91 87 01 	lds	r24, 0x0187
     aa8:	90 91 88 01 	lds	r25, 0x0188
     aac:	92 83       	std	Z+2, r25	; 0x02
     aae:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     ab0:	e0 91 a5 05 	lds	r30, 0x05A5
     ab4:	f0 91 a6 05 	lds	r31, 0x05A6
     ab8:	80 91 7b 01 	lds	r24, 0x017B
     abc:	8b 50       	subi	r24, 0x0B	; 11
     abe:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     ac0:	a0 91 a5 05 	lds	r26, 0x05A5
     ac4:	b0 91 a6 05 	lds	r27, 0x05A6
     ac8:	e0 91 a5 05 	lds	r30, 0x05A5
     acc:	f0 91 a6 05 	lds	r31, 0x05A6
     ad0:	13 96       	adiw	r26, 0x03	; 3
     ad2:	9c 91       	ld	r25, X
     ad4:	13 97       	sbiw	r26, 0x03	; 3
     ad6:	84 81       	ldd	r24, Z+4	; 0x04
     ad8:	89 17       	cp	r24, r25
     ada:	3c f0       	brlt	.+14     	; 0xaea <rf_rx_packet_nonblock+0x90>
			|| (rfSettings.pRxInfo->length < 0)){
     adc:	e0 91 a5 05 	lds	r30, 0x05A5
     ae0:	f0 91 a6 05 	lds	r31, 0x05A6
     ae4:	83 81       	ldd	r24, Z+3	; 0x03
     ae6:	87 ff       	sbrs	r24, 7
     ae8:	0d c0       	rjmp	.+26     	; 0xb04 <rf_rx_packet_nonblock+0xaa>
		rx_ready = 0;
     aea:	10 92 ec 05 	sts	0x05EC, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     aee:	80 91 4c 01 	lds	r24, 0x014C
     af2:	8f 77       	andi	r24, 0x7F	; 127
     af4:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     af8:	80 91 4c 01 	lds	r24, 0x014C
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	80 93 4c 01 	sts	0x014C, r24
     b02:	52 c0       	rjmp	.+164    	; 0xba8 <rf_rx_packet_nonblock+0x14e>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     b04:	e0 91 a5 05 	lds	r30, 0x05A5
     b08:	f0 91 a6 05 	lds	r31, 0x05A6
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     b0c:	a0 91 a5 05 	lds	r26, 0x05A5
     b10:	b0 91 a6 05 	lds	r27, 0x05A6
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     b14:	13 96       	adiw	r26, 0x03	; 3
     b16:	4c 91       	ld	r20, X
     b18:	24 2f       	mov	r18, r20
     b1a:	33 27       	eor	r19, r19
     b1c:	27 fd       	sbrc	r18, 7
     b1e:	30 95       	com	r19
     b20:	85 81       	ldd	r24, Z+5	; 0x05
     b22:	96 81       	ldd	r25, Z+6	; 0x06
     b24:	69 e8       	ldi	r22, 0x89	; 137
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	53 2f       	mov	r21, r19
     b2a:	0e 94 9c 2b 	call	0x5738	; 0x5738 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     b2e:	e0 91 a5 05 	lds	r30, 0x05A5
     b32:	f0 91 a6 05 	lds	r31, 0x05A6
     b36:	80 91 80 01 	lds	r24, 0x0180
     b3a:	82 95       	swap	r24
     b3c:	86 95       	lsr	r24
     b3e:	81 70       	andi	r24, 0x01	; 1
     b40:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     b42:	e0 91 a5 05 	lds	r30, 0x05A5
     b46:	f0 91 a6 05 	lds	r31, 0x05A6
     b4a:	80 91 47 01 	lds	r24, 0x0147
     b4e:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     b50:	e0 91 a5 05 	lds	r30, 0x05A5
     b54:	f0 91 a6 05 	lds	r31, 0x05A6
     b58:	80 91 46 01 	lds	r24, 0x0146
     b5c:	86 95       	lsr	r24
     b5e:	86 95       	lsr	r24
     b60:	86 95       	lsr	r24
     b62:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     b64:	e0 91 a5 05 	lds	r30, 0x05A5
     b68:	f0 91 a6 05 	lds	r31, 0x05A6
     b6c:	80 91 47 01 	lds	r24, 0x0147
     b70:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     b72:	a0 91 a5 05 	lds	r26, 0x05A5
     b76:	b0 91 a6 05 	lds	r27, 0x05A6
     b7a:	e0 91 7b 01 	lds	r30, 0x017B
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	e0 58       	subi	r30, 0x80	; 128
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	80 81       	ld	r24, Z
     b86:	1b 96       	adiw	r26, 0x0b	; 11
     b88:	8c 93       	st	X, r24
     b8a:	1b 97       	sbiw	r26, 0x0b	; 11

	/* Reset frame buffer protection */
	rx_ready = 0;
     b8c:	10 92 ec 05 	sts	0x05EC, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     b90:	80 91 4c 01 	lds	r24, 0x014C
     b94:	8f 77       	andi	r24, 0x7F	; 127
     b96:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     b9a:	80 91 4c 01 	lds	r24, 0x014C
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	08 95       	ret

	if(!rx_ready)
		return 0;
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	08 95       	ret
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
		return NRK_ERROR;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     bb2:	08 95       	ret

00000bb4 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     bc0:	80 e8       	ldi	r24, 0x80	; 128
     bc2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bc6:	8f 91       	pop	r24
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 b7 05 	sts	0x05B7, r24
	IRQ_STATUS = (1 << TX_END);
     be4:	80 e4       	ldi	r24, 0x40	; 64
     be6:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     bea:	8f 91       	pop	r24
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     c02:	80 e2       	ldi	r24, 0x20	; 32
     c04:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     c08:	8f 91       	pop	r24
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     c20:	80 e1       	ldi	r24, 0x10	; 16
     c22:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     c26:	8f 91       	pop	r24
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	0b b6       	in	r0, 0x3b	; 59
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     c58:	84 e0       	ldi	r24, 0x04	; 4
     c5a:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     c5e:	e0 91 96 04 	lds	r30, 0x0496
     c62:	f0 91 97 04 	lds	r31, 0x0497
     c66:	30 97       	sbiw	r30, 0x00	; 0
     c68:	09 f0       	breq	.+2      	; 0xc6c <__vector_59+0x3a>
		rx_start_func();
     c6a:	09 95       	icall

	return;
}
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     ca4:	8f 91       	pop	r24
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     cc2:	8f 91       	pop	r24
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     cce:	e9 e4       	ldi	r30, 0x49	; 73
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	90 81       	ld	r25, Z
     cd4:	90 7f       	andi	r25, 0xF0	; 240
     cd6:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     cd8:	90 81       	ld	r25, Z
     cda:	8f 70       	andi	r24, 0x0F	; 15
     cdc:	89 2b       	or	r24, r25
     cde:	80 83       	st	Z, r24
	return;
}
     ce0:	08 95       	ret

00000ce2 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	08 95       	ret

00000ce6 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
	return;
}
     ce6:	08 95       	ret

00000ce8 <rf_security_set_key>:


void rf_security_set_key(uint8_t *key)
{
	return;
}
     ce8:	08 95       	ret

00000cea <rf_security_disable>:


void rf_security_disable()
{
	return;
}
     cea:	08 95       	ret

00000cec <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	08 95       	ret

00000cf0 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     cf0:	80 91 9f 05 	lds	r24, 0x059F
     cf4:	90 91 a0 05 	lds	r25, 0x05A0
     cf8:	08 95       	ret

00000cfa <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	08 95       	ret

00000cfe <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
}
     cfe:	08 95       	ret

00000d00 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	08 95       	ret

00000d04 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	08 95       	ret

00000d08 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	08 95       	ret

00000d0c <rf_carrier_on>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     d0c:	08 95       	ret

00000d0e <rf_carrier_off>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     d0e:	08 95       	ret

00000d10 <rf_test_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     d10:	08 95       	ret

00000d12 <rf_data_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     d12:	08 95       	ret

00000d14 <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
}
     d14:	08 95       	ret

00000d16 <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
}
     d16:	08 95       	ret

00000d18 <rf_set_preamble_length>:
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
}
     d18:	08 95       	ret

00000d1a <rf_set_cca_mode>:


void rf_set_cca_mode(uint8_t mode)
{
}
     d1a:	08 95       	ret

00000d1c <rf_cc2591_tx_on>:


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
     d1c:	e7 e3       	ldi	r30, 0x37	; 55
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	80 81       	ld	r24, Z
     d22:	83 60       	ori	r24, 0x03	; 3
     d24:	80 83       	st	Z, r24
	DDRG	|= 0x1;
     d26:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
     d28:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
     d2a:	8d b1       	in	r24, 0x0d	; 13
     d2c:	80 6e       	ori	r24, 0xE0	; 224
     d2e:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
     d30:	8e b1       	in	r24, 0x0e	; 14
     d32:	80 6e       	ori	r24, 0xE0	; 224
     d34:	8e b9       	out	0x0e, r24	; 14

    //nrk_spin_wait_us(12);
}
     d36:	08 95       	ret

00000d38 <rf_cc2591_rx_on>:

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
     d38:	e7 e3       	ldi	r30, 0x37	; 55
     d3a:	f1 e0       	ldi	r31, 0x01	; 1
     d3c:	80 81       	ld	r24, Z
     d3e:	83 60       	ori	r24, 0x03	; 3
     d40:	80 83       	st	Z, r24
	DDRG	|= 0x1;
     d42:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
     d44:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
     d46:	8d b1       	in	r24, 0x0d	; 13
     d48:	80 6e       	ori	r24, 0xE0	; 224
     d4a:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
     d4c:	8e b1       	in	r24, 0x0e	; 14
     d4e:	80 6e       	ori	r24, 0xE0	; 224
     d50:	8e b9       	out	0x0e, r24	; 14

    //nrk_spin_wait_us(12);
}
     d52:	08 95       	ret

00000d54 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	27 97       	sbiw	r28, 0x07	; 7
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     d74:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     d78:	e0 91 a5 05 	lds	r30, 0x05A5
     d7c:	f0 91 a6 05 	lds	r31, 0x05A6
     d80:	c0 80       	ld	r12, Z
     d82:	e3 80       	ldd	r14, Z+3	; 0x03
     d84:	05 81       	ldd	r16, Z+5	; 0x05
     d86:	16 81       	ldd	r17, Z+6	; 0x06
     d88:	d0 84       	ldd	r13, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     d8a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <rf_rx_packet_nonblock>
	if (err < 1) {
     d8e:	18 16       	cp	r1, r24
     d90:	1c f0       	brlt	.+6      	; 0xd98 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     d92:	8a e6       	ldi	r24, 0x6A	; 106
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     d98:	d8 01       	movw	r26, r16
     d9a:	fc 90       	ld	r15, X
	if (ttl == 0) {
     d9c:	ff 20       	and	r15, r15
     d9e:	39 f4       	brne	.+14     	; 0xdae <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     da0:	89 e8       	ldi	r24, 0x89	; 137
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 35 2c 	call	0x586a	; 0x586a <puts>
#endif
		nrk_int_enable();
     da8:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
		return;
     dac:	42 c0       	rjmp	.+132    	; 0xe32 <rf_glossy_interrupt+0xde>
	} else if (ttl == 5) {
     dae:	bf 2d       	mov	r27, r15
     db0:	b5 30       	cpi	r27, 0x05	; 5
     db2:	21 f4       	brne	.+8      	; 0xdbc <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
     db4:	8a e0       	ldi	r24, 0x0A	; 10
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 2e 2c 	call	0x585c	; 0x585c <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     dbc:	ed b7       	in	r30, 0x3d	; 61
     dbe:	fe b7       	in	r31, 0x3e	; 62
     dc0:	3a 97       	sbiw	r30, 0x0a	; 10
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	fe bf       	out	0x3e, r31	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	ed bf       	out	0x3d, r30	; 61
     dcc:	31 96       	adiw	r30, 0x01	; 1
     dce:	2b ea       	ldi	r18, 0xAB	; 171
     dd0:	32 e0       	ldi	r19, 0x02	; 2
     dd2:	ad b7       	in	r26, 0x3d	; 61
     dd4:	be b7       	in	r27, 0x3e	; 62
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	3c 93       	st	X, r19
     dda:	2e 93       	st	-X, r18
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	c2 82       	std	Z+2, r12	; 0x02
     de0:	13 82       	std	Z+3, r1	; 0x03
     de2:	f4 82       	std	Z+4, r15	; 0x04
     de4:	15 82       	std	Z+5, r1	; 0x05
     de6:	8d 2d       	mov	r24, r13
     de8:	99 27       	eor	r25, r25
     dea:	87 fd       	sbrc	r24, 7
     dec:	90 95       	com	r25
     dee:	97 83       	std	Z+7, r25	; 0x07
     df0:	86 83       	std	Z+6, r24	; 0x06
     df2:	c8 01       	movw	r24, r16
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	91 87       	std	Z+9, r25	; 0x09
     df8:	80 87       	std	Z+8, r24	; 0x08
     dfa:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     dfe:	1d 83       	std	Y+5, r17	; 0x05
     e00:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     e02:	fa 94       	dec	r15
     e04:	f8 01       	movw	r30, r16
     e06:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
     e08:	eb 82       	std	Y+3, r14	; 0x03
	rfTxInfo.cca = 0;
     e0a:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     e0c:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	9f ef       	ldi	r25, 0xFF	; 255
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     e16:	8d b7       	in	r24, 0x3d	; 61
     e18:	9e b7       	in	r25, 0x3e	; 62
     e1a:	0a 96       	adiw	r24, 0x0a	; 10
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	9e bf       	out	0x3e, r25	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	8d bf       	out	0x3d, r24	; 61
     e26:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <rf_tx_packet>
#endif
	return;
}
     e32:	27 96       	adiw	r28, 0x07	; 7
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	08 95       	ret

00000e50 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	0b b6       	in	r0, 0x3b	; 59
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <__vector_60+0x2c>
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	90 91 7b 01 	lds	r25, 0x017B
     e80:	89 17       	cp	r24, r25
     e82:	d8 f3       	brcs	.-10     	; 0xe7a <__vector_60+0x2a>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     e84:	80 91 46 01 	lds	r24, 0x0146
     e88:	87 ff       	sbrs	r24, 7
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <__vector_60+0x44>
		rx_ready = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 ec 05 	sts	0x05EC, r24
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
     e94:	84 ed       	ldi	r24, 0xD4	; 212
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 35 2c 	call	0x586a	; 0x586a <puts>
	}
	IRQ_STATUS = (1 << RX_END);
     e9c:	88 e0       	ldi	r24, 0x08	; 8
     e9e:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     ea2:	80 91 46 01 	lds	r24, 0x0146
     ea6:	87 ff       	sbrs	r24, 7
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <__vector_60+0x66>
		if (use_glossy) rf_glossy_interrupt();
     eaa:	80 91 a1 05 	lds	r24, 0x05A1
     eae:	88 23       	and	r24, r24
     eb0:	11 f0       	breq	.+4      	; 0xeb6 <__vector_60+0x66>
     eb2:	0e 94 aa 06 	call	0xd54	; 0xd54 <rf_glossy_interrupt>
	}

	if(rx_end_func)
     eb6:	e0 91 98 04 	lds	r30, 0x0498
     eba:	f0 91 99 04 	lds	r31, 0x0499
     ebe:	30 97       	sbiw	r30, 0x00	; 0
     ec0:	09 f0       	breq	.+2      	; 0xec4 <__vector_60+0x74>
		rx_end_func();
     ec2:	09 95       	icall

	return;
}
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0b be       	out	0x3b, r0	; 59
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <aes_setkey>:

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     eea:	e8 eb       	ldi	r30, 0xB8	; 184
     eec:	f5 e0       	ldi	r31, 0x05	; 5
     eee:	a8 2f       	mov	r26, r24
     ef0:	b9 2f       	mov	r27, r25
      ekey[i] = key[i];
     ef2:	8c 91       	ld	r24, X
     ef4:	81 93       	st	Z+, r24
      AES_KEY = key[i];
     ef6:	8d 91       	ld	r24, X+
     ef8:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	e8 3c       	cpi	r30, 0xC8	; 200
     f00:	f8 07       	cpc	r31, r24
     f02:	b9 f7       	brne	.-18     	; 0xef2 <aes_setkey+0x8>
     f04:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
     f06:	10 92 3e 01 	sts	0x013E, r1
     f0a:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <aes_setkey+0x1c>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
     f0e:	80 e8       	ldi	r24, 0x80	; 128
     f10:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
     f14:	80 91 3d 01 	lds	r24, 0x013D
     f18:	80 ff       	sbrs	r24, 0
     f1a:	fc cf       	rjmp	.-8      	; 0xf14 <aes_setkey+0x2a>
     f1c:	e3 ed       	ldi	r30, 0xD3	; 211
     f1e:	f5 e0       	ldi	r31, 0x05	; 5
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
     f20:	80 91 3f 01 	lds	r24, 0x013F
     f24:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
     f26:	85 e0       	ldi	r24, 0x05	; 5
     f28:	e3 3e       	cpi	r30, 0xE3	; 227
     f2a:	f8 07       	cpc	r31, r24
     f2c:	c9 f7       	brne	.-14     	; 0xf20 <aes_setkey+0x36>
      dkey[i] = AES_KEY;
   }
}
     f2e:	08 95       	ret

00000f30 <aes_encrypt>:

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
     f30:	66 23       	and	r22, r22
     f32:	09 f4       	brne	.+2      	; 0xf36 <aes_encrypt+0x6>
     f34:	3d c0       	rjmp	.+122    	; 0xfb0 <aes_encrypt+0x80>
     f36:	26 2f       	mov	r18, r22
     f38:	2f 70       	andi	r18, 0x0F	; 15
     f3a:	e1 f5       	brne	.+120    	; 0xfb4 <aes_encrypt+0x84>
     f3c:	e8 eb       	ldi	r30, 0xB8	; 184
     f3e:	f5 e0       	ldi	r31, 0x05	; 5
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
     f40:	21 91       	ld	r18, Z+
     f42:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     f46:	25 e0       	ldi	r18, 0x05	; 5
     f48:	e8 3c       	cpi	r30, 0xC8	; 200
     f4a:	f2 07       	cpc	r31, r18
     f4c:	c9 f7       	brne	.-14     	; 0xf40 <aes_encrypt+0x10>
     f4e:	40 e0       	ldi	r20, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     f50:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     f52:	50 e2       	ldi	r21, 0x20	; 32
     f54:	21 c0       	rjmp	.+66     	; 0xf98 <aes_encrypt+0x68>

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
      if(i==0)
     f56:	44 23       	and	r20, r20
     f58:	19 f4       	brne	.+6      	; 0xf60 <aes_encrypt+0x30>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
     f5a:	10 92 3c 01 	sts	0x013C, r1
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <aes_encrypt+0x34>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     f60:	50 93 3c 01 	sts	0x013C, r21
      dkey[i] = AES_KEY;
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
     f64:	fc 01       	movw	r30, r24
     f66:	e2 0f       	add	r30, r18
     f68:	f3 1f       	adc	r31, r19
     f6a:	df 01       	movw	r26, r30
     f6c:	20 e1       	ldi	r18, 0x10	; 16
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     f6e:	3d 91       	ld	r19, X+
     f70:	30 93 3e 01 	sts	0x013E, r19
     f74:	21 50       	subi	r18, 0x01	; 1
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
     f76:	d9 f7       	brne	.-10     	; 0xf6e <aes_encrypt+0x3e>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     f78:	20 91 3c 01 	lds	r18, 0x013C
     f7c:	20 68       	ori	r18, 0x80	; 128
     f7e:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
     f82:	20 91 3d 01 	lds	r18, 0x013D
     f86:	20 ff       	sbrs	r18, 0
     f88:	fc cf       	rjmp	.-8      	; 0xf82 <aes_encrypt+0x52>
     f8a:	20 e1       	ldi	r18, 0x10	; 16
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
     f8c:	30 91 3e 01 	lds	r19, 0x013E
     f90:	31 93       	st	Z+, r19
     f92:	21 50       	subi	r18, 0x01	; 1
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
     f94:	d9 f7       	brne	.-10     	; 0xf8c <aes_encrypt+0x5c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     f96:	4f 5f       	subi	r20, 0xFF	; 255
     f98:	24 2f       	mov	r18, r20
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	e4 e0       	ldi	r30, 0x04	; 4
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	ea 95       	dec	r30
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <aes_encrypt+0x6e>
     fa6:	26 17       	cp	r18, r22
     fa8:	37 07       	cpc	r19, r23
     faa:	ac f2       	brlt	.-86     	; 0xf56 <aes_encrypt+0x26>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	08 95       	ret
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	08 95       	ret
     fb4:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
     fb6:	08 95       	ret

00000fb8 <aes_decrypt>:
uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
     fb8:	61 30       	cpi	r22, 0x01	; 1
     fba:	09 f4       	brne	.+2      	; 0xfbe <aes_decrypt+0x6>
     fbc:	48 c0       	rjmp	.+144    	; 0x104e <aes_decrypt+0x96>
     fbe:	26 2f       	mov	r18, r22
     fc0:	2f 70       	andi	r18, 0x0F	; 15
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <aes_decrypt+0xe>
     fc4:	46 c0       	rjmp	.+140    	; 0x1052 <aes_decrypt+0x9a>
     fc6:	e3 ed       	ldi	r30, 0xD3	; 211
     fc8:	f5 e0       	ldi	r31, 0x05	; 5
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
     fca:	21 91       	ld	r18, Z+
     fcc:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     fd0:	25 e0       	ldi	r18, 0x05	; 5
     fd2:	e3 3e       	cpi	r30, 0xE3	; 227
     fd4:	f2 07       	cpc	r31, r18
     fd6:	c9 f7       	brne	.-14     	; 0xfca <aes_decrypt+0x12>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     fd8:	62 95       	swap	r22
     fda:	6f 70       	andi	r22, 0x0F	; 15
     fdc:	61 50       	subi	r22, 0x01	; 1
         data[16*i+j] = AES_STATE;
   }
   return 0;
}

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
     fde:	26 2f       	mov	r18, r22
     fe0:	33 27       	eor	r19, r19
     fe2:	27 fd       	sbrc	r18, 7
     fe4:	30 95       	com	r19
     fe6:	f4 e0       	ldi	r31, 0x04	; 4
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	fa 95       	dec	r31
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <aes_decrypt+0x30>
     ff0:	28 0f       	add	r18, r24
     ff2:	39 1f       	adc	r19, r25

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     ff4:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     ff6:	27 c0       	rjmp	.+78     	; 0x1046 <aes_decrypt+0x8e>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     ff8:	70 93 3c 01 	sts	0x013C, r23
     ffc:	f9 01       	movw	r30, r18
     ffe:	80 e1       	ldi	r24, 0x10	; 16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1000:	91 91       	ld	r25, Z+
    1002:	90 93 3e 01 	sts	0x013E, r25
    1006:	81 50       	subi	r24, 0x01	; 1
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1008:	d9 f7       	brne	.-10     	; 0x1000 <aes_decrypt+0x48>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    100a:	80 91 3c 01 	lds	r24, 0x013C
    100e:	80 68       	ori	r24, 0x80	; 128
    1010:	80 93 3c 01 	sts	0x013C, r24
      while(!(AES_STATUS & (1 << AES_DONE)))
    1014:	80 91 3d 01 	lds	r24, 0x013D
    1018:	80 ff       	sbrs	r24, 0
    101a:	fc cf       	rjmp	.-8      	; 0x1014 <aes_decrypt+0x5c>
    101c:	d9 01       	movw	r26, r18
    101e:	50 97       	sbiw	r26, 0x10	; 16
    1020:	c9 01       	movw	r24, r18
    1022:	40 96       	adiw	r24, 0x10	; 16
    1024:	f9 01       	movw	r30, r18
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1026:	50 91 3e 01 	lds	r21, 0x013E
    102a:	50 83       	st	Z, r21
         if(i!=0)
    102c:	66 23       	and	r22, r22
    102e:	19 f0       	breq	.+6      	; 0x1036 <aes_decrypt+0x7e>
            data[16*i+j] ^= data[16*(i-1)+j];
    1030:	4c 91       	ld	r20, X
    1032:	45 27       	eor	r20, r21
    1034:	40 83       	st	Z, r20
    1036:	31 96       	adiw	r30, 0x01	; 1
    1038:	11 96       	adiw	r26, 0x01	; 1
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    103a:	e8 17       	cp	r30, r24
    103c:	f9 07       	cpc	r31, r25
    103e:	99 f7       	brne	.-26     	; 0x1026 <aes_decrypt+0x6e>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1040:	61 50       	subi	r22, 0x01	; 1
    1042:	20 51       	subi	r18, 0x10	; 16
    1044:	30 40       	sbci	r19, 0x00	; 0
    1046:	67 ff       	sbrs	r22, 7
    1048:	d7 cf       	rjmp	.-82     	; 0xff8 <aes_decrypt+0x40>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	08 95       	ret
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	08 95       	ret
    1052:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1054:	08 95       	ret

00001056 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    1056:	80 91 c0 00 	lds	r24, 0x00C0
    105a:	87 ff       	sbrs	r24, 7
    105c:	fc cf       	rjmp	.-8      	; 0x1056 <getc0>
    105e:	80 91 c0 00 	lds	r24, 0x00C0
    1062:	8f 77       	andi	r24, 0x7F	; 127
    1064:	80 93 c0 00 	sts	0x00C0, r24
    1068:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    106c:	08 95       	ret

0000106e <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    106e:	90 91 c0 00 	lds	r25, 0x00C0
    1072:	95 ff       	sbrs	r25, 5
    1074:	fc cf       	rjmp	.-8      	; 0x106e <putc0>
    1076:	90 91 c0 00 	lds	r25, 0x00C0
    107a:	9f 7d       	andi	r25, 0xDF	; 223
    107c:	90 93 c0 00 	sts	0x00C0, r25
    1080:	80 93 c6 00 	sts	0x00C6, r24
}
    1084:	08 95       	ret

00001086 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	08 95       	ret

0000108a <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	19 f4       	brne	.+6      	; 0x1094 <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    108e:	80 91 c8 00 	lds	r24, 0x00C8
    1092:	04 c0       	rjmp	.+8      	; 0x109c <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    1094:	88 23       	and	r24, r24
    1096:	31 f4       	brne	.+12     	; 0x10a4 <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1098:	80 91 c0 00 	lds	r24, 0x00C0
{
   return NRK_ERROR;
}


uint8_t nrk_uart_data_ready(uint8_t uart_num)
    109c:	88 1f       	adc	r24, r24
    109e:	88 27       	eor	r24, r24
    10a0:	88 1f       	adc	r24, r24
    10a2:	08 95       	ret
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
}
    10a6:	08 95       	ret

000010a8 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <nrk_kprintf+0x16>
        putchar(c);
    10b0:	60 91 60 07 	lds	r22, 0x0760
    10b4:	70 91 61 07 	lds	r23, 0x0761
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    10be:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    10c0:	21 96       	adiw	r28, 0x01	; 1
    10c2:	84 91       	lpm	r24, Z+
    10c4:	88 23       	and	r24, r24
    10c6:	a1 f7       	brne	.-24     	; 0x10b0 <nrk_kprintf+0x8>
        putchar(c);
}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    10ce:	86 e0       	ldi	r24, 0x06	; 6
    10d0:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    10d2:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    10d4:	88 ef       	ldi	r24, 0xF8	; 248
    10d6:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    10d8:	80 ef       	ldi	r24, 0xF0	; 240
    10da:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	8d b9       	out	0x0d, r24	; 13
} 
    10e0:	08 95       	ret

000010e2 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    10e2:	0e 94 67 08 	call	0x10ce	; 0x10ce <PORT_INIT>
//SPI_INIT();
}
    10e6:	08 95       	ret

000010e8 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    10e8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ea:	09 f4       	brne	.+2      	; 0x10ee <nrk_gpio_set+0x6>
    10ec:	83 c0       	rjmp	.+262    	; 0x11f4 <nrk_gpio_set+0x10c>
        switch (pin & 0x07) {
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	27 70       	andi	r18, 0x07	; 7
    10f4:	30 70       	andi	r19, 0x00	; 0
    10f6:	23 30       	cpi	r18, 0x03	; 3
    10f8:	31 05       	cpc	r19, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <nrk_gpio_set+0x16>
    10fc:	43 c0       	rjmp	.+134    	; 0x1184 <nrk_gpio_set+0x9c>
    10fe:	24 30       	cpi	r18, 0x04	; 4
    1100:	31 05       	cpc	r19, r1
    1102:	54 f4       	brge	.+20     	; 0x1118 <nrk_gpio_set+0x30>
    1104:	21 30       	cpi	r18, 0x01	; 1
    1106:	31 05       	cpc	r19, r1
    1108:	11 f1       	breq	.+68     	; 0x114e <nrk_gpio_set+0x66>
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	5c f5       	brge	.+86     	; 0x1166 <nrk_gpio_set+0x7e>
    1110:	21 15       	cp	r18, r1
    1112:	31 05       	cpc	r19, r1
    1114:	71 f0       	breq	.+28     	; 0x1132 <nrk_gpio_set+0x4a>
    1116:	70 c0       	rjmp	.+224    	; 0x11f8 <nrk_gpio_set+0x110>
    1118:	25 30       	cpi	r18, 0x05	; 5
    111a:	31 05       	cpc	r19, r1
    111c:	09 f4       	brne	.+2      	; 0x1120 <nrk_gpio_set+0x38>
    111e:	4e c0       	rjmp	.+156    	; 0x11bc <nrk_gpio_set+0xd4>
    1120:	25 30       	cpi	r18, 0x05	; 5
    1122:	31 05       	cpc	r19, r1
    1124:	0c f4       	brge	.+2      	; 0x1128 <nrk_gpio_set+0x40>
    1126:	3c c0       	rjmp	.+120    	; 0x11a0 <nrk_gpio_set+0xb8>
    1128:	26 30       	cpi	r18, 0x06	; 6
    112a:	31 05       	cpc	r19, r1
    112c:	09 f0       	breq	.+2      	; 0x1130 <nrk_gpio_set+0x48>
    112e:	64 c0       	rjmp	.+200    	; 0x11f8 <nrk_gpio_set+0x110>
    1130:	53 c0       	rjmp	.+166    	; 0x11d8 <nrk_gpio_set+0xf0>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1132:	92 b1       	in	r25, 0x02	; 2
    1134:	86 95       	lsr	r24
    1136:	86 95       	lsr	r24
    1138:	86 95       	lsr	r24
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <nrk_gpio_set+0x5c>
    1140:	44 0f       	add	r20, r20
    1142:	55 1f       	adc	r21, r21
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <nrk_gpio_set+0x58>
    1148:	94 2b       	or	r25, r20
    114a:	92 b9       	out	0x02, r25	; 2
    114c:	19 c0       	rjmp	.+50     	; 0x1180 <nrk_gpio_set+0x98>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    114e:	95 b1       	in	r25, 0x05	; 5
    1150:	86 95       	lsr	r24
    1152:	86 95       	lsr	r24
    1154:	86 95       	lsr	r24
    1156:	02 c0       	rjmp	.+4      	; 0x115c <nrk_gpio_set+0x74>
    1158:	22 0f       	add	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	8a 95       	dec	r24
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <nrk_gpio_set+0x70>
    1160:	92 2b       	or	r25, r18
    1162:	95 b9       	out	0x05, r25	; 5
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <nrk_gpio_set+0x98>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1166:	98 b1       	in	r25, 0x08	; 8
    1168:	86 95       	lsr	r24
    116a:	86 95       	lsr	r24
    116c:	86 95       	lsr	r24
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <nrk_gpio_set+0x90>
    1174:	44 0f       	add	r20, r20
    1176:	55 1f       	adc	r21, r21
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <nrk_gpio_set+0x8c>
    117c:	94 2b       	or	r25, r20
    117e:	98 b9       	out	0x08, r25	; 8
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1182:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1184:	9b b1       	in	r25, 0x0b	; 11
    1186:	86 95       	lsr	r24
    1188:	86 95       	lsr	r24
    118a:	86 95       	lsr	r24
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <nrk_gpio_set+0xae>
    1192:	44 0f       	add	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <nrk_gpio_set+0xaa>
    119a:	94 2b       	or	r25, r20
    119c:	9b b9       	out	0x0b, r25	; 11
    119e:	f0 cf       	rjmp	.-32     	; 0x1180 <nrk_gpio_set+0x98>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11a0:	9e b1       	in	r25, 0x0e	; 14
    11a2:	86 95       	lsr	r24
    11a4:	86 95       	lsr	r24
    11a6:	86 95       	lsr	r24
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <nrk_gpio_set+0xca>
    11ae:	44 0f       	add	r20, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <nrk_gpio_set+0xc6>
    11b6:	94 2b       	or	r25, r20
    11b8:	9e b9       	out	0x0e, r25	; 14
    11ba:	e2 cf       	rjmp	.-60     	; 0x1180 <nrk_gpio_set+0x98>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11bc:	91 b3       	in	r25, 0x11	; 17
    11be:	86 95       	lsr	r24
    11c0:	86 95       	lsr	r24
    11c2:	86 95       	lsr	r24
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <nrk_gpio_set+0xe6>
    11ca:	44 0f       	add	r20, r20
    11cc:	55 1f       	adc	r21, r21
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <nrk_gpio_set+0xe2>
    11d2:	94 2b       	or	r25, r20
    11d4:	91 bb       	out	0x11, r25	; 17
    11d6:	d4 cf       	rjmp	.-88     	; 0x1180 <nrk_gpio_set+0x98>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11d8:	94 b3       	in	r25, 0x14	; 20
    11da:	86 95       	lsr	r24
    11dc:	86 95       	lsr	r24
    11de:	86 95       	lsr	r24
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <nrk_gpio_set+0x102>
    11e6:	44 0f       	add	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <nrk_gpio_set+0xfe>
    11ee:	94 2b       	or	r25, r20
    11f0:	94 bb       	out	0x14, r25	; 20
    11f2:	c6 cf       	rjmp	.-116    	; 0x1180 <nrk_gpio_set+0x98>
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	08 95       	ret
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    11fa:	08 95       	ret

000011fc <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    11fc:	8f 3f       	cpi	r24, 0xFF	; 255
    11fe:	09 f4       	brne	.+2      	; 0x1202 <nrk_gpio_clr+0x6>
    1200:	7b c0       	rjmp	.+246    	; 0x12f8 <nrk_gpio_clr+0xfc>
        switch (pin & 0x07) {
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	27 70       	andi	r18, 0x07	; 7
    1208:	30 70       	andi	r19, 0x00	; 0
    120a:	23 30       	cpi	r18, 0x03	; 3
    120c:	31 05       	cpc	r19, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <nrk_gpio_clr+0x16>
    1210:	46 c0       	rjmp	.+140    	; 0x129e <nrk_gpio_clr+0xa2>
    1212:	24 30       	cpi	r18, 0x04	; 4
    1214:	31 05       	cpc	r19, r1
    1216:	54 f4       	brge	.+20     	; 0x122c <nrk_gpio_clr+0x30>
    1218:	21 30       	cpi	r18, 0x01	; 1
    121a:	31 05       	cpc	r19, r1
    121c:	19 f1       	breq	.+70     	; 0x1264 <nrk_gpio_clr+0x68>
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	6c f5       	brge	.+90     	; 0x127e <nrk_gpio_clr+0x82>
    1224:	21 15       	cp	r18, r1
    1226:	31 05       	cpc	r19, r1
    1228:	71 f0       	breq	.+28     	; 0x1246 <nrk_gpio_clr+0x4a>
    122a:	68 c0       	rjmp	.+208    	; 0x12fc <nrk_gpio_clr+0x100>
    122c:	25 30       	cpi	r18, 0x05	; 5
    122e:	31 05       	cpc	r19, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <nrk_gpio_clr+0x38>
    1232:	53 c0       	rjmp	.+166    	; 0x12da <nrk_gpio_clr+0xde>
    1234:	25 30       	cpi	r18, 0x05	; 5
    1236:	31 05       	cpc	r19, r1
    1238:	0c f4       	brge	.+2      	; 0x123c <nrk_gpio_clr+0x40>
    123a:	40 c0       	rjmp	.+128    	; 0x12bc <nrk_gpio_clr+0xc0>
    123c:	26 30       	cpi	r18, 0x06	; 6
    123e:	31 05       	cpc	r19, r1
    1240:	09 f0       	breq	.+2      	; 0x1244 <nrk_gpio_clr+0x48>
    1242:	5c c0       	rjmp	.+184    	; 0x12fc <nrk_gpio_clr+0x100>
    1244:	4a c0       	rjmp	.+148    	; 0x12da <nrk_gpio_clr+0xde>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1246:	92 b1       	in	r25, 0x02	; 2
    1248:	86 95       	lsr	r24
    124a:	86 95       	lsr	r24
    124c:	86 95       	lsr	r24
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <nrk_gpio_clr+0x5c>
    1254:	44 0f       	add	r20, r20
    1256:	55 1f       	adc	r21, r21
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <nrk_gpio_clr+0x58>
    125c:	40 95       	com	r20
    125e:	49 23       	and	r20, r25
    1260:	42 b9       	out	0x02, r20	; 2
    1262:	1b c0       	rjmp	.+54     	; 0x129a <nrk_gpio_clr+0x9e>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1264:	95 b1       	in	r25, 0x05	; 5
    1266:	86 95       	lsr	r24
    1268:	86 95       	lsr	r24
    126a:	86 95       	lsr	r24
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <nrk_gpio_clr+0x76>
    126e:	22 0f       	add	r18, r18
    1270:	33 1f       	adc	r19, r19
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <nrk_gpio_clr+0x72>
    1276:	20 95       	com	r18
    1278:	29 23       	and	r18, r25
    127a:	25 b9       	out	0x05, r18	; 5
    127c:	0e c0       	rjmp	.+28     	; 0x129a <nrk_gpio_clr+0x9e>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    127e:	98 b1       	in	r25, 0x08	; 8
    1280:	86 95       	lsr	r24
    1282:	86 95       	lsr	r24
    1284:	86 95       	lsr	r24
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <nrk_gpio_clr+0x94>
    128c:	44 0f       	add	r20, r20
    128e:	55 1f       	adc	r21, r21
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <nrk_gpio_clr+0x90>
    1294:	40 95       	com	r20
    1296:	49 23       	and	r20, r25
    1298:	48 b9       	out	0x08, r20	; 8
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    129c:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    129e:	9b b1       	in	r25, 0x0b	; 11
    12a0:	86 95       	lsr	r24
    12a2:	86 95       	lsr	r24
    12a4:	86 95       	lsr	r24
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <nrk_gpio_clr+0xb4>
    12ac:	44 0f       	add	r20, r20
    12ae:	55 1f       	adc	r21, r21
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <nrk_gpio_clr+0xb0>
    12b4:	40 95       	com	r20
    12b6:	49 23       	and	r20, r25
    12b8:	4b b9       	out	0x0b, r20	; 11
    12ba:	ef cf       	rjmp	.-34     	; 0x129a <nrk_gpio_clr+0x9e>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12bc:	9e b1       	in	r25, 0x0e	; 14
    12be:	86 95       	lsr	r24
    12c0:	86 95       	lsr	r24
    12c2:	86 95       	lsr	r24
    12c4:	41 e0       	ldi	r20, 0x01	; 1
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <nrk_gpio_clr+0xd2>
    12ca:	44 0f       	add	r20, r20
    12cc:	55 1f       	adc	r21, r21
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <nrk_gpio_clr+0xce>
    12d2:	40 95       	com	r20
    12d4:	49 23       	and	r20, r25
    12d6:	4e b9       	out	0x0e, r20	; 14
    12d8:	e0 cf       	rjmp	.-64     	; 0x129a <nrk_gpio_clr+0x9e>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12da:	91 b3       	in	r25, 0x11	; 17
    12dc:	86 95       	lsr	r24
    12de:	86 95       	lsr	r24
    12e0:	86 95       	lsr	r24
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <nrk_gpio_clr+0xf0>
    12e8:	44 0f       	add	r20, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	8a 95       	dec	r24
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <nrk_gpio_clr+0xec>
    12f0:	40 95       	com	r20
    12f2:	49 23       	and	r20, r25
    12f4:	41 bb       	out	0x11, r20	; 17
    12f6:	d1 cf       	rjmp	.-94     	; 0x129a <nrk_gpio_clr+0x9e>
        return 1;
}

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	08 95       	ret
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    12fe:	08 95       	ret

00001300 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1300:	8f 3f       	cpi	r24, 0xFF	; 255
    1302:	b1 f1       	breq	.+108    	; 0x1370 <nrk_gpio_get+0x70>
        switch (pin & 0x07) {
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	27 70       	andi	r18, 0x07	; 7
    130a:	30 70       	andi	r19, 0x00	; 0
    130c:	23 30       	cpi	r18, 0x03	; 3
    130e:	31 05       	cpc	r19, r1
    1310:	e9 f0       	breq	.+58     	; 0x134c <nrk_gpio_get+0x4c>
    1312:	24 30       	cpi	r18, 0x04	; 4
    1314:	31 05       	cpc	r19, r1
    1316:	54 f4       	brge	.+20     	; 0x132c <nrk_gpio_get+0x2c>
    1318:	21 30       	cpi	r18, 0x01	; 1
    131a:	31 05       	cpc	r19, r1
    131c:	99 f0       	breq	.+38     	; 0x1344 <nrk_gpio_get+0x44>
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	94 f4       	brge	.+36     	; 0x1348 <nrk_gpio_get+0x48>
    1324:	21 15       	cp	r18, r1
    1326:	31 05       	cpc	r19, r1
    1328:	59 f0       	breq	.+22     	; 0x1340 <nrk_gpio_get+0x40>
    132a:	22 c0       	rjmp	.+68     	; 0x1370 <nrk_gpio_get+0x70>
    132c:	25 30       	cpi	r18, 0x05	; 5
    132e:	31 05       	cpc	r19, r1
    1330:	89 f0       	breq	.+34     	; 0x1354 <nrk_gpio_get+0x54>
    1332:	25 30       	cpi	r18, 0x05	; 5
    1334:	31 05       	cpc	r19, r1
    1336:	64 f0       	brlt	.+24     	; 0x1350 <nrk_gpio_get+0x50>
    1338:	26 30       	cpi	r18, 0x06	; 6
    133a:	31 05       	cpc	r19, r1
    133c:	c9 f4       	brne	.+50     	; 0x1370 <nrk_gpio_get+0x70>
    133e:	0c c0       	rjmp	.+24     	; 0x1358 <nrk_gpio_get+0x58>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1340:	20 b1       	in	r18, 0x00	; 0
    1342:	0b c0       	rjmp	.+22     	; 0x135a <nrk_gpio_get+0x5a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1344:	23 b1       	in	r18, 0x03	; 3
    1346:	09 c0       	rjmp	.+18     	; 0x135a <nrk_gpio_get+0x5a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1348:	26 b1       	in	r18, 0x06	; 6
    134a:	07 c0       	rjmp	.+14     	; 0x135a <nrk_gpio_get+0x5a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    134c:	29 b1       	in	r18, 0x09	; 9
    134e:	05 c0       	rjmp	.+10     	; 0x135a <nrk_gpio_get+0x5a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1350:	2c b1       	in	r18, 0x0c	; 12
    1352:	03 c0       	rjmp	.+6      	; 0x135a <nrk_gpio_get+0x5a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1354:	2f b1       	in	r18, 0x0f	; 15
    1356:	01 c0       	rjmp	.+2      	; 0x135a <nrk_gpio_get+0x5a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1358:	22 b3       	in	r18, 0x12	; 18
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	86 95       	lsr	r24
    135e:	86 95       	lsr	r24
    1360:	86 95       	lsr	r24
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <nrk_gpio_get+0x68>
    1364:	35 95       	asr	r19
    1366:	27 95       	ror	r18
    1368:	8a 95       	dec	r24
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <nrk_gpio_get+0x64>
    136c:	21 70       	andi	r18, 0x01	; 1
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <nrk_gpio_get+0x72>
                default: return -1;
    1370:	2f ef       	ldi	r18, 0xFF	; 255
        }
        return 1;
}
    1372:	82 2f       	mov	r24, r18
    1374:	08 95       	ret

00001376 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <nrk_gpio_toggle+0x6>
    137a:	23 c1       	rjmp	.+582    	; 0x15c2 <nrk_gpio_toggle+0x24c>
        switch (pin & 0x07) {
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	27 70       	andi	r18, 0x07	; 7
    1382:	30 70       	andi	r19, 0x00	; 0
    1384:	23 30       	cpi	r18, 0x03	; 3
    1386:	31 05       	cpc	r19, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <nrk_gpio_toggle+0x16>
    138a:	82 c0       	rjmp	.+260    	; 0x1490 <nrk_gpio_toggle+0x11a>
    138c:	24 30       	cpi	r18, 0x04	; 4
    138e:	31 05       	cpc	r19, r1
    1390:	5c f4       	brge	.+22     	; 0x13a8 <nrk_gpio_toggle+0x32>
    1392:	21 30       	cpi	r18, 0x01	; 1
    1394:	31 05       	cpc	r19, r1
    1396:	d9 f1       	breq	.+118    	; 0x140e <nrk_gpio_toggle+0x98>
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	0c f0       	brlt	.+2      	; 0x13a0 <nrk_gpio_toggle+0x2a>
    139e:	52 c0       	rjmp	.+164    	; 0x1444 <nrk_gpio_toggle+0xce>
    13a0:	21 15       	cp	r18, r1
    13a2:	31 05       	cpc	r19, r1
    13a4:	71 f0       	breq	.+28     	; 0x13c2 <nrk_gpio_toggle+0x4c>
    13a6:	0f c1       	rjmp	.+542    	; 0x15c6 <nrk_gpio_toggle+0x250>
    13a8:	25 30       	cpi	r18, 0x05	; 5
    13aa:	31 05       	cpc	r19, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <nrk_gpio_toggle+0x3a>
    13ae:	bd c0       	rjmp	.+378    	; 0x152a <nrk_gpio_toggle+0x1b4>
    13b0:	25 30       	cpi	r18, 0x05	; 5
    13b2:	31 05       	cpc	r19, r1
    13b4:	0c f4       	brge	.+2      	; 0x13b8 <nrk_gpio_toggle+0x42>
    13b6:	93 c0       	rjmp	.+294    	; 0x14de <nrk_gpio_toggle+0x168>
    13b8:	26 30       	cpi	r18, 0x06	; 6
    13ba:	31 05       	cpc	r19, r1
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <nrk_gpio_toggle+0x4a>
    13be:	03 c1       	rjmp	.+518    	; 0x15c6 <nrk_gpio_toggle+0x250>
    13c0:	da c0       	rjmp	.+436    	; 0x1576 <nrk_gpio_toggle+0x200>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    13c2:	90 b1       	in	r25, 0x00	; 0
    13c4:	86 95       	lsr	r24
    13c6:	86 95       	lsr	r24
    13c8:	86 95       	lsr	r24
    13ca:	28 2f       	mov	r18, r24
    13cc:	89 2f       	mov	r24, r25
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <nrk_gpio_toggle+0x62>
    13d4:	95 95       	asr	r25
    13d6:	87 95       	ror	r24
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <nrk_gpio_toggle+0x5e>
    13dc:	80 fd       	sbrc	r24, 0
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <nrk_gpio_toggle+0x80>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    13e0:	32 b1       	in	r19, 0x02	; 2
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <nrk_gpio_toggle+0x76>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	2a 95       	dec	r18
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <nrk_gpio_toggle+0x72>
    13f0:	38 2b       	or	r19, r24
    13f2:	32 b9       	out	0x02, r19	; 2
    13f4:	66 c0       	rjmp	.+204    	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    13f6:	32 b1       	in	r19, 0x02	; 2
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <nrk_gpio_toggle+0x8c>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	2a 95       	dec	r18
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <nrk_gpio_toggle+0x88>
    1406:	80 95       	com	r24
    1408:	83 23       	and	r24, r19
    140a:	82 b9       	out	0x02, r24	; 2
    140c:	5a c0       	rjmp	.+180    	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    140e:	43 b1       	in	r20, 0x03	; 3
    1410:	86 95       	lsr	r24
    1412:	86 95       	lsr	r24
    1414:	86 95       	lsr	r24
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	08 2e       	mov	r0, r24
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <nrk_gpio_toggle+0xaa>
    141c:	55 95       	asr	r21
    141e:	47 95       	ror	r20
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <nrk_gpio_toggle+0xa6>
    1424:	02 c0       	rjmp	.+4      	; 0x142a <nrk_gpio_toggle+0xb4>
    1426:	22 0f       	add	r18, r18
    1428:	33 1f       	adc	r19, r19
    142a:	8a 95       	dec	r24
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <nrk_gpio_toggle+0xb0>
    142e:	40 fd       	sbrc	r20, 0
    1430:	04 c0       	rjmp	.+8      	; 0x143a <nrk_gpio_toggle+0xc4>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1432:	85 b1       	in	r24, 0x05	; 5
    1434:	82 2b       	or	r24, r18
    1436:	85 b9       	out	0x05, r24	; 5
    1438:	44 c0       	rjmp	.+136    	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    143a:	85 b1       	in	r24, 0x05	; 5
    143c:	20 95       	com	r18
    143e:	28 23       	and	r18, r24
    1440:	25 b9       	out	0x05, r18	; 5
    1442:	3f c0       	rjmp	.+126    	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1444:	96 b1       	in	r25, 0x06	; 6
    1446:	86 95       	lsr	r24
    1448:	86 95       	lsr	r24
    144a:	86 95       	lsr	r24
    144c:	28 2f       	mov	r18, r24
    144e:	89 2f       	mov	r24, r25
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <nrk_gpio_toggle+0xe4>
    1456:	95 95       	asr	r25
    1458:	87 95       	ror	r24
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <nrk_gpio_toggle+0xe0>
    145e:	80 fd       	sbrc	r24, 0
    1460:	0b c0       	rjmp	.+22     	; 0x1478 <nrk_gpio_toggle+0x102>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1462:	38 b1       	in	r19, 0x08	; 8
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 c0       	rjmp	.+4      	; 0x146e <nrk_gpio_toggle+0xf8>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	2a 95       	dec	r18
    1470:	e2 f7       	brpl	.-8      	; 0x146a <nrk_gpio_toggle+0xf4>
    1472:	38 2b       	or	r19, r24
    1474:	38 b9       	out	0x08, r19	; 8
    1476:	25 c0       	rjmp	.+74     	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1478:	38 b1       	in	r19, 0x08	; 8
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <nrk_gpio_toggle+0x10e>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	2a 95       	dec	r18
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <nrk_gpio_toggle+0x10a>
    1488:	80 95       	com	r24
    148a:	83 23       	and	r24, r19
    148c:	88 b9       	out	0x08, r24	; 8
    148e:	19 c0       	rjmp	.+50     	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1490:	99 b1       	in	r25, 0x09	; 9
    1492:	86 95       	lsr	r24
    1494:	86 95       	lsr	r24
    1496:	86 95       	lsr	r24
    1498:	28 2f       	mov	r18, r24
    149a:	89 2f       	mov	r24, r25
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <nrk_gpio_toggle+0x130>
    14a2:	95 95       	asr	r25
    14a4:	87 95       	ror	r24
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <nrk_gpio_toggle+0x12c>
    14aa:	80 fd       	sbrc	r24, 0
    14ac:	0c c0       	rjmp	.+24     	; 0x14c6 <nrk_gpio_toggle+0x150>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    14ae:	3b b1       	in	r19, 0x0b	; 11
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <nrk_gpio_toggle+0x144>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	2a 95       	dec	r18
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <nrk_gpio_toggle+0x140>
    14be:	38 2b       	or	r19, r24
    14c0:	3b b9       	out	0x0b, r19	; 11
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	08 95       	ret
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    14c6:	3b b1       	in	r19, 0x0b	; 11
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <nrk_gpio_toggle+0x15c>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	2a 95       	dec	r18
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <nrk_gpio_toggle+0x158>
    14d6:	80 95       	com	r24
    14d8:	83 23       	and	r24, r19
    14da:	8b b9       	out	0x0b, r24	; 11
    14dc:	f2 cf       	rjmp	.-28     	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    14de:	9c b1       	in	r25, 0x0c	; 12
    14e0:	86 95       	lsr	r24
    14e2:	86 95       	lsr	r24
    14e4:	86 95       	lsr	r24
    14e6:	28 2f       	mov	r18, r24
    14e8:	89 2f       	mov	r24, r25
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <nrk_gpio_toggle+0x17e>
    14f0:	95 95       	asr	r25
    14f2:	87 95       	ror	r24
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <nrk_gpio_toggle+0x17a>
    14f8:	80 fd       	sbrc	r24, 0
    14fa:	0b c0       	rjmp	.+22     	; 0x1512 <nrk_gpio_toggle+0x19c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    14fc:	3e b1       	in	r19, 0x0e	; 14
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <nrk_gpio_toggle+0x192>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	2a 95       	dec	r18
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <nrk_gpio_toggle+0x18e>
    150c:	38 2b       	or	r19, r24
    150e:	3e b9       	out	0x0e, r19	; 14
    1510:	d8 cf       	rjmp	.-80     	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    1512:	3e b1       	in	r19, 0x0e	; 14
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 c0       	rjmp	.+4      	; 0x151e <nrk_gpio_toggle+0x1a8>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	2a 95       	dec	r18
    1520:	e2 f7       	brpl	.-8      	; 0x151a <nrk_gpio_toggle+0x1a4>
    1522:	80 95       	com	r24
    1524:	83 23       	and	r24, r19
    1526:	8e b9       	out	0x0e, r24	; 14
    1528:	cc cf       	rjmp	.-104    	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    152a:	9f b1       	in	r25, 0x0f	; 15
    152c:	86 95       	lsr	r24
    152e:	86 95       	lsr	r24
    1530:	86 95       	lsr	r24
    1532:	28 2f       	mov	r18, r24
    1534:	89 2f       	mov	r24, r25
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <nrk_gpio_toggle+0x1ca>
    153c:	95 95       	asr	r25
    153e:	87 95       	ror	r24
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <nrk_gpio_toggle+0x1c6>
    1544:	80 fd       	sbrc	r24, 0
    1546:	0b c0       	rjmp	.+22     	; 0x155e <nrk_gpio_toggle+0x1e8>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1548:	31 b3       	in	r19, 0x11	; 17
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <nrk_gpio_toggle+0x1de>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	2a 95       	dec	r18
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <nrk_gpio_toggle+0x1da>
    1558:	38 2b       	or	r19, r24
    155a:	31 bb       	out	0x11, r19	; 17
    155c:	b2 cf       	rjmp	.-156    	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    155e:	31 b3       	in	r19, 0x11	; 17
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 c0       	rjmp	.+4      	; 0x156a <nrk_gpio_toggle+0x1f4>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	2a 95       	dec	r18
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <nrk_gpio_toggle+0x1f0>
    156e:	80 95       	com	r24
    1570:	83 23       	and	r24, r19
    1572:	81 bb       	out	0x11, r24	; 17
    1574:	a6 cf       	rjmp	.-180    	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1576:	92 b3       	in	r25, 0x12	; 18
    1578:	86 95       	lsr	r24
    157a:	86 95       	lsr	r24
    157c:	86 95       	lsr	r24
    157e:	28 2f       	mov	r18, r24
    1580:	89 2f       	mov	r24, r25
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <nrk_gpio_toggle+0x216>
    1588:	95 95       	asr	r25
    158a:	87 95       	ror	r24
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <nrk_gpio_toggle+0x212>
    1590:	80 fd       	sbrc	r24, 0
    1592:	0b c0       	rjmp	.+22     	; 0x15aa <nrk_gpio_toggle+0x234>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1594:	34 b3       	in	r19, 0x14	; 20
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <nrk_gpio_toggle+0x22a>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	2a 95       	dec	r18
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <nrk_gpio_toggle+0x226>
    15a4:	38 2b       	or	r19, r24
    15a6:	34 bb       	out	0x14, r19	; 20
    15a8:	8c cf       	rjmp	.-232    	; 0x14c2 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    15aa:	34 b3       	in	r19, 0x14	; 20
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <nrk_gpio_toggle+0x240>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	2a 95       	dec	r18
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <nrk_gpio_toggle+0x23c>
    15ba:	80 95       	com	r24
    15bc:	83 23       	and	r24, r19
    15be:	84 bb       	out	0x14, r24	; 20
    15c0:	80 cf       	rjmp	.-256    	; 0x14c2 <nrk_gpio_toggle+0x14c>
        return 1;
}

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	08 95       	ret
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    15c8:	08 95       	ret

000015ca <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    15ca:	8f 3f       	cpi	r24, 0xFF	; 255
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <nrk_gpio_direction+0x6>
    15ce:	0d c1       	rjmp	.+538    	; 0x17ea <nrk_gpio_direction+0x220>
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    15d4:	66 23       	and	r22, r22
    15d6:	09 f0       	breq	.+2      	; 0x15da <nrk_gpio_direction+0x10>
    15d8:	87 c0       	rjmp	.+270    	; 0x16e8 <nrk_gpio_direction+0x11e>
                switch (pin & 0x07) {
    15da:	27 70       	andi	r18, 0x07	; 7
    15dc:	30 70       	andi	r19, 0x00	; 0
    15de:	23 30       	cpi	r18, 0x03	; 3
    15e0:	31 05       	cpc	r19, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <nrk_gpio_direction+0x1c>
    15e4:	45 c0       	rjmp	.+138    	; 0x1670 <nrk_gpio_direction+0xa6>
    15e6:	24 30       	cpi	r18, 0x04	; 4
    15e8:	31 05       	cpc	r19, r1
    15ea:	54 f4       	brge	.+20     	; 0x1600 <nrk_gpio_direction+0x36>
    15ec:	21 30       	cpi	r18, 0x01	; 1
    15ee:	31 05       	cpc	r19, r1
    15f0:	19 f1       	breq	.+70     	; 0x1638 <nrk_gpio_direction+0x6e>
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	6c f5       	brge	.+90     	; 0x1652 <nrk_gpio_direction+0x88>
    15f8:	21 15       	cp	r18, r1
    15fa:	31 05       	cpc	r19, r1
    15fc:	71 f0       	breq	.+28     	; 0x161a <nrk_gpio_direction+0x50>
    15fe:	f5 c0       	rjmp	.+490    	; 0x17ea <nrk_gpio_direction+0x220>
    1600:	25 30       	cpi	r18, 0x05	; 5
    1602:	31 05       	cpc	r19, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <nrk_gpio_direction+0x3e>
    1606:	52 c0       	rjmp	.+164    	; 0x16ac <nrk_gpio_direction+0xe2>
    1608:	25 30       	cpi	r18, 0x05	; 5
    160a:	31 05       	cpc	r19, r1
    160c:	0c f4       	brge	.+2      	; 0x1610 <nrk_gpio_direction+0x46>
    160e:	3f c0       	rjmp	.+126    	; 0x168e <nrk_gpio_direction+0xc4>
    1610:	26 30       	cpi	r18, 0x06	; 6
    1612:	31 05       	cpc	r19, r1
    1614:	09 f0       	breq	.+2      	; 0x1618 <nrk_gpio_direction+0x4e>
    1616:	e9 c0       	rjmp	.+466    	; 0x17ea <nrk_gpio_direction+0x220>
    1618:	58 c0       	rjmp	.+176    	; 0x16ca <nrk_gpio_direction+0x100>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    161a:	91 b1       	in	r25, 0x01	; 1
    161c:	86 95       	lsr	r24
    161e:	86 95       	lsr	r24
    1620:	86 95       	lsr	r24
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	02 c0       	rjmp	.+4      	; 0x162c <nrk_gpio_direction+0x62>
    1628:	44 0f       	add	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <nrk_gpio_direction+0x5e>
    1630:	40 95       	com	r20
    1632:	49 23       	and	r20, r25
    1634:	41 b9       	out	0x01, r20	; 1
    1636:	d7 c0       	rjmp	.+430    	; 0x17e6 <nrk_gpio_direction+0x21c>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    1638:	94 b1       	in	r25, 0x04	; 4
    163a:	86 95       	lsr	r24
    163c:	86 95       	lsr	r24
    163e:	86 95       	lsr	r24
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <nrk_gpio_direction+0x7c>
    1642:	22 0f       	add	r18, r18
    1644:	33 1f       	adc	r19, r19
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <nrk_gpio_direction+0x78>
    164a:	20 95       	com	r18
    164c:	29 23       	and	r18, r25
    164e:	24 b9       	out	0x04, r18	; 4
    1650:	ca c0       	rjmp	.+404    	; 0x17e6 <nrk_gpio_direction+0x21c>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    1652:	97 b1       	in	r25, 0x07	; 7
    1654:	86 95       	lsr	r24
    1656:	86 95       	lsr	r24
    1658:	86 95       	lsr	r24
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <nrk_gpio_direction+0x9a>
    1660:	44 0f       	add	r20, r20
    1662:	55 1f       	adc	r21, r21
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <nrk_gpio_direction+0x96>
    1668:	40 95       	com	r20
    166a:	49 23       	and	r20, r25
    166c:	47 b9       	out	0x07, r20	; 7
    166e:	bb c0       	rjmp	.+374    	; 0x17e6 <nrk_gpio_direction+0x21c>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1670:	9a b1       	in	r25, 0x0a	; 10
    1672:	86 95       	lsr	r24
    1674:	86 95       	lsr	r24
    1676:	86 95       	lsr	r24
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <nrk_gpio_direction+0xb8>
    167e:	44 0f       	add	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <nrk_gpio_direction+0xb4>
    1686:	40 95       	com	r20
    1688:	49 23       	and	r20, r25
    168a:	4a b9       	out	0x0a, r20	; 10
    168c:	ac c0       	rjmp	.+344    	; 0x17e6 <nrk_gpio_direction+0x21c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    168e:	9d b1       	in	r25, 0x0d	; 13
    1690:	86 95       	lsr	r24
    1692:	86 95       	lsr	r24
    1694:	86 95       	lsr	r24
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <nrk_gpio_direction+0xd6>
    169c:	44 0f       	add	r20, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	8a 95       	dec	r24
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <nrk_gpio_direction+0xd2>
    16a4:	40 95       	com	r20
    16a6:	49 23       	and	r20, r25
    16a8:	4d b9       	out	0x0d, r20	; 13
    16aa:	9d c0       	rjmp	.+314    	; 0x17e6 <nrk_gpio_direction+0x21c>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    16ac:	90 b3       	in	r25, 0x10	; 16
    16ae:	86 95       	lsr	r24
    16b0:	86 95       	lsr	r24
    16b2:	86 95       	lsr	r24
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <nrk_gpio_direction+0xf4>
    16ba:	44 0f       	add	r20, r20
    16bc:	55 1f       	adc	r21, r21
    16be:	8a 95       	dec	r24
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <nrk_gpio_direction+0xf0>
    16c2:	40 95       	com	r20
    16c4:	49 23       	and	r20, r25
    16c6:	40 bb       	out	0x10, r20	; 16
    16c8:	8e c0       	rjmp	.+284    	; 0x17e6 <nrk_gpio_direction+0x21c>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    16ca:	93 b3       	in	r25, 0x13	; 19
    16cc:	86 95       	lsr	r24
    16ce:	86 95       	lsr	r24
    16d0:	86 95       	lsr	r24
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <nrk_gpio_direction+0x112>
    16d8:	44 0f       	add	r20, r20
    16da:	55 1f       	adc	r21, r21
    16dc:	8a 95       	dec	r24
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <nrk_gpio_direction+0x10e>
    16e0:	40 95       	com	r20
    16e2:	49 23       	and	r20, r25
    16e4:	43 bb       	out	0x13, r20	; 19
    16e6:	7f c0       	rjmp	.+254    	; 0x17e6 <nrk_gpio_direction+0x21c>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    16e8:	27 70       	andi	r18, 0x07	; 7
    16ea:	30 70       	andi	r19, 0x00	; 0
    16ec:	23 30       	cpi	r18, 0x03	; 3
    16ee:	31 05       	cpc	r19, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <nrk_gpio_direction+0x12a>
    16f2:	42 c0       	rjmp	.+132    	; 0x1778 <nrk_gpio_direction+0x1ae>
    16f4:	24 30       	cpi	r18, 0x04	; 4
    16f6:	31 05       	cpc	r19, r1
    16f8:	54 f4       	brge	.+20     	; 0x170e <nrk_gpio_direction+0x144>
    16fa:	21 30       	cpi	r18, 0x01	; 1
    16fc:	31 05       	cpc	r19, r1
    16fe:	11 f1       	breq	.+68     	; 0x1744 <nrk_gpio_direction+0x17a>
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	5c f5       	brge	.+86     	; 0x175c <nrk_gpio_direction+0x192>
    1706:	21 15       	cp	r18, r1
    1708:	31 05       	cpc	r19, r1
    170a:	71 f0       	breq	.+28     	; 0x1728 <nrk_gpio_direction+0x15e>
    170c:	70 c0       	rjmp	.+224    	; 0x17ee <nrk_gpio_direction+0x224>
    170e:	25 30       	cpi	r18, 0x05	; 5
    1710:	31 05       	cpc	r19, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <nrk_gpio_direction+0x14c>
    1714:	4d c0       	rjmp	.+154    	; 0x17b0 <nrk_gpio_direction+0x1e6>
    1716:	25 30       	cpi	r18, 0x05	; 5
    1718:	31 05       	cpc	r19, r1
    171a:	0c f4       	brge	.+2      	; 0x171e <nrk_gpio_direction+0x154>
    171c:	3b c0       	rjmp	.+118    	; 0x1794 <nrk_gpio_direction+0x1ca>
    171e:	26 30       	cpi	r18, 0x06	; 6
    1720:	31 05       	cpc	r19, r1
    1722:	09 f0       	breq	.+2      	; 0x1726 <nrk_gpio_direction+0x15c>
    1724:	64 c0       	rjmp	.+200    	; 0x17ee <nrk_gpio_direction+0x224>
    1726:	52 c0       	rjmp	.+164    	; 0x17cc <nrk_gpio_direction+0x202>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1728:	91 b1       	in	r25, 0x01	; 1
    172a:	86 95       	lsr	r24
    172c:	86 95       	lsr	r24
    172e:	86 95       	lsr	r24
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <nrk_gpio_direction+0x170>
    1736:	44 0f       	add	r20, r20
    1738:	55 1f       	adc	r21, r21
    173a:	8a 95       	dec	r24
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <nrk_gpio_direction+0x16c>
    173e:	94 2b       	or	r25, r20
    1740:	91 b9       	out	0x01, r25	; 1
    1742:	51 c0       	rjmp	.+162    	; 0x17e6 <nrk_gpio_direction+0x21c>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1744:	94 b1       	in	r25, 0x04	; 4
    1746:	86 95       	lsr	r24
    1748:	86 95       	lsr	r24
    174a:	86 95       	lsr	r24
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <nrk_gpio_direction+0x188>
    174e:	22 0f       	add	r18, r18
    1750:	33 1f       	adc	r19, r19
    1752:	8a 95       	dec	r24
    1754:	e2 f7       	brpl	.-8      	; 0x174e <nrk_gpio_direction+0x184>
    1756:	92 2b       	or	r25, r18
    1758:	94 b9       	out	0x04, r25	; 4
    175a:	45 c0       	rjmp	.+138    	; 0x17e6 <nrk_gpio_direction+0x21c>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    175c:	97 b1       	in	r25, 0x07	; 7
    175e:	86 95       	lsr	r24
    1760:	86 95       	lsr	r24
    1762:	86 95       	lsr	r24
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	02 c0       	rjmp	.+4      	; 0x176e <nrk_gpio_direction+0x1a4>
    176a:	44 0f       	add	r20, r20
    176c:	55 1f       	adc	r21, r21
    176e:	8a 95       	dec	r24
    1770:	e2 f7       	brpl	.-8      	; 0x176a <nrk_gpio_direction+0x1a0>
    1772:	94 2b       	or	r25, r20
    1774:	97 b9       	out	0x07, r25	; 7
    1776:	37 c0       	rjmp	.+110    	; 0x17e6 <nrk_gpio_direction+0x21c>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1778:	9a b1       	in	r25, 0x0a	; 10
    177a:	86 95       	lsr	r24
    177c:	86 95       	lsr	r24
    177e:	86 95       	lsr	r24
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	02 c0       	rjmp	.+4      	; 0x178a <nrk_gpio_direction+0x1c0>
    1786:	44 0f       	add	r20, r20
    1788:	55 1f       	adc	r21, r21
    178a:	8a 95       	dec	r24
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <nrk_gpio_direction+0x1bc>
    178e:	94 2b       	or	r25, r20
    1790:	9a b9       	out	0x0a, r25	; 10
    1792:	29 c0       	rjmp	.+82     	; 0x17e6 <nrk_gpio_direction+0x21c>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1794:	9d b1       	in	r25, 0x0d	; 13
    1796:	86 95       	lsr	r24
    1798:	86 95       	lsr	r24
    179a:	86 95       	lsr	r24
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <nrk_gpio_direction+0x1dc>
    17a2:	44 0f       	add	r20, r20
    17a4:	55 1f       	adc	r21, r21
    17a6:	8a 95       	dec	r24
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <nrk_gpio_direction+0x1d8>
    17aa:	94 2b       	or	r25, r20
    17ac:	9d b9       	out	0x0d, r25	; 13
    17ae:	1b c0       	rjmp	.+54     	; 0x17e6 <nrk_gpio_direction+0x21c>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    17b0:	90 b3       	in	r25, 0x10	; 16
    17b2:	86 95       	lsr	r24
    17b4:	86 95       	lsr	r24
    17b6:	86 95       	lsr	r24
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <nrk_gpio_direction+0x1f8>
    17be:	44 0f       	add	r20, r20
    17c0:	55 1f       	adc	r21, r21
    17c2:	8a 95       	dec	r24
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <nrk_gpio_direction+0x1f4>
    17c6:	94 2b       	or	r25, r20
    17c8:	90 bb       	out	0x10, r25	; 16
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <nrk_gpio_direction+0x21c>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    17cc:	93 b3       	in	r25, 0x13	; 19
    17ce:	86 95       	lsr	r24
    17d0:	86 95       	lsr	r24
    17d2:	86 95       	lsr	r24
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <nrk_gpio_direction+0x214>
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	8a 95       	dec	r24
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <nrk_gpio_direction+0x210>
    17e2:	94 2b       	or	r25, r20
    17e4:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    17e8:	08 95       	ret
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	08 95       	ret
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
                        default: return -1;
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    17f0:	08 95       	ret

000017f2 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    17f2:	88 23       	and	r24, r24
    17f4:	29 f4       	brne	.+10     	; 0x1800 <nrk_get_button+0xe>
	 return( !(PINA & BM(BUTTON))); 
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	01 9b       	sbis	0x00, 1	; 0
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <nrk_get_button+0x10>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	08 95       	ret
	} 
return -1;
    1800:	8f ef       	ldi	r24, 0xFF	; 255
}
    1802:	08 95       	ret

00001804 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	11 f4       	brne	.+4      	; 0x180c <nrk_led_toggle+0x8>
    1808:	83 e2       	ldi	r24, 0x23	; 35
    180a:	0e c0       	rjmp	.+28     	; 0x1828 <nrk_led_toggle+0x24>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	91 05       	cpc	r25, r1
    1810:	11 f4       	brne	.+4      	; 0x1816 <nrk_led_toggle+0x12>
    1812:	8b e2       	ldi	r24, 0x2B	; 43
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <nrk_led_toggle+0x24>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	91 05       	cpc	r25, r1
    181a:	11 f4       	brne	.+4      	; 0x1820 <nrk_led_toggle+0x1c>
    181c:	83 e3       	ldi	r24, 0x33	; 51
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <nrk_led_toggle+0x24>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1820:	83 30       	cpi	r24, 0x03	; 3
    1822:	91 05       	cpc	r25, r1
    1824:	29 f4       	brne	.+10     	; 0x1830 <nrk_led_toggle+0x2c>
    1826:	8b e3       	ldi	r24, 0x3B	; 59
    1828:	0e 94 bb 09 	call	0x1376	; 0x1376 <nrk_gpio_toggle>
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	08 95       	ret
return -1;
    1830:	8f ef       	ldi	r24, 0xFF	; 255
}
    1832:	08 95       	ret

00001834 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	11 f4       	brne	.+4      	; 0x183c <nrk_led_clr+0x8>
    1838:	83 e2       	ldi	r24, 0x23	; 35
    183a:	0e c0       	rjmp	.+28     	; 0x1858 <nrk_led_clr+0x24>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	11 f4       	brne	.+4      	; 0x1846 <nrk_led_clr+0x12>
    1842:	8b e2       	ldi	r24, 0x2B	; 43
    1844:	09 c0       	rjmp	.+18     	; 0x1858 <nrk_led_clr+0x24>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	91 05       	cpc	r25, r1
    184a:	11 f4       	brne	.+4      	; 0x1850 <nrk_led_clr+0x1c>
    184c:	83 e3       	ldi	r24, 0x33	; 51
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <nrk_led_clr+0x24>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	91 05       	cpc	r25, r1
    1854:	29 f4       	brne	.+10     	; 0x1860 <nrk_led_clr+0x2c>
    1856:	8b e3       	ldi	r24, 0x3B	; 59
    1858:	0e 94 74 08 	call	0x10e8	; 0x10e8 <nrk_gpio_set>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	08 95       	ret
return -1;
    1860:	8f ef       	ldi	r24, 0xFF	; 255
}
    1862:	08 95       	ret

00001864 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	11 f4       	brne	.+4      	; 0x186c <nrk_led_set+0x8>
    1868:	83 e2       	ldi	r24, 0x23	; 35
    186a:	0e c0       	rjmp	.+28     	; 0x1888 <nrk_led_set+0x24>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	91 05       	cpc	r25, r1
    1870:	11 f4       	brne	.+4      	; 0x1876 <nrk_led_set+0x12>
    1872:	8b e2       	ldi	r24, 0x2B	; 43
    1874:	09 c0       	rjmp	.+18     	; 0x1888 <nrk_led_set+0x24>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	91 05       	cpc	r25, r1
    187a:	11 f4       	brne	.+4      	; 0x1880 <nrk_led_set+0x1c>
    187c:	83 e3       	ldi	r24, 0x33	; 51
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <nrk_led_set+0x24>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	91 05       	cpc	r25, r1
    1884:	29 f4       	brne	.+10     	; 0x1890 <nrk_led_set+0x2c>
    1886:	8b e3       	ldi	r24, 0x3B	; 59
    1888:	0e 94 fe 08 	call	0x11fc	; 0x11fc <nrk_gpio_clr>
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	08 95       	ret
return -1;
    1890:	8f ef       	ldi	r24, 0xFF	; 255
}
    1892:	08 95       	ret

00001894 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1894:	88 23       	and	r24, r24
    1896:	19 f0       	breq	.+6      	; 0x189e <nrk_gpio_pullups+0xa>
    1898:	85 b7       	in	r24, 0x35	; 53
    189a:	8f 7e       	andi	r24, 0xEF	; 239
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    189e:	85 b7       	in	r24, 0x35	; 53
    18a0:	80 61       	ori	r24, 0x10	; 16
    18a2:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	08 95       	ret

000018a8 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    18a8:	90 91 c8 00 	lds	r25, 0x00C8
    18ac:	95 ff       	sbrs	r25, 5
    18ae:	fc cf       	rjmp	.-8      	; 0x18a8 <putc1>
    18b0:	80 93 ce 00 	sts	0x00CE, r24
}
    18b4:	08 95       	ret

000018b6 <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    18b6:	90 93 c5 00 	sts	0x00C5, r25
    18ba:	80 93 c4 00 	sts	0x00C4, r24
    18be:	86 e0       	ldi	r24, 0x06	; 6
    18c0:	80 93 c2 00 	sts	0x00C2, r24
    18c4:	e1 ec       	ldi	r30, 0xC1	; 193
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8b 7f       	andi	r24, 0xFB	; 251
    18cc:	80 83       	st	Z, r24
    18ce:	a0 ec       	ldi	r26, 0xC0	; 192
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	8c 91       	ld	r24, X
    18d4:	82 60       	ori	r24, 0x02	; 2
    18d6:	8c 93       	st	X, r24
ENABLE_UART0();
    18d8:	80 81       	ld	r24, Z
    18da:	88 61       	ori	r24, 0x18	; 24
    18dc:	80 83       	st	Z, r24
}
    18de:	08 95       	ret

000018e0 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    18e0:	90 93 cd 00 	sts	0x00CD, r25
    18e4:	80 93 cc 00 	sts	0x00CC, r24
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	80 93 ca 00 	sts	0x00CA, r24
    18ee:	e9 ec       	ldi	r30, 0xC9	; 201
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8b 7f       	andi	r24, 0xFB	; 251
    18f6:	80 83       	st	Z, r24
    18f8:	a8 ec       	ldi	r26, 0xC8	; 200
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	8c 91       	ld	r24, X
    18fe:	82 60       	ori	r24, 0x02	; 2
    1900:	8c 93       	st	X, r24
ENABLE_UART1();
    1902:	80 81       	ld	r24, Z
    1904:	88 61       	ori	r24, 0x18	; 24
    1906:	80 83       	st	Z, r24
}
    1908:	08 95       	ret

0000190a <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1912:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1916:	c7 e3       	ldi	r28, 0x37	; 55
    1918:	d8 e0       	ldi	r29, 0x08	; 8
    191a:	0b e2       	ldi	r16, 0x2B	; 43
    191c:	18 e0       	ldi	r17, 0x08	; 8
    191e:	ce 01       	movw	r24, r28
    1920:	b8 01       	movw	r22, r16
    1922:	0e 94 a5 2b 	call	0x574a	; 0x574a <fdevopen>
    1926:	90 93 61 07 	sts	0x0761, r25
    192a:	80 93 60 07 	sts	0x0760, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    192e:	ce 01       	movw	r24, r28
    1930:	b8 01       	movw	r22, r16
    1932:	0e 94 a5 2b 	call	0x574a	; 0x574a <fdevopen>
    1936:	90 93 5f 07 	sts	0x075F, r25
    193a:	80 93 5e 07 	sts	0x075E, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	08 95       	ret

00001948 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    1948:	80 91 c8 00 	lds	r24, 0x00C8
    194c:	87 ff       	sbrs	r24, 7
    194e:	fc cf       	rjmp	.-8      	; 0x1948 <getc1>
    1950:	80 91 c8 00 	lds	r24, 0x00C8
    1954:	8f 77       	andi	r24, 0x7F	; 127
    1956:	80 93 c8 00 	sts	0x00C8, r24
    195a:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    195e:	08 95       	ret

00001960 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	d1 f7       	brne	.-12     	; 0x1960 <halWait>

} // halWait
    196c:	08 95       	ret

0000196e <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    196e:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
return v;
}
    1972:	08 95       	ret

00001974 <nrk_eeprom_write_byte>:

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    1974:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__eewr_byte_m128rfa1>
}
    1978:	08 95       	ret

0000197a <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    1986:	e8 2e       	mov	r14, r24
    1988:	e7 01       	movw	r28, r14
    198a:	7e 01       	movw	r14, r28
    198c:	f9 2e       	mov	r15, r25
    198e:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
    1998:	08 2f       	mov	r16, r24
    199a:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
    19a4:	e8 2e       	mov	r14, r24
    19a6:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
    19b0:	f8 2e       	mov	r15, r24
    19b2:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
    19bc:	18 2f       	mov	r17, r24
    19be:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    19c0:	84 e0       	ldi	r24, 0x04	; 4
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    19c8:	fe 0c       	add	r15, r14
ct+=buf[2];
    19ca:	f0 0e       	add	r15, r16
ct+=buf[3];
    19cc:	f1 0e       	add	r15, r17
if(checksum==ct) return NRK_OK;
    19ce:	8f 15       	cp	r24, r15
    19d0:	11 f4       	brne	.+4      	; 0x19d6 <read_eeprom_mac_address+0x5c>
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <read_eeprom_mac_address+0x5e>

return NRK_ERROR;
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	08 95       	ret

000019e6 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    19ec:	85 e0       	ldi	r24, 0x05	; 5
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
    19f4:	88 83       	st	Y, r24
return NRK_OK;
}
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    19fe:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1a00:	86 e0       	ldi	r24, 0x06	; 6
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	60 81       	ld	r22, Z
    1a06:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	08 95       	ret

00001a0e <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1a14:	86 e0       	ldi	r24, 0x06	; 6
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
    1a1c:	88 83       	st	Y, r24
  return NRK_OK;
}
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	08 2f       	mov	r16, r24
    1a30:	19 2f       	mov	r17, r25
    1a32:	c8 e0       	ldi	r28, 0x08	; 8
    1a34:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1a36:	ce 01       	movw	r24, r28
    1a38:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	81 93       	st	Z+, r24
    1a40:	8f 01       	movw	r16, r30
    1a42:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1a44:	c8 31       	cpi	r28, 0x18	; 24
    1a46:	d1 05       	cpc	r29, r1
    1a48:	b1 f7       	brne	.-20     	; 0x1a36 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	08 95       	ret

00001a56 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	08 2f       	mov	r16, r24
    1a60:	19 2f       	mov	r17, r25
    1a62:	c8 e0       	ldi	r28, 0x08	; 8
    1a64:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    1a66:	f8 01       	movw	r30, r16
    1a68:	61 91       	ld	r22, Z+
    1a6a:	8f 01       	movw	r16, r30
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__eewr_byte_m128rfa1>
    1a72:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1a74:	c8 31       	cpi	r28, 0x18	; 24
    1a76:	d1 05       	cpc	r29, r1
    1a78:	b1 f7       	brne	.-20     	; 0x1a66 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    1a8c:	87 e0       	ldi	r24, 0x07	; 7
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <__eerd_byte_m128rfa1>
    1a94:	88 83       	st	Y, r24
  return NRK_OK;
}
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    1a9e:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    1aa0:	87 e0       	ldi	r24, 0x07	; 7
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	60 81       	ld	r22, Z
    1aa6:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	08 95       	ret

00001aae <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    1aae:	f8 94       	cli
};
    1ab0:	08 95       	ret

00001ab2 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    1ab2:	78 94       	sei
};
    1ab4:	08 95       	ret

00001ab6 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    1ab6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    1aba:	ff cf       	rjmp	.-2      	; 0x1aba <nrk_halt+0x4>

00001abc <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	a3 97       	sbiw	r28, 0x23	; 35
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1ad4:	0e 94 a9 12 	call	0x2552	; 0x2552 <nrk_signal_create>
    1ad8:	80 93 29 07 	sts	0x0729, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1adc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ade:	21 f4       	brne	.+8      	; 0x1ae8 <nrk_init+0x2c>
    1ae0:	8e e0       	ldi	r24, 0x0E	; 14
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1ae8:	0e 94 9e 20 	call	0x413c	; 0x413c <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1aec:	80 ff       	sbrs	r24, 0
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <nrk_init+0x3c>
    1af0:	86 e0       	ldi	r24, 0x06	; 6
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1af8:	10 92 2c 07 	sts	0x072C, r1
    nrk_cur_task_TCB = NULL;
    1afc:	10 92 3a 07 	sts	0x073A, r1
    1b00:	10 92 39 07 	sts	0x0739, r1
    
    nrk_high_ready_TCB = NULL;
    1b04:	10 92 2b 07 	sts	0x072B, r1
    1b08:	10 92 2a 07 	sts	0x072A, r1
    nrk_high_ready_prio = 0; 
    1b0c:	10 92 3b 07 	sts	0x073B, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1b10:	10 92 38 07 	sts	0x0738, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	80 93 25 07 	sts	0x0725, r24
    nrk_sem_list[i].value=-1;
    1b1a:	80 93 27 07 	sts	0x0727, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1b1e:	80 93 26 07 	sts	0x0726, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1b22:	93 e6       	ldi	r25, 0x63	; 99
    1b24:	90 93 81 06 	sts	0x0681, r25
        nrk_task_TCB[i].task_ID = -1; 
    1b28:	80 93 7f 06 	sts	0x067F, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1b2c:	90 93 ac 06 	sts	0x06AC, r25
        nrk_task_TCB[i].task_ID = -1; 
    1b30:	80 93 aa 06 	sts	0x06AA, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1b34:	90 93 d7 06 	sts	0x06D7, r25
        nrk_task_TCB[i].task_ID = -1; 
    1b38:	80 93 d5 06 	sts	0x06D5, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1b3c:	90 93 02 07 	sts	0x0702, r25
        nrk_task_TCB[i].task_ID = -1; 
    1b40:	80 93 00 07 	sts	0x0700, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1b44:	81 e4       	ldi	r24, 0x41	; 65
    1b46:	97 e0       	ldi	r25, 0x07	; 7
    1b48:	90 93 40 07 	sts	0x0740, r25
    1b4c:	80 93 3f 07 	sts	0x073F, r24
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1b50:	fc 01       	movw	r30, r24
    1b52:	35 97       	sbiw	r30, 0x05	; 5
    1b54:	f0 93 43 07 	sts	0x0743, r31
    1b58:	e0 93 42 07 	sts	0x0742, r30
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1b5c:	9f 01       	movw	r18, r30
    1b5e:	26 5f       	subi	r18, 0xF6	; 246
    1b60:	3f 4f       	sbci	r19, 0xFF	; 255
    1b62:	31 87       	std	Z+9, r19	; 0x09
    1b64:	20 87       	std	Z+8, r18	; 0x08
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1b66:	94 87       	std	Z+12, r25	; 0x0c
    1b68:	83 87       	std	Z+11, r24	; 0x0b
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1b6a:	cf 01       	movw	r24, r30
    1b6c:	0f 96       	adiw	r24, 0x0f	; 15
    1b6e:	96 87       	std	Z+14, r25	; 0x0e
    1b70:	85 87       	std	Z+13, r24	; 0x0d
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1b72:	31 8b       	std	Z+17, r19	; 0x11
    1b74:	20 8b       	std	Z+16, r18	; 0x10
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1b76:	9f 01       	movw	r18, r30
    1b78:	2c 5e       	subi	r18, 0xEC	; 236
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	33 8b       	std	Z+19, r19	; 0x13
    1b7e:	22 8b       	std	Z+18, r18	; 0x12
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1b80:	96 8b       	std	Z+22, r25	; 0x16
    1b82:	85 8b       	std	Z+21, r24	; 0x15
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1b84:	12 82       	std	Z+2, r1	; 0x02
    1b86:	11 82       	std	Z+1, r1	; 0x01
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1b88:	10 8e       	std	Z+24, r1	; 0x18
    1b8a:	17 8a       	std	Z+23, r1	; 0x17
	_head_node = NULL;
    1b8c:	10 92 2f 07 	sts	0x072F, r1
    1b90:	10 92 2e 07 	sts	0x072E, r1
	_free_node = &_nrk_readyQ[0];
    1b94:	f0 93 76 06 	sts	0x0676, r31
    1b98:	e0 93 75 06 	sts	0x0675, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1b9c:	8e 01       	movw	r16, r28
    1b9e:	0f 5f       	subi	r16, 0xFF	; 255
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	65 ed       	ldi	r22, 0xD5	; 213
    1ba6:	7b e1       	ldi	r23, 0x1B	; 27
    1ba8:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1bac:	c8 01       	movw	r24, r16
    1bae:	6d ee       	ldi	r22, 0xED	; 237
    1bb0:	75 e0       	ldi	r23, 0x05	; 5
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	0e 94 dd 22 	call	0x45ba	; 0x45ba <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1bba:	85 e5       	ldi	r24, 0x55	; 85
    1bbc:	80 93 ed 05 	sts	0x05ED, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1bc0:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1bc2:	1c 86       	std	Y+12, r1	; 0x0c
    1bc4:	1d 86       	std	Y+13, r1	; 0x0d
    1bc6:	1e 86       	std	Y+14, r1	; 0x0e
    1bc8:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1bca:	18 8a       	std	Y+16, r1	; 0x10
    1bcc:	19 8a       	std	Y+17, r1	; 0x11
    1bce:	1a 8a       	std	Y+18, r1	; 0x12
    1bd0:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1bd2:	1c 8a       	std	Y+20, r1	; 0x14
    1bd4:	1d 8a       	std	Y+21, r1	; 0x15
    1bd6:	1e 8a       	std	Y+22, r1	; 0x16
    1bd8:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1bda:	18 8e       	std	Y+24, r1	; 0x18
    1bdc:	19 8e       	std	Y+25, r1	; 0x19
    1bde:	1a 8e       	std	Y+26, r1	; 0x1a
    1be0:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1be2:	1c 8e       	std	Y+28, r1	; 0x1c
    1be4:	1d 8e       	std	Y+29, r1	; 0x1d
    1be6:	1e 8e       	std	Y+30, r1	; 0x1e
    1be8:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1bea:	18 a2       	std	Y+32, r1	; 0x20
    1bec:	19 a2       	std	Y+33, r1	; 0x21
    1bee:	1a a2       	std	Y+34, r1	; 0x22
    1bf0:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1bf6:	92 e0       	ldi	r25, 0x02	; 2
    1bf8:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1bfa:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <nrk_activate_task>
	
}
    1c02:	a3 96       	adiw	r28, 0x23	; 35
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <nrk_start>:




void nrk_start (void)
{
    1c18:	cf 92       	push	r12
    1c1a:	df 92       	push	r13
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <nrk_start+0x10>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    1c2c:	8f e7       	ldi	r24, 0x7F	; 127
    1c2e:	c8 2e       	mov	r12, r24
    1c30:	86 e0       	ldi	r24, 0x06	; 6
    1c32:	d8 2e       	mov	r13, r24
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1c36:	f6 01       	movw	r30, r12
    1c38:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    1c3a:	ff 2d       	mov	r31, r15
    1c3c:	ff 3f       	cpi	r31, 0xFF	; 255
    1c3e:	b1 f0       	breq	.+44     	; 0x1c6c <nrk_start+0x54>
    1c40:	0f e7       	ldi	r16, 0x7F	; 127
    1c42:	16 e0       	ldi	r17, 0x06	; 6
    1c44:	20 e0       	ldi	r18, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1c46:	92 17       	cp	r25, r18
    1c48:	61 f0       	breq	.+24     	; 0x1c62 <nrk_start+0x4a>
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	80 81       	ld	r24, Z
    1c4e:	f8 16       	cp	r15, r24
    1c50:	41 f4       	brne	.+16     	; 0x1c62 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1c52:	85 e0       	ldi	r24, 0x05	; 5
    1c54:	6f 2d       	mov	r22, r15
    1c56:	29 83       	std	Y+1, r18	; 0x01
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	29 81       	ldd	r18, Y+1	; 0x01
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1c62:	2f 5f       	subi	r18, 0xFF	; 255
    1c64:	05 5d       	subi	r16, 0xD5	; 213
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	24 30       	cpi	r18, 0x04	; 4
    1c6a:	69 f7       	brne	.-38     	; 0x1c46 <nrk_start+0x2e>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1c6c:	9f 5f       	subi	r25, 0xFF	; 255
    1c6e:	2b e2       	ldi	r18, 0x2B	; 43
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	c2 0e       	add	r12, r18
    1c74:	d3 1e       	adc	r13, r19
    1c76:	94 30       	cpi	r25, 0x04	; 4
    1c78:	f1 f6       	brne	.-68     	; 0x1c36 <nrk_start+0x1e>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1c7a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1c7e:	99 27       	eor	r25, r25
    1c80:	87 fd       	sbrc	r24, 7
    1c82:	90 95       	com	r25
    1c84:	2b e2       	ldi	r18, 0x2B	; 43
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	82 9f       	mul	r24, r18
    1c8a:	f0 01       	movw	r30, r0
    1c8c:	83 9f       	mul	r24, r19
    1c8e:	f0 0d       	add	r31, r0
    1c90:	92 9f       	mul	r25, r18
    1c92:	f0 0d       	add	r31, r0
    1c94:	11 24       	eor	r1, r1
    1c96:	e9 58       	subi	r30, 0x89	; 137
    1c98:	f9 4f       	sbci	r31, 0xF9	; 249
    1c9a:	82 85       	ldd	r24, Z+10	; 0x0a
    1c9c:	80 93 3b 07 	sts	0x073B, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1ca0:	f0 93 3a 07 	sts	0x073A, r31
    1ca4:	e0 93 39 07 	sts	0x0739, r30
    1ca8:	f0 93 2b 07 	sts	0x072B, r31
    1cac:	e0 93 2a 07 	sts	0x072A, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1cb0:	80 93 2c 07 	sts	0x072C, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1cb4:	0e 94 3d 23 	call	0x467a	; 0x467a <nrk_target_start>
    nrk_stack_pointer_init(); 
    1cb8:	0e 94 27 23 	call	0x464e	; 0x464e <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1cbc:	0e 94 42 23 	call	0x4684	; 0x4684 <nrk_start_high_ready_task>
    1cc0:	ff cf       	rjmp	.-2      	; 0x1cc0 <nrk_start+0xa8>

00001cc2 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1cc2:	cf 92       	push	r12
    1cc4:	df 92       	push	r13
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	ec 01       	movw	r28, r24
    1cd4:	8b 01       	movw	r16, r22
    1cd6:	6a 01       	movw	r12, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	21 f0       	breq	.+8      	; 0x1ce6 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    1cde:	80 91 28 07 	lds	r24, 0x0728
    1ce2:	88 83       	st	Y, r24
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1ce6:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1ce8:	80 91 28 07 	lds	r24, 0x0728
    1cec:	84 30       	cpi	r24, 0x04	; 4
    1cee:	20 f0       	brcs	.+8      	; 0x1cf8 <nrk_TCB_init+0x36>
    1cf0:	87 e0       	ldi	r24, 0x07	; 7
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	29 f0       	breq	.+10     	; 0x1d08 <nrk_TCB_init+0x46>
    1cfe:	80 91 28 07 	lds	r24, 0x0728
    1d02:	8f 5f       	subi	r24, 0xFF	; 255
    1d04:	80 93 28 07 	sts	0x0728, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1d08:	80 91 28 07 	lds	r24, 0x0728
    1d0c:	88 23       	and	r24, r24
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <nrk_TCB_init+0x54>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	80 93 28 07 	sts	0x0728, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1d16:	28 81       	ld	r18, Y
    1d18:	33 27       	eor	r19, r19
    1d1a:	27 fd       	sbrc	r18, 7
    1d1c:	30 95       	com	r19
    1d1e:	8b e2       	ldi	r24, 0x2B	; 43
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	28 9f       	mul	r18, r24
    1d24:	f0 01       	movw	r30, r0
    1d26:	29 9f       	mul	r18, r25
    1d28:	f0 0d       	add	r31, r0
    1d2a:	38 9f       	mul	r19, r24
    1d2c:	f0 0d       	add	r31, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	e9 58       	subi	r30, 0x89	; 137
    1d32:	f9 4f       	sbci	r31, 0xF9	; 249
    1d34:	11 83       	std	Z+1, r17	; 0x01
    1d36:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1d38:	28 85       	ldd	r18, Y+8	; 0x08
    1d3a:	22 87       	std	Z+10, r18	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1d3c:	28 81       	ld	r18, Y
    1d3e:	33 27       	eor	r19, r19
    1d40:	27 fd       	sbrc	r18, 7
    1d42:	30 95       	com	r19
    1d44:	28 9f       	mul	r18, r24
    1d46:	f0 01       	movw	r30, r0
    1d48:	29 9f       	mul	r18, r25
    1d4a:	f0 0d       	add	r31, r0
    1d4c:	38 9f       	mul	r19, r24
    1d4e:	f0 0d       	add	r31, r0
    1d50:	11 24       	eor	r1, r1
    1d52:	e9 58       	subi	r30, 0x89	; 137
    1d54:	f9 4f       	sbci	r31, 0xF9	; 249
    1d56:	23 e0       	ldi	r18, 0x03	; 3
    1d58:	21 87       	std	Z+9, r18	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1d5a:	48 81       	ld	r20, Y
    1d5c:	24 2f       	mov	r18, r20
    1d5e:	33 27       	eor	r19, r19
    1d60:	27 fd       	sbrc	r18, 7
    1d62:	30 95       	com	r19
    1d64:	28 9f       	mul	r18, r24
    1d66:	f0 01       	movw	r30, r0
    1d68:	29 9f       	mul	r18, r25
    1d6a:	f0 0d       	add	r31, r0
    1d6c:	38 9f       	mul	r19, r24
    1d6e:	f0 0d       	add	r31, r0
    1d70:	11 24       	eor	r1, r1
    1d72:	e9 58       	subi	r30, 0x89	; 137
    1d74:	f9 4f       	sbci	r31, 0xF9	; 249
    1d76:	40 87       	std	Z+8, r20	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1d78:	28 81       	ld	r18, Y
    1d7a:	33 27       	eor	r19, r19
    1d7c:	27 fd       	sbrc	r18, 7
    1d7e:	30 95       	com	r19
    1d80:	28 9f       	mul	r18, r24
    1d82:	80 01       	movw	r16, r0
    1d84:	29 9f       	mul	r18, r25
    1d86:	10 0d       	add	r17, r0
    1d88:	38 9f       	mul	r19, r24
    1d8a:	10 0d       	add	r17, r0
    1d8c:	11 24       	eor	r1, r1
    1d8e:	09 58       	subi	r16, 0x89	; 137
    1d90:	19 4f       	sbci	r17, 0xF9	; 249
    1d92:	f8 01       	movw	r30, r16
    1d94:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1d96:	ce 01       	movw	r24, r28
    1d98:	0b 96       	adiw	r24, 0x0b	; 11
    1d9a:	0e 94 4e 1b 	call	0x369c	; 0x369c <_nrk_time_to_ticks_long>
    1d9e:	f8 01       	movw	r30, r16
    1da0:	61 a3       	std	Z+33, r22	; 0x21
    1da2:	72 a3       	std	Z+34, r23	; 0x22
    1da4:	83 a3       	std	Z+35, r24	; 0x23
    1da6:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1da8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1daa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dac:	ad 85       	ldd	r26, Y+13	; 0x0d
    1dae:	be 85       	ldd	r27, Y+14	; 0x0e
    1db0:	88 33       	cpi	r24, 0x38	; 56
    1db2:	f9 e8       	ldi	r31, 0x89	; 137
    1db4:	9f 07       	cpc	r25, r31
    1db6:	f1 e4       	ldi	r31, 0x41	; 65
    1db8:	af 07       	cpc	r26, r31
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	bf 07       	cpc	r27, r31
    1dbe:	20 f0       	brcs	.+8      	; 0x1dc8 <nrk_TCB_init+0x106>
    1dc0:	86 e1       	ldi	r24, 0x16	; 22
    1dc2:	68 81       	ld	r22, Y
    1dc4:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1dc8:	08 81       	ld	r16, Y
    1dca:	11 27       	eor	r17, r17
    1dcc:	07 fd       	sbrc	r16, 7
    1dce:	10 95       	com	r17
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	4b 96       	adiw	r24, 0x1b	; 27
    1dd4:	0e 94 4e 1b 	call	0x369c	; 0x369c <_nrk_time_to_ticks_long>
    1dd8:	2b e2       	ldi	r18, 0x2B	; 43
    1dda:	e2 2e       	mov	r14, r18
    1ddc:	f1 2c       	mov	r15, r1
    1dde:	0e 9d       	mul	r16, r14
    1de0:	f0 01       	movw	r30, r0
    1de2:	0f 9d       	mul	r16, r15
    1de4:	f0 0d       	add	r31, r0
    1de6:	1e 9d       	mul	r17, r14
    1de8:	f0 0d       	add	r31, r0
    1dea:	11 24       	eor	r1, r1
    1dec:	e9 58       	subi	r30, 0x89	; 137
    1dee:	f9 4f       	sbci	r31, 0xF9	; 249
    1df0:	65 8b       	std	Z+21, r22	; 0x15
    1df2:	76 8b       	std	Z+22, r23	; 0x16
    1df4:	87 8b       	std	Z+23, r24	; 0x17
    1df6:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1df8:	88 81       	ld	r24, Y
    1dfa:	99 27       	eor	r25, r25
    1dfc:	87 fd       	sbrc	r24, 7
    1dfe:	90 95       	com	r25
    1e00:	8e 9d       	mul	r24, r14
    1e02:	80 01       	movw	r16, r0
    1e04:	8f 9d       	mul	r24, r15
    1e06:	10 0d       	add	r17, r0
    1e08:	9e 9d       	mul	r25, r14
    1e0a:	10 0d       	add	r17, r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	09 58       	subi	r16, 0x89	; 137
    1e10:	19 4f       	sbci	r17, 0xF9	; 249
    1e12:	f8 01       	movw	r30, r16
    1e14:	85 89       	ldd	r24, Z+21	; 0x15
    1e16:	96 89       	ldd	r25, Z+22	; 0x16
    1e18:	a7 89       	ldd	r26, Z+23	; 0x17
    1e1a:	b0 8d       	ldd	r27, Z+24	; 0x18
    1e1c:	21 a1       	ldd	r18, Z+33	; 0x21
    1e1e:	32 a1       	ldd	r19, Z+34	; 0x22
    1e20:	43 a1       	ldd	r20, Z+35	; 0x23
    1e22:	54 a1       	ldd	r21, Z+36	; 0x24
    1e24:	82 0f       	add	r24, r18
    1e26:	93 1f       	adc	r25, r19
    1e28:	a4 1f       	adc	r26, r20
    1e2a:	b5 1f       	adc	r27, r21
    1e2c:	81 8f       	std	Z+25, r24	; 0x19
    1e2e:	92 8f       	std	Z+26, r25	; 0x1a
    1e30:	a3 8f       	std	Z+27, r26	; 0x1b
    1e32:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1e34:	ce 01       	movw	r24, r28
    1e36:	43 96       	adiw	r24, 0x13	; 19
    1e38:	0e 94 4e 1b 	call	0x369c	; 0x369c <_nrk_time_to_ticks_long>
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	65 a3       	std	Z+37, r22	; 0x25
    1e40:	76 a3       	std	Z+38, r23	; 0x26
    1e42:	87 a3       	std	Z+39, r24	; 0x27
    1e44:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1e46:	88 81       	ld	r24, Y
    1e48:	99 27       	eor	r25, r25
    1e4a:	87 fd       	sbrc	r24, 7
    1e4c:	90 95       	com	r25
    1e4e:	8e 9d       	mul	r24, r14
    1e50:	f0 01       	movw	r30, r0
    1e52:	8f 9d       	mul	r24, r15
    1e54:	f0 0d       	add	r31, r0
    1e56:	9e 9d       	mul	r25, r14
    1e58:	f0 0d       	add	r31, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	e9 58       	subi	r30, 0x89	; 137
    1e5e:	f9 4f       	sbci	r31, 0xF9	; 249
    1e60:	85 a1       	ldd	r24, Z+37	; 0x25
    1e62:	96 a1       	ldd	r25, Z+38	; 0x26
    1e64:	a7 a1       	ldd	r26, Z+39	; 0x27
    1e66:	b0 a5       	ldd	r27, Z+40	; 0x28
    1e68:	85 8f       	std	Z+29, r24	; 0x1d
    1e6a:	96 8f       	std	Z+30, r25	; 0x1e
    1e6c:	a7 8f       	std	Z+31, r26	; 0x1f
    1e6e:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	92 a7       	std	Z+42, r25	; 0x2a
    1e76:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1e78:	d3 82       	std	Z+3, r13	; 0x03
    1e7a:	c2 82       	std	Z+2, r12	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	ef 90       	pop	r14
    1e8c:	df 90       	pop	r13
    1e8e:	cf 90       	pop	r12
    1e90:	08 95       	ret

00001e92 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1e92:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <_nrk_scheduler>

  	return;
}
    1e96:	08 95       	ret

00001e98 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1e98:	85 e6       	ldi	r24, 0x65	; 101
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	08 95       	ret

00001e9e <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    1e9e:	e0 91 39 07 	lds	r30, 0x0739
    1ea2:	f0 91 3a 07 	lds	r31, 0x073A
    1ea6:	84 87       	std	Z+12, r24	; 0x0c
}
    1ea8:	08 95       	ret

00001eaa <nrk_errno_get>:

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1eaa:	e0 91 39 07 	lds	r30, 0x0739
    1eae:	f0 91 3a 07 	lds	r31, 0x073A
}
    1eb2:	84 85       	ldd	r24, Z+12	; 0x0c
    1eb4:	08 95       	ret

00001eb6 <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    1eb6:	20 91 eb 05 	lds	r18, 0x05EB
    1eba:	22 23       	and	r18, r18
    1ebc:	41 f0       	breq	.+16     	; 0x1ece <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	20 83       	st	Z, r18
    *task_id = error_task;
    1ec2:	20 91 a2 05 	lds	r18, 0x05A2
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 83       	st	Z, r18
    return 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    1ed0:	08 95       	ret

00001ed2 <pause>:
    }

}

void pause()
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1edc:	19 82       	std	Y+1, r1	; 0x01
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <pause+0x1c>
        nrk_spin_wait_us (2000);
    1ee0:	80 ed       	ldi	r24, 0xD0	; 208
    1ee2:	97 e0       	ldi	r25, 0x07	; 7
    1ee4:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	84 36       	cpi	r24, 0x64	; 100
    1ef2:	b0 f3       	brcs	.-20     	; 0x1ee0 <pause+0xe>
        nrk_spin_wait_us (2000);
}
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <blink_dot>:
    pause();
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
    pause();
    1f04:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
    nrk_led_clr(GREEN_LED);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    pause();
    1f10:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
}
    1f14:	08 95       	ret

00001f16 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
    pause();
    1f1e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
    pause();
    1f22:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
    pause();
    1f26:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
    nrk_led_clr(GREEN_LED);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    pause();
    1f32:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
}
    1f36:	08 95       	ret

00001f38 <blink_morse_code_error>:
    pause();
}


void blink_morse_code_error( uint8_t number )
{
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <blink_morse_code_error+0xc>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <blink_morse_code_error+0x14>
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <blink_morse_code_error+0x16>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <blink_morse_code_error+0x18>
    1f50:	ed b7       	in	r30, 0x3d	; 61
    1f52:	fe b7       	in	r31, 0x3e	; 62
    1f54:	31 96       	adiw	r30, 0x01	; 1
    1f56:	8e 01       	movw	r16, r28
    1f58:	0f 5f       	subi	r16, 0xFF	; 255
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	ad b7       	in	r26, 0x3d	; 61
    1f5e:	be b7       	in	r27, 0x3e	; 62
    1f60:	12 96       	adiw	r26, 0x02	; 2
    1f62:	1c 93       	st	X, r17
    1f64:	0e 93       	st	-X, r16
    1f66:	11 97       	sbiw	r26, 0x01	; 1
    1f68:	2e e3       	ldi	r18, 0x3E	; 62
    1f6a:	33 e0       	ldi	r19, 0x03	; 3
    1f6c:	33 83       	std	Z+3, r19	; 0x03
    1f6e:	22 83       	std	Z+2, r18	; 0x02
    1f70:	84 83       	std	Z+4, r24	; 0x04
    1f72:	15 82       	std	Z+5, r1	; 0x05
    1f74:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <sprintf>

    for(i=0; i<strlen(str); i++ )
    1f78:	ed b7       	in	r30, 0x3d	; 61
    1f7a:	fe b7       	in	r31, 0x3e	; 62
    1f7c:	36 96       	adiw	r30, 0x06	; 6
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	fe bf       	out	0x3e, r31	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	ed bf       	out	0x3d, r30	; 61
    1f88:	ff 24       	eor	r15, r15
    1f8a:	72 c0       	rjmp	.+228    	; 0x2070 <blink_morse_code_error+0x138>
    {
        switch( str[i])
    1f8c:	80 0f       	add	r24, r16
    1f8e:	91 1f       	adc	r25, r17
    1f90:	dc 01       	movw	r26, r24
    1f92:	8c 91       	ld	r24, X
    1f94:	84 33       	cpi	r24, 0x34	; 52
    1f96:	d1 f1       	breq	.+116    	; 0x200c <blink_morse_code_error+0xd4>
    1f98:	85 33       	cpi	r24, 0x35	; 53
    1f9a:	70 f4       	brcc	.+28     	; 0x1fb8 <blink_morse_code_error+0x80>
    1f9c:	81 33       	cpi	r24, 0x31	; 49
    1f9e:	f9 f0       	breq	.+62     	; 0x1fde <blink_morse_code_error+0xa6>
    1fa0:	82 33       	cpi	r24, 0x32	; 50
    1fa2:	20 f4       	brcc	.+8      	; 0x1fac <blink_morse_code_error+0x74>
    1fa4:	80 33       	cpi	r24, 0x30	; 48
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <blink_morse_code_error+0x72>
    1fa8:	5c c0       	rjmp	.+184    	; 0x2062 <blink_morse_code_error+0x12a>
    1faa:	16 c0       	rjmp	.+44     	; 0x1fd8 <blink_morse_code_error+0xa0>
    1fac:	82 33       	cpi	r24, 0x32	; 50
    1fae:	11 f1       	breq	.+68     	; 0x1ff4 <blink_morse_code_error+0xbc>
    1fb0:	83 33       	cpi	r24, 0x33	; 51
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <blink_morse_code_error+0x7e>
    1fb4:	56 c0       	rjmp	.+172    	; 0x2062 <blink_morse_code_error+0x12a>
    1fb6:	23 c0       	rjmp	.+70     	; 0x1ffe <blink_morse_code_error+0xc6>
    1fb8:	87 33       	cpi	r24, 0x37	; 55
    1fba:	c9 f1       	breq	.+114    	; 0x202e <blink_morse_code_error+0xf6>
    1fbc:	88 33       	cpi	r24, 0x38	; 56
    1fbe:	30 f4       	brcc	.+12     	; 0x1fcc <blink_morse_code_error+0x94>
    1fc0:	85 33       	cpi	r24, 0x35	; 53
    1fc2:	69 f1       	breq	.+90     	; 0x201e <blink_morse_code_error+0xe6>
    1fc4:	86 33       	cpi	r24, 0x36	; 54
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <blink_morse_code_error+0x92>
    1fc8:	4c c0       	rjmp	.+152    	; 0x2062 <blink_morse_code_error+0x12a>
    1fca:	2c c0       	rjmp	.+88     	; 0x2024 <blink_morse_code_error+0xec>
    1fcc:	88 33       	cpi	r24, 0x38	; 56
    1fce:	b1 f1       	breq	.+108    	; 0x203c <blink_morse_code_error+0x104>
    1fd0:	89 33       	cpi	r24, 0x39	; 57
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <blink_morse_code_error+0x9e>
    1fd4:	46 c0       	rjmp	.+140    	; 0x2062 <blink_morse_code_error+0x12a>
    1fd6:	3b c0       	rjmp	.+118    	; 0x204e <blink_morse_code_error+0x116>
        {
        case '0':
            blink_dash();
    1fd8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <blink_morse_code_error+0xaa>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1fde:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
            blink_dash();
    1fe2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    1fe6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    1fea:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    1fee:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            break;
    1ff2:	37 c0       	rjmp	.+110    	; 0x2062 <blink_morse_code_error+0x12a>
        case '2':
            blink_dot();
    1ff4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
            blink_dot();
    1ff8:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
    1ffc:	f4 cf       	rjmp	.-24     	; 0x1fe6 <blink_morse_code_error+0xae>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1ffe:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
            blink_dot();
    2002:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
            blink_dot();
    2006:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
    200a:	ef cf       	rjmp	.-34     	; 0x1fea <blink_morse_code_error+0xb2>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    200c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
            blink_dot();
    2010:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
            blink_dot();
    2014:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
            blink_dot();
    2018:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
    201c:	e8 cf       	rjmp	.-48     	; 0x1fee <blink_morse_code_error+0xb6>
            blink_dash();
            break;
        case '5':
            blink_dot();
    201e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <blink_morse_code_error+0xf0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    2024:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dot();
    2028:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
    202c:	04 c0       	rjmp	.+8      	; 0x2036 <blink_morse_code_error+0xfe>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    202e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    2032:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dot();
    2036:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
    203a:	06 c0       	rjmp	.+12     	; 0x2048 <blink_morse_code_error+0x110>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    203c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    2040:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    2044:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dot();
    2048:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
    204c:	08 c0       	rjmp	.+16     	; 0x205e <blink_morse_code_error+0x126>
            blink_dot();
            break;
        case '9':
            blink_dash();
    204e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    2052:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    2056:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dash();
    205a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <blink_dash>
            blink_dot();
    205e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <blink_dot>
            break;
        }
        pause();
    2062:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
        pause();
    2066:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
        pause();
    206a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    206e:	f3 94       	inc	r15
    2070:	f8 01       	movw	r30, r16
    2072:	01 90       	ld	r0, Z+
    2074:	00 20       	and	r0, r0
    2076:	e9 f7       	brne	.-6      	; 0x2072 <blink_morse_code_error+0x13a>
    2078:	31 97       	sbiw	r30, 0x01	; 1
    207a:	e0 1b       	sub	r30, r16
    207c:	f1 0b       	sbc	r31, r17
    207e:	8f 2d       	mov	r24, r15
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	8e 17       	cp	r24, r30
    2084:	9f 07       	cpc	r25, r31
    2086:	08 f4       	brcc	.+2      	; 0x208a <blink_morse_code_error+0x152>
    2088:	81 cf       	rjmp	.-254    	; 0x1f8c <blink_morse_code_error+0x54>
        pause();
        pause();
        pause();
    }

}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	08 95       	ret

0000209c <nrk_error_print>:
    *task_id = error_task;
    return 1;
}

int8_t nrk_error_print ()
{
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    int8_t t=0,i=0;
    if (error_num == 0)
    20a0:	80 91 eb 05 	lds	r24, 0x05EB
    20a4:	88 23       	and	r24, r24
    20a6:	19 f4       	brne	.+6      	; 0x20ae <nrk_error_print+0x12>
    }

#endif  /*  */
    error_num = 0;
    return t;
}
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	08 95       	ret
    int8_t t=0,i=0;
    if (error_num == 0)
        return 0;

#ifdef NRK_HALT_ON_ERROR
    nrk_int_disable ();
    20ae:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    20b2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    20b6:	88 e7       	ldi	r24, 0x78	; 120
    20b8:	93 e0       	ldi	r25, 0x03	; 3
    20ba:	0e 94 54 08 	call	0x10a8	; 0x10a8 <nrk_kprintf>
        printf ("%d", error_task);
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <nrk_error_print+0x24>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <nrk_error_print+0x26>
    20c2:	ed b7       	in	r30, 0x3d	; 61
    20c4:	fe b7       	in	r31, 0x3e	; 62
    20c6:	31 96       	adiw	r30, 0x01	; 1
    20c8:	8e e3       	ldi	r24, 0x3E	; 62
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	ad b7       	in	r26, 0x3d	; 61
    20ce:	be b7       	in	r27, 0x3e	; 62
    20d0:	12 96       	adiw	r26, 0x02	; 2
    20d2:	9c 93       	st	X, r25
    20d4:	8e 93       	st	-X, r24
    20d6:	11 97       	sbiw	r26, 0x01	; 1
    20d8:	80 91 a2 05 	lds	r24, 0x05A2
    20dc:	82 83       	std	Z+2, r24	; 0x02
    20de:	13 82       	std	Z+3, r1	; 0x03
    20e0:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
        nrk_kprintf (PSTR ("): "));
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	84 e7       	ldi	r24, 0x74	; 116
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    20f4:	80 91 eb 05 	lds	r24, 0x05EB
    20f8:	88 31       	cpi	r24, 0x18	; 24
    20fa:	10 f0       	brcs	.+4      	; 0x2100 <nrk_error_print+0x64>
            error_num = NRK_UNKOWN;
    20fc:	10 92 eb 05 	sts	0x05EB, r1
        switch (error_num)
    2100:	80 91 eb 05 	lds	r24, 0x05EB
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	86 31       	cpi	r24, 0x16	; 22
    210a:	91 05       	cpc	r25, r1
    210c:	08 f0       	brcs	.+2      	; 0x2110 <nrk_error_print+0x74>
    210e:	4b c0       	rjmp	.+150    	; 0x21a6 <nrk_error_print+0x10a>
    2110:	80 57       	subi	r24, 0x70	; 112
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	fc 01       	movw	r30, r24
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	05 90       	lpm	r0, Z+
    211c:	f4 91       	lpm	r31, Z+
    211e:	e0 2d       	mov	r30, r0
    2120:	09 94       	ijmp
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    2122:	88 e3       	ldi	r24, 0x38	; 56
    2124:	93 e0       	ldi	r25, 0x03	; 3
    2126:	41 c0       	rjmp	.+130    	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2128:	81 e1       	ldi	r24, 0x11	; 17
    212a:	93 e0       	ldi	r25, 0x03	; 3
    212c:	3e c0       	rjmp	.+124    	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    212e:	8d ef       	ldi	r24, 0xFD	; 253
    2130:	92 e0       	ldi	r25, 0x02	; 2
    2132:	3b c0       	rjmp	.+118    	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2134:	87 ee       	ldi	r24, 0xE7	; 231
    2136:	92 e0       	ldi	r25, 0x02	; 2
    2138:	38 c0       	rjmp	.+112    	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    213a:	8c ec       	ldi	r24, 0xCC	; 204
    213c:	92 e0       	ldi	r25, 0x02	; 2
    213e:	35 c0       	rjmp	.+106    	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    2140:	86 eb       	ldi	r24, 0xB6	; 182
    2142:	92 e0       	ldi	r25, 0x02	; 2
    2144:	32 c0       	rjmp	.+100    	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2146:	8e e9       	ldi	r24, 0x9E	; 158
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	2f c0       	rjmp	.+94     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    214c:	8b e8       	ldi	r24, 0x8B	; 139
    214e:	92 e0       	ldi	r25, 0x02	; 2
    2150:	2c c0       	rjmp	.+88     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    2152:	88 e7       	ldi	r24, 0x78	; 120
    2154:	92 e0       	ldi	r25, 0x02	; 2
    2156:	29 c0       	rjmp	.+82     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2158:	8a e5       	ldi	r24, 0x5A	; 90
    215a:	92 e0       	ldi	r25, 0x02	; 2
    215c:	26 c0       	rjmp	.+76     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    215e:	85 e3       	ldi	r24, 0x35	; 53
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	23 c0       	rjmp	.+70     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2164:	89 e2       	ldi	r24, 0x29	; 41
    2166:	92 e0       	ldi	r25, 0x02	; 2
    2168:	20 c0       	rjmp	.+64     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    216a:	8e e0       	ldi	r24, 0x0E	; 14
    216c:	92 e0       	ldi	r25, 0x02	; 2
    216e:	1d c0       	rjmp	.+58     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	91 e0       	ldi	r25, 0x01	; 1
    2174:	1a c0       	rjmp	.+52     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2176:	8b ee       	ldi	r24, 0xEB	; 235
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	17 c0       	rjmp	.+46     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    217c:	8a ed       	ldi	r24, 0xDA	; 218
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	14 c0       	rjmp	.+40     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2182:	86 ec       	ldi	r24, 0xC6	; 198
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	11 c0       	rjmp	.+34     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2188:	86 ea       	ldi	r24, 0xA6	; 166
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	0e c0       	rjmp	.+28     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    218e:	8e e8       	ldi	r24, 0x8E	; 142
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	0b c0       	rjmp	.+22     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2194:	83 e7       	ldi	r24, 0x73	; 115
    2196:	91 e0       	ldi	r25, 0x01	; 1
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    219a:	82 e6       	ldi	r24, 0x62	; 98
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <nrk_error_print+0x10e>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    21a0:	83 e5       	ldi	r24, 0x53	; 83
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <nrk_error_print+0x10e>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    21a6:	8c e4       	ldi	r24, 0x4C	; 76
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	0e 94 54 08 	call	0x10a8	; 0x10a8 <nrk_kprintf>
        }
        putchar ('\r');
    21ae:	60 91 60 07 	lds	r22, 0x0760
    21b2:	70 91 61 07 	lds	r23, 0x0761
    21b6:	8d e0       	ldi	r24, 0x0D	; 13
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
        putchar ('\n');
    21be:	60 91 60 07 	lds	r22, 0x0760
    21c2:	70 91 61 07 	lds	r23, 0x0761
    21c6:	8a e0       	ldi	r24, 0x0A	; 10
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    21ce:	10 e0       	ldi	r17, 0x00	; 0
    21d0:	1f c0       	rjmp	.+62     	; 0x2210 <nrk_error_print+0x174>
        {
            nrk_led_set (2);
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
            nrk_led_clr (3);
    21da:	83 e0       	ldi	r24, 0x03	; 3
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    21e2:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    21e4:	88 ee       	ldi	r24, 0xE8	; 232
    21e6:	93 e0       	ldi	r25, 0x03	; 3
    21e8:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <nrk_spin_wait_us>
    21ec:	01 50       	subi	r16, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    21ee:	d1 f7       	brne	.-12     	; 0x21e4 <nrk_error_print+0x148>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
            nrk_led_clr (2);
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    2200:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2202:	88 ee       	ldi	r24, 0xE8	; 232
    2204:	93 e0       	ldi	r25, 0x03	; 3
    2206:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <nrk_spin_wait_us>
    220a:	01 50       	subi	r16, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    220c:	d1 f7       	brne	.-12     	; 0x2202 <nrk_error_print+0x166>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    220e:	1f 5f       	subi	r17, 0xFF	; 255
    2210:	14 31       	cpi	r17, 0x14	; 20
    2212:	fc f2       	brlt	.-66     	; 0x21d2 <nrk_error_print+0x136>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    2214:	83 e0       	ldi	r24, 0x03	; 3
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
        nrk_led_clr (2);
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
        blink_morse_code_error( error_task );
    2224:	80 91 a2 05 	lds	r24, 0x05A2
    2228:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <blink_morse_code_error>
        pause();
    222c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
        nrk_led_set(2);
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
        pause();
    2238:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
        nrk_led_clr(2);
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
        pause();
    2244:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <pause>
        blink_morse_code_error( error_num);
    2248:	80 91 eb 05 	lds	r24, 0x05EB
    224c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <blink_morse_code_error>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    2250:	10 e0       	ldi	r17, 0x00	; 0
    2252:	bf cf       	rjmp	.-130    	; 0x21d2 <nrk_error_print+0x136>

00002254 <nrk_kernel_error_add>:
    nrk_error_print ();
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	18 2f       	mov	r17, r24
    225e:	e6 2e       	mov	r14, r22
    error_num = n;
    2260:	80 93 eb 05 	sts	0x05EB, r24
    error_task = task;
    2264:	60 93 a2 05 	sts	0x05A2, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2268:	0e 94 4e 10 	call	0x209c	; 0x209c <nrk_error_print>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    226c:	00 e0       	ldi	r16, 0x00	; 0
    226e:	21 c0       	rjmp	.+66     	; 0x22b2 <nrk_kernel_error_add+0x5e>
        {
            nrk_led_set (2);
    2270:	82 e0       	ldi	r24, 0x02	; 2
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
            nrk_led_clr (3);
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    2280:	94 e6       	ldi	r25, 0x64	; 100
    2282:	f9 2e       	mov	r15, r25
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2284:	88 ee       	ldi	r24, 0xE8	; 232
    2286:	93 e0       	ldi	r25, 0x03	; 3
    2288:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <nrk_spin_wait_us>
    228c:	fa 94       	dec	r15
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    228e:	d1 f7       	brne	.-12     	; 0x2284 <nrk_kernel_error_add+0x30>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 32 0c 	call	0x1864	; 0x1864 <nrk_led_set>
            nrk_led_clr (2);
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
    22a0:	84 e6       	ldi	r24, 0x64	; 100
    22a2:	f8 2e       	mov	r15, r24
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    22a4:	88 ee       	ldi	r24, 0xE8	; 232
    22a6:	93 e0       	ldi	r25, 0x03	; 3
    22a8:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <nrk_spin_wait_us>
    22ac:	fa 94       	dec	r15
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    22ae:	d1 f7       	brne	.-12     	; 0x22a4 <nrk_kernel_error_add+0x50>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    22b0:	0f 5f       	subi	r16, 0xFF	; 255
    22b2:	04 31       	cpi	r16, 0x14	; 20
    22b4:	e8 f2       	brcs	.-70     	; 0x2270 <nrk_kernel_error_add+0x1c>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    22b6:	83 e0       	ldi	r24, 0x03	; 3
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
        nrk_led_clr (2);
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <nrk_led_clr>
        blink_morse_code_error( task );
    22c6:	8e 2d       	mov	r24, r14
    22c8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <blink_morse_code_error>
        blink_morse_code_error( n );
    22cc:	81 2f       	mov	r24, r17
    22ce:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <blink_morse_code_error>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    22d2:	00 e0       	ldi	r16, 0x00	; 0
    22d4:	cd cf       	rjmp	.-102    	; 0x2270 <nrk_kernel_error_add+0x1c>

000022d6 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    22d6:	80 93 eb 05 	sts	0x05EB, r24
    error_task = nrk_cur_task_TCB->task_ID;
    22da:	e0 91 39 07 	lds	r30, 0x0739
    22de:	f0 91 3a 07 	lds	r31, 0x073A
    22e2:	80 85       	ldd	r24, Z+8	; 0x08
    22e4:	80 93 a2 05 	sts	0x05A2, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    22e8:	0e 94 4e 10 	call	0x209c	; 0x209c <nrk_error_print>
#endif  /*  */
}
    22ec:	08 95       	ret

000022ee <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    22ee:	4f 92       	push	r4
    22f0:	5f 92       	push	r5
    22f2:	6f 92       	push	r6
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    230e:	84 e8       	ldi	r24, 0x84	; 132
    2310:	93 e0       	ldi	r25, 0x03	; 3
    2312:	0e 94 54 08 	call	0x10a8	; 0x10a8 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2316:	00 d0       	rcall	.+0      	; 0x2318 <dump_stack_info+0x2a>
    2318:	00 d0       	rcall	.+0      	; 0x231a <dump_stack_info+0x2c>
    231a:	81 e4       	ldi	r24, 0x41	; 65
    231c:	93 e0       	ldi	r25, 0x03	; 3
    231e:	ad b7       	in	r26, 0x3d	; 61
    2320:	be b7       	in	r27, 0x3e	; 62
    2322:	12 96       	adiw	r26, 0x02	; 2
    2324:	9c 93       	st	X, r25
    2326:	8e 93       	st	-X, r24
    2328:	11 97       	sbiw	r26, 0x01	; 1
    232a:	e0 91 39 07 	lds	r30, 0x0739
    232e:	f0 91 3a 07 	lds	r31, 0x073A
    2332:	80 85       	ldd	r24, Z+8	; 0x08
    2334:	99 27       	eor	r25, r25
    2336:	87 fd       	sbrc	r24, 7
    2338:	90 95       	com	r25
    233a:	14 96       	adiw	r26, 0x04	; 4
    233c:	9c 93       	st	X, r25
    233e:	8e 93       	st	-X, r24
    2340:	13 97       	sbiw	r26, 0x03	; 3
    2342:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2346:	e0 91 39 07 	lds	r30, 0x0739
    234a:	f0 91 3a 07 	lds	r31, 0x073A
    234e:	c2 81       	ldd	r28, Z+2	; 0x02
    2350:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2352:	8a e4       	ldi	r24, 0x4A	; 74
    2354:	93 e0       	ldi	r25, 0x03	; 3
    2356:	ed b7       	in	r30, 0x3d	; 61
    2358:	fe b7       	in	r31, 0x3e	; 62
    235a:	92 83       	std	Z+2, r25	; 0x02
    235c:	81 83       	std	Z+1, r24	; 0x01
    235e:	d4 83       	std	Z+4, r29	; 0x04
    2360:	c3 83       	std	Z+3, r28	; 0x03
    2362:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
    printf( "canary = %x ",*stkc );
    2366:	ed b7       	in	r30, 0x3d	; 61
    2368:	fe b7       	in	r31, 0x3e	; 62
    236a:	31 96       	adiw	r30, 0x01	; 1
    236c:	47 e5       	ldi	r20, 0x57	; 87
    236e:	e4 2e       	mov	r14, r20
    2370:	43 e0       	ldi	r20, 0x03	; 3
    2372:	f4 2e       	mov	r15, r20
    2374:	ad b7       	in	r26, 0x3d	; 61
    2376:	be b7       	in	r27, 0x3e	; 62
    2378:	12 96       	adiw	r26, 0x02	; 2
    237a:	fc 92       	st	X, r15
    237c:	ee 92       	st	-X, r14
    237e:	11 97       	sbiw	r26, 0x01	; 1
    2380:	88 81       	ld	r24, Y
    2382:	82 83       	std	Z+2, r24	; 0x02
    2384:	13 82       	std	Z+3, r1	; 0x03
    2386:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    238a:	34 e6       	ldi	r19, 0x64	; 100
    238c:	c3 2e       	mov	r12, r19
    238e:	33 e0       	ldi	r19, 0x03	; 3
    2390:	d3 2e       	mov	r13, r19
    2392:	ed b7       	in	r30, 0x3d	; 61
    2394:	fe b7       	in	r31, 0x3e	; 62
    2396:	d2 82       	std	Z+2, r13	; 0x02
    2398:	c1 82       	std	Z+1, r12	; 0x01
    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    printf( "canary = %x ",*stkc );
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    239a:	e0 91 39 07 	lds	r30, 0x0739
    239e:	f0 91 3a 07 	lds	r31, 0x073A
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    23a2:	80 81       	ld	r24, Z
    23a4:	91 81       	ldd	r25, Z+1	; 0x01
    23a6:	ad b7       	in	r26, 0x3d	; 61
    23a8:	be b7       	in	r27, 0x3e	; 62
    23aa:	14 96       	adiw	r26, 0x04	; 4
    23ac:	9c 93       	st	X, r25
    23ae:	8e 93       	st	-X, r24
    23b0:	13 97       	sbiw	r26, 0x03	; 3
    23b2:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    23b6:	2e e6       	ldi	r18, 0x6E	; 110
    23b8:	a2 2e       	mov	r10, r18
    23ba:	23 e0       	ldi	r18, 0x03	; 3
    23bc:	b2 2e       	mov	r11, r18
    23be:	ed b7       	in	r30, 0x3d	; 61
    23c0:	fe b7       	in	r31, 0x3e	; 62
    23c2:	b2 82       	std	Z+2, r11	; 0x02
    23c4:	a1 82       	std	Z+1, r10	; 0x01
    23c6:	80 91 39 07 	lds	r24, 0x0739
    23ca:	90 91 3a 07 	lds	r25, 0x073A
    23ce:	94 83       	std	Z+4, r25	; 0x04
    23d0:	83 83       	std	Z+3, r24	; 0x03
    23d2:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
    23d6:	07 e7       	ldi	r16, 0x77	; 119
    23d8:	16 e0       	ldi	r17, 0x06	; 6
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	c0 e0       	ldi	r28, 0x00	; 0
    23e4:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    23e6:	9e e7       	ldi	r25, 0x7E	; 126
    23e8:	49 2e       	mov	r4, r25
    23ea:	93 e0       	ldi	r25, 0x03	; 3
    23ec:	59 2e       	mov	r5, r25
        printf( "canary = %x ",*stkc );
    23ee:	9e 2c       	mov	r9, r14
    23f0:	6f 2c       	mov	r6, r15
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    23f2:	7c 2c       	mov	r7, r12
    23f4:	8d 2c       	mov	r8, r13
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    23f6:	c5 01       	movw	r24, r10
    23f8:	ba 2c       	mov	r11, r10
    23fa:	a9 2e       	mov	r10, r25
    23fc:	8b e2       	ldi	r24, 0x2B	; 43
    23fe:	c8 2e       	mov	r12, r24
    2400:	d1 2c       	mov	r13, r1
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2402:	d8 01       	movw	r26, r16
    2404:	12 96       	adiw	r26, 0x02	; 2
    2406:	ed 90       	ld	r14, X+
    2408:	fc 90       	ld	r15, X
    240a:	13 97       	sbiw	r26, 0x03	; 3
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    240c:	00 d0       	rcall	.+0      	; 0x240e <dump_stack_info+0x120>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <dump_stack_info+0x122>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <dump_stack_info+0x124>
    2412:	ed b7       	in	r30, 0x3d	; 61
    2414:	fe b7       	in	r31, 0x3e	; 62
    2416:	31 96       	adiw	r30, 0x01	; 1
    2418:	ad b7       	in	r26, 0x3d	; 61
    241a:	be b7       	in	r27, 0x3e	; 62
    241c:	12 96       	adiw	r26, 0x02	; 2
    241e:	5c 92       	st	X, r5
    2420:	4e 92       	st	-X, r4
    2422:	11 97       	sbiw	r26, 0x01	; 1
    2424:	d3 83       	std	Z+3, r29	; 0x03
    2426:	c2 83       	std	Z+2, r28	; 0x02
    2428:	f5 82       	std	Z+5, r15	; 0x05
    242a:	e4 82       	std	Z+4, r14	; 0x04
    242c:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
        printf( "canary = %x ",*stkc );
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	ed b7       	in	r30, 0x3d	; 61
    2436:	fe b7       	in	r31, 0x3e	; 62
    2438:	31 96       	adiw	r30, 0x01	; 1
    243a:	ad b7       	in	r26, 0x3d	; 61
    243c:	be b7       	in	r27, 0x3e	; 62
    243e:	11 96       	adiw	r26, 0x01	; 1
    2440:	9c 92       	st	X, r9
    2442:	11 97       	sbiw	r26, 0x01	; 1
    2444:	12 96       	adiw	r26, 0x02	; 2
    2446:	6c 92       	st	X, r6
    2448:	d7 01       	movw	r26, r14
    244a:	8c 91       	ld	r24, X
    244c:	82 83       	std	Z+2, r24	; 0x02
    244e:	13 82       	std	Z+3, r1	; 0x03
    2450:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2454:	ed b7       	in	r30, 0x3d	; 61
    2456:	fe b7       	in	r31, 0x3e	; 62
    2458:	71 82       	std	Z+1, r7	; 0x01
    245a:	82 82       	std	Z+2, r8	; 0x02
    245c:	d8 01       	movw	r26, r16
    245e:	8d 91       	ld	r24, X+
    2460:	9c 91       	ld	r25, X
    2462:	94 83       	std	Z+4, r25	; 0x04
    2464:	83 83       	std	Z+3, r24	; 0x03
    2466:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    246a:	ed b7       	in	r30, 0x3d	; 61
    246c:	fe b7       	in	r31, 0x3e	; 62
    246e:	b1 82       	std	Z+1, r11	; 0x01
    2470:	a2 82       	std	Z+2, r10	; 0x02
    2472:	cc 9d       	mul	r28, r12
    2474:	c0 01       	movw	r24, r0
    2476:	cd 9d       	mul	r28, r13
    2478:	90 0d       	add	r25, r0
    247a:	dc 9d       	mul	r29, r12
    247c:	90 0d       	add	r25, r0
    247e:	11 24       	eor	r1, r1
    2480:	89 58       	subi	r24, 0x89	; 137
    2482:	99 4f       	sbci	r25, 0xF9	; 249
    2484:	94 83       	std	Z+4, r25	; 0x04
    2486:	83 83       	std	Z+3, r24	; 0x03
    2488:	0e 94 1c 2c 	call	0x5838	; 0x5838 <printf>
    248c:	21 96       	adiw	r28, 0x01	; 1
    248e:	05 5d       	subi	r16, 0xD5	; 213
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	c4 30       	cpi	r28, 0x04	; 4
    249c:	d1 05       	cpc	r29, r1
    249e:	09 f0       	breq	.+2      	; 0x24a2 <dump_stack_info+0x1b4>
    24a0:	b0 cf       	rjmp	.-160    	; 0x2402 <dump_stack_info+0x114>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	7f 90       	pop	r7
    24bc:	6f 90       	pop	r6
    24be:	5f 90       	pop	r5
    24c0:	4f 90       	pop	r4
    24c2:	08 95       	ret

000024c4 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    24c8:	e0 91 39 07 	lds	r30, 0x0739
    24cc:	f0 91 3a 07 	lds	r31, 0x073A
    24d0:	c2 81       	ldd	r28, Z+2	; 0x02
    24d2:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    24d4:	88 81       	ld	r24, Y
    24d6:	85 35       	cpi	r24, 0x55	; 85
    24d8:	39 f0       	breq	.+14     	; 0x24e8 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    24da:	0e 94 77 11 	call	0x22ee	; 0x22ee <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    24e4:	85 e5       	ldi	r24, 0x55	; 85
    24e6:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    24e8:	e0 91 39 07 	lds	r30, 0x0739
    24ec:	f0 91 3a 07 	lds	r31, 0x073A
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	22 e4       	ldi	r18, 0x42	; 66
    24f6:	80 30       	cpi	r24, 0x00	; 0
    24f8:	92 07       	cpc	r25, r18
    24fa:	28 f0       	brcs	.+10     	; 0x2506 <nrk_stack_check+0x42>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    24fc:	0e 94 77 11 	call	0x22ee	; 0x22ee <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2500:	82 e1       	ldi	r24, 0x12	; 18
    2502:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <nrk_error_add>




#endif
}
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	08 95       	ret

0000250c <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    250c:	99 27       	eor	r25, r25
    250e:	87 fd       	sbrc	r24, 7
    2510:	90 95       	com	r25
    2512:	2b e2       	ldi	r18, 0x2B	; 43
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	82 9f       	mul	r24, r18
    2518:	f0 01       	movw	r30, r0
    251a:	83 9f       	mul	r24, r19
    251c:	f0 0d       	add	r31, r0
    251e:	92 9f       	mul	r25, r18
    2520:	f0 0d       	add	r31, r0
    2522:	11 24       	eor	r1, r1
    2524:	e9 58       	subi	r30, 0x89	; 137
    2526:	f9 4f       	sbci	r31, 0xF9	; 249
    2528:	a2 81       	ldd	r26, Z+2	; 0x02
    252a:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    252c:	8c 91       	ld	r24, X
    252e:	85 35       	cpi	r24, 0x55	; 85
    2530:	19 f0       	breq	.+6      	; 0x2538 <nrk_stack_check_pid+0x2c>
    {
        *stkc=STK_CANARY_VAL;
    2532:	85 e5       	ldi	r24, 0x55	; 85
    2534:	8c 93       	st	X, r24
    2536:	09 c0       	rjmp	.+18     	; 0x254a <nrk_stack_check_pid+0x3e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	22 e4       	ldi	r18, 0x42	; 66
    253e:	80 30       	cpi	r24, 0x00	; 0
    2540:	92 07       	cpc	r25, r18
    2542:	28 f0       	brcs	.+10     	; 0x254e <nrk_stack_check_pid+0x42>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2544:	82 e1       	ldi	r24, 0x12	; 18
    2546:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <nrk_error_add>
        return NRK_ERROR;
    254a:	8f ef       	ldi	r24, 0xFF	; 255
    254c:	08 95       	ret
    }
#endif
    return NRK_OK;
    254e:	81 e0       	ldi	r24, 0x01	; 1
}
    2550:	08 95       	ret

00002552 <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2552:	60 91 a6 04 	lds	r22, 0x04A6
    2556:	70 91 a7 04 	lds	r23, 0x04A7
    255a:	80 91 a8 04 	lds	r24, 0x04A8
    255e:	90 91 a9 04 	lds	r25, 0x04A9
    2562:	e0 e0       	ldi	r30, 0x00	; 0
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	9b 01       	movw	r18, r22
    2568:	ac 01       	movw	r20, r24
    256a:	0e 2e       	mov	r0, r30
    256c:	04 c0       	rjmp	.+8      	; 0x2576 <nrk_signal_create+0x24>
    256e:	56 95       	lsr	r21
    2570:	47 95       	ror	r20
    2572:	37 95       	ror	r19
    2574:	27 95       	ror	r18
    2576:	0a 94       	dec	r0
    2578:	d2 f7       	brpl	.-12     	; 0x256e <nrk_signal_create+0x1c>
    257a:	20 fd       	sbrc	r18, 0
    257c:	1a c0       	rjmp	.+52     	; 0x25b2 <nrk_signal_create+0x60>
		{    
			_nrk_signal_list|=SIG(i);
    257e:	21 e0       	ldi	r18, 0x01	; 1
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	0e 2e       	mov	r0, r30
    2588:	04 c0       	rjmp	.+8      	; 0x2592 <nrk_signal_create+0x40>
    258a:	22 0f       	add	r18, r18
    258c:	33 1f       	adc	r19, r19
    258e:	44 1f       	adc	r20, r20
    2590:	55 1f       	adc	r21, r21
    2592:	0a 94       	dec	r0
    2594:	d2 f7       	brpl	.-12     	; 0x258a <nrk_signal_create+0x38>
    2596:	26 2b       	or	r18, r22
    2598:	37 2b       	or	r19, r23
    259a:	48 2b       	or	r20, r24
    259c:	59 2b       	or	r21, r25
    259e:	20 93 a6 04 	sts	0x04A6, r18
    25a2:	30 93 a7 04 	sts	0x04A7, r19
    25a6:	40 93 a8 04 	sts	0x04A8, r20
    25aa:	50 93 a9 04 	sts	0x04A9, r21
			return i;
    25ae:	8e 2f       	mov	r24, r30
    25b0:	08 95       	ret
    25b2:	31 96       	adiw	r30, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    25b4:	e0 32       	cpi	r30, 0x20	; 32
    25b6:	f1 05       	cpc	r31, r1
    25b8:	b1 f6       	brne	.-84     	; 0x2566 <nrk_signal_create+0x14>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    25ba:	8f ef       	ldi	r24, 0xFF	; 255


}
    25bc:	08 95       	ret

000025be <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    25be:	e0 91 39 07 	lds	r30, 0x0739
    25c2:	f0 91 3a 07 	lds	r31, 0x073A


}

uint32_t nrk_signal_get_registered_mask()
{
    25c6:	65 85       	ldd	r22, Z+13	; 0x0d
    25c8:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    25ca:	87 85       	ldd	r24, Z+15	; 0x0f
    25cc:	90 89       	ldd	r25, Z+16	; 0x10
    25ce:	08 95       	ret

000025d0 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	d8 2e       	mov	r13, r24
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	e8 2e       	mov	r14, r24
    25e0:	f1 2c       	mov	r15, r1
    25e2:	01 2d       	mov	r16, r1
    25e4:	11 2d       	mov	r17, r1
    25e6:	0d 2c       	mov	r0, r13
    25e8:	04 c0       	rjmp	.+8      	; 0x25f2 <nrk_signal_delete+0x22>
    25ea:	ee 0c       	add	r14, r14
    25ec:	ff 1c       	adc	r15, r15
    25ee:	00 1f       	adc	r16, r16
    25f0:	11 1f       	adc	r17, r17
    25f2:	0a 94       	dec	r0
    25f4:	d2 f7       	brpl	.-12     	; 0x25ea <nrk_signal_delete+0x1a>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    25f6:	80 91 a6 04 	lds	r24, 0x04A6
    25fa:	90 91 a7 04 	lds	r25, 0x04A7
    25fe:	a0 91 a8 04 	lds	r26, 0x04A8
    2602:	b0 91 a9 04 	lds	r27, 0x04A9
    2606:	8e 21       	and	r24, r14
    2608:	9f 21       	and	r25, r15
    260a:	a0 23       	and	r26, r16
    260c:	b1 23       	and	r27, r17
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	a1 05       	cpc	r26, r1
    2612:	b1 05       	cpc	r27, r1
    2614:	09 f4       	brne	.+2      	; 0x2618 <nrk_signal_delete+0x48>
    2616:	5d c0       	rjmp	.+186    	; 0x26d2 <nrk_signal_delete+0x102>

	nrk_int_disable();
    2618:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    261c:	ee e7       	ldi	r30, 0x7E	; 126
    261e:	f6 e0       	ldi	r31, 0x06	; 6
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2620:	a8 01       	movw	r20, r16
    2622:	97 01       	movw	r18, r14
    2624:	20 95       	com	r18
    2626:	30 95       	com	r19
    2628:	40 95       	com	r20
    262a:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    262c:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    262e:	81 81       	ldd	r24, Z+1	; 0x01
    2630:	8f 3f       	cpi	r24, 0xFF	; 255
    2632:	39 f1       	breq	.+78     	; 0x2682 <nrk_signal_delete+0xb2>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2634:	86 81       	ldd	r24, Z+6	; 0x06
    2636:	97 81       	ldd	r25, Z+7	; 0x07
    2638:	a0 85       	ldd	r26, Z+8	; 0x08
    263a:	b1 85       	ldd	r27, Z+9	; 0x09
    263c:	8e 15       	cp	r24, r14
    263e:	9f 05       	cpc	r25, r15
    2640:	a0 07       	cpc	r26, r16
    2642:	b1 07       	cpc	r27, r17
    2644:	31 f4       	brne	.+12     	; 0x2652 <nrk_signal_delete+0x82>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2646:	12 86       	std	Z+10, r1	; 0x0a
    2648:	13 86       	std	Z+11, r1	; 0x0b
    264a:	14 86       	std	Z+12, r1	; 0x0c
    264c:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    264e:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2650:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2652:	86 81       	ldd	r24, Z+6	; 0x06
    2654:	97 81       	ldd	r25, Z+7	; 0x07
    2656:	a0 85       	ldd	r26, Z+8	; 0x08
    2658:	b1 85       	ldd	r27, Z+9	; 0x09
    265a:	82 23       	and	r24, r18
    265c:	93 23       	and	r25, r19
    265e:	a4 23       	and	r26, r20
    2660:	b5 23       	and	r27, r21
    2662:	86 83       	std	Z+6, r24	; 0x06
    2664:	97 83       	std	Z+7, r25	; 0x07
    2666:	a0 87       	std	Z+8, r26	; 0x08
    2668:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    266a:	82 85       	ldd	r24, Z+10	; 0x0a
    266c:	93 85       	ldd	r25, Z+11	; 0x0b
    266e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2670:	b5 85       	ldd	r27, Z+13	; 0x0d
    2672:	82 23       	and	r24, r18
    2674:	93 23       	and	r25, r19
    2676:	a4 23       	and	r26, r20
    2678:	b5 23       	and	r27, r21
    267a:	82 87       	std	Z+10, r24	; 0x0a
    267c:	93 87       	std	Z+11, r25	; 0x0b
    267e:	a4 87       	std	Z+12, r26	; 0x0c
    2680:	b5 87       	std	Z+13, r27	; 0x0d
    2682:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2684:	87 e0       	ldi	r24, 0x07	; 7
    2686:	ea 32       	cpi	r30, 0x2A	; 42
    2688:	f8 07       	cpc	r31, r24
    268a:	89 f6       	brne	.-94     	; 0x262e <nrk_signal_delete+0x5e>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    268c:	2e ef       	ldi	r18, 0xFE	; 254
    268e:	3f ef       	ldi	r19, 0xFF	; 255
    2690:	4f ef       	ldi	r20, 0xFF	; 255
    2692:	5f ef       	ldi	r21, 0xFF	; 255
    2694:	04 c0       	rjmp	.+8      	; 0x269e <nrk_signal_delete+0xce>
    2696:	22 0f       	add	r18, r18
    2698:	33 1f       	adc	r19, r19
    269a:	44 1f       	adc	r20, r20
    269c:	55 1f       	adc	r21, r21
    269e:	da 94       	dec	r13
    26a0:	d2 f7       	brpl	.-12     	; 0x2696 <nrk_signal_delete+0xc6>
    26a2:	80 91 a6 04 	lds	r24, 0x04A6
    26a6:	90 91 a7 04 	lds	r25, 0x04A7
    26aa:	a0 91 a8 04 	lds	r26, 0x04A8
    26ae:	b0 91 a9 04 	lds	r27, 0x04A9
    26b2:	82 23       	and	r24, r18
    26b4:	93 23       	and	r25, r19
    26b6:	a4 23       	and	r26, r20
    26b8:	b5 23       	and	r27, r21
    26ba:	80 93 a6 04 	sts	0x04A6, r24
    26be:	90 93 a7 04 	sts	0x04A7, r25
    26c2:	a0 93 a8 04 	sts	0x04A8, r26
    26c6:	b0 93 a9 04 	sts	0x04A9, r27
	nrk_int_enable();
    26ca:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>

	return NRK_OK;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <nrk_signal_delete+0x104>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    26d2:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	ef 90       	pop	r14
    26dc:	df 90       	pop	r13
    26de:	08 95       	ret

000026e0 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    26e8:	21 e0       	ldi	r18, 0x01	; 1
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <nrk_signal_unregister+0x1a>
    26f2:	22 0f       	add	r18, r18
    26f4:	33 1f       	adc	r19, r19
    26f6:	44 1f       	adc	r20, r20
    26f8:	55 1f       	adc	r21, r21
    26fa:	8a 95       	dec	r24
    26fc:	d2 f7       	brpl	.-12     	; 0x26f2 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    26fe:	e0 91 39 07 	lds	r30, 0x0739
    2702:	f0 91 3a 07 	lds	r31, 0x073A
    2706:	85 85       	ldd	r24, Z+13	; 0x0d
    2708:	96 85       	ldd	r25, Z+14	; 0x0e
    270a:	a7 85       	ldd	r26, Z+15	; 0x0f
    270c:	b0 89       	ldd	r27, Z+16	; 0x10
    270e:	79 01       	movw	r14, r18
    2710:	8a 01       	movw	r16, r20
    2712:	e8 22       	and	r14, r24
    2714:	f9 22       	and	r15, r25
    2716:	0a 23       	and	r16, r26
    2718:	1b 23       	and	r17, r27
    271a:	e1 14       	cp	r14, r1
    271c:	f1 04       	cpc	r15, r1
    271e:	01 05       	cpc	r16, r1
    2720:	11 05       	cpc	r17, r1
    2722:	d1 f0       	breq	.+52     	; 0x2758 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2724:	20 95       	com	r18
    2726:	30 95       	com	r19
    2728:	40 95       	com	r20
    272a:	50 95       	com	r21
    272c:	82 23       	and	r24, r18
    272e:	93 23       	and	r25, r19
    2730:	a4 23       	and	r26, r20
    2732:	b5 23       	and	r27, r21
    2734:	85 87       	std	Z+13, r24	; 0x0d
    2736:	96 87       	std	Z+14, r25	; 0x0e
    2738:	a7 87       	std	Z+15, r26	; 0x0f
    273a:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    273c:	81 89       	ldd	r24, Z+17	; 0x11
    273e:	92 89       	ldd	r25, Z+18	; 0x12
    2740:	a3 89       	ldd	r26, Z+19	; 0x13
    2742:	b4 89       	ldd	r27, Z+20	; 0x14
    2744:	82 23       	and	r24, r18
    2746:	93 23       	and	r25, r19
    2748:	a4 23       	and	r26, r20
    274a:	b5 23       	and	r27, r21
    274c:	81 8b       	std	Z+17, r24	; 0x11
    274e:	92 8b       	std	Z+18, r25	; 0x12
    2750:	a3 8b       	std	Z+19, r26	; 0x13
    2752:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	01 c0       	rjmp	.+2      	; 0x275a <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2758:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	ff 90       	pop	r15
    2760:	ef 90       	pop	r14
    2762:	08 95       	ret

00002764 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2764:	20 91 a6 04 	lds	r18, 0x04A6
    2768:	30 91 a7 04 	lds	r19, 0x04A7
    276c:	40 91 a8 04 	lds	r20, 0x04A8
    2770:	50 91 a9 04 	lds	r21, 0x04A9
    2774:	08 2e       	mov	r0, r24
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <nrk_signal_register+0x1c>
    2778:	56 95       	lsr	r21
    277a:	47 95       	ror	r20
    277c:	37 95       	ror	r19
    277e:	27 95       	ror	r18
    2780:	0a 94       	dec	r0
    2782:	d2 f7       	brpl	.-12     	; 0x2778 <nrk_signal_register+0x14>
    2784:	21 70       	andi	r18, 0x01	; 1
    2786:	30 70       	andi	r19, 0x00	; 0
    2788:	21 15       	cp	r18, r1
    278a:	31 05       	cpc	r19, r1
    278c:	e9 f0       	breq	.+58     	; 0x27c8 <nrk_signal_register+0x64>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    278e:	e0 91 39 07 	lds	r30, 0x0739
    2792:	f0 91 3a 07 	lds	r31, 0x073A
    2796:	21 e0       	ldi	r18, 0x01	; 1
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <nrk_signal_register+0x44>
    27a0:	22 0f       	add	r18, r18
    27a2:	33 1f       	adc	r19, r19
    27a4:	44 1f       	adc	r20, r20
    27a6:	55 1f       	adc	r21, r21
    27a8:	8a 95       	dec	r24
    27aa:	d2 f7       	brpl	.-12     	; 0x27a0 <nrk_signal_register+0x3c>
    27ac:	85 85       	ldd	r24, Z+13	; 0x0d
    27ae:	96 85       	ldd	r25, Z+14	; 0x0e
    27b0:	a7 85       	ldd	r26, Z+15	; 0x0f
    27b2:	b0 89       	ldd	r27, Z+16	; 0x10
    27b4:	82 2b       	or	r24, r18
    27b6:	93 2b       	or	r25, r19
    27b8:	a4 2b       	or	r26, r20
    27ba:	b5 2b       	or	r27, r21
    27bc:	85 87       	std	Z+13, r24	; 0x0d
    27be:	96 87       	std	Z+14, r25	; 0x0e
    27c0:	a7 87       	std	Z+15, r26	; 0x0f
    27c2:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	08 95       	ret
	}
            
	return NRK_ERROR;
    27c8:	8f ef       	ldi	r24, 0xFF	; 255
}
    27ca:	08 95       	ret

000027cc <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    27cc:	ef 92       	push	r14
    27ce:	ff 92       	push	r15
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	0f 92       	push	r0
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	e9 2e       	mov	r14, r25
    27e2:	f1 2c       	mov	r15, r1
    27e4:	01 2d       	mov	r16, r1
    27e6:	11 2d       	mov	r17, r1
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <nrk_event_signal+0x26>
    27ea:	ee 0c       	add	r14, r14
    27ec:	ff 1c       	adc	r15, r15
    27ee:	00 1f       	adc	r16, r16
    27f0:	11 1f       	adc	r17, r17
    27f2:	8a 95       	dec	r24
    27f4:	d2 f7       	brpl	.-12     	; 0x27ea <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    27f6:	80 91 a6 04 	lds	r24, 0x04A6
    27fa:	90 91 a7 04 	lds	r25, 0x04A7
    27fe:	a0 91 a8 04 	lds	r26, 0x04A8
    2802:	b0 91 a9 04 	lds	r27, 0x04A9
    2806:	8e 21       	and	r24, r14
    2808:	9f 21       	and	r25, r15
    280a:	a0 23       	and	r26, r16
    280c:	b1 23       	and	r27, r17
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	a1 05       	cpc	r26, r1
    2812:	b1 05       	cpc	r27, r1
    2814:	11 f4       	brne	.+4      	; 0x281a <nrk_event_signal+0x4e>
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	43 c0       	rjmp	.+134    	; 0x28a0 <nrk_event_signal+0xd4>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    281a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    281e:	ee e7       	ldi	r30, 0x7E	; 126
    2820:	f6 e0       	ldi	r31, 0x06	; 6

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    2822:	20 e0       	ldi	r18, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2824:	33 e0       	ldi	r19, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2826:	80 81       	ld	r24, Z
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	b9 f4       	brne	.+46     	; 0x285a <nrk_event_signal+0x8e>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    282c:	82 85       	ldd	r24, Z+10	; 0x0a
    282e:	93 85       	ldd	r25, Z+11	; 0x0b
    2830:	a4 85       	ldd	r26, Z+12	; 0x0c
    2832:	b5 85       	ldd	r27, Z+13	; 0x0d
    2834:	8e 21       	and	r24, r14
    2836:	9f 21       	and	r25, r15
    2838:	a0 23       	and	r26, r16
    283a:	b1 23       	and	r27, r17
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	a1 05       	cpc	r26, r1
    2840:	b1 05       	cpc	r27, r1
    2842:	59 f0       	breq	.+22     	; 0x285a <nrk_event_signal+0x8e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2844:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2846:	16 86       	std	Z+14, r1	; 0x0e
    2848:	17 86       	std	Z+15, r1	; 0x0f
    284a:	10 8a       	std	Z+16, r1	; 0x10
    284c:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    284e:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2850:	e2 86       	std	Z+10, r14	; 0x0a
    2852:	f3 86       	std	Z+11, r15	; 0x0b
    2854:	04 87       	std	Z+12, r16	; 0x0c
    2856:	15 87       	std	Z+13, r17	; 0x0d
					event_occured=1;
    2858:	21 e0       	ldi	r18, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    285a:	80 81       	ld	r24, Z
    285c:	82 30       	cpi	r24, 0x02	; 2
    285e:	a1 f4       	brne	.+40     	; 0x2888 <nrk_event_signal+0xbc>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2860:	82 85       	ldd	r24, Z+10	; 0x0a
    2862:	93 85       	ldd	r25, Z+11	; 0x0b
    2864:	a4 85       	ldd	r26, Z+12	; 0x0c
    2866:	b5 85       	ldd	r27, Z+13	; 0x0d
    2868:	8e 15       	cp	r24, r14
    286a:	9f 05       	cpc	r25, r15
    286c:	a0 07       	cpc	r26, r16
    286e:	b1 07       	cpc	r27, r17
    2870:	59 f4       	brne	.+22     	; 0x2888 <nrk_event_signal+0xbc>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2872:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2874:	16 86       	std	Z+14, r1	; 0x0e
    2876:	17 86       	std	Z+15, r1	; 0x0f
    2878:	10 8a       	std	Z+16, r1	; 0x10
    287a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    287c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    287e:	12 86       	std	Z+10, r1	; 0x0a
    2880:	13 86       	std	Z+11, r1	; 0x0b
    2882:	14 86       	std	Z+12, r1	; 0x0c
    2884:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    2886:	21 e0       	ldi	r18, 0x01	; 1
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
					nrk_task_TCB[task_ID].next_wakeup=0;
					nrk_task_TCB[task_ID].event_suspend=0;
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2888:	bb 96       	adiw	r30, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    288a:	87 e0       	ldi	r24, 0x07	; 7
    288c:	ea 32       	cpi	r30, 0x2A	; 42
    288e:	f8 07       	cpc	r31, r24
    2890:	51 f6       	brne	.-108    	; 0x2826 <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    2892:	29 83       	std	Y+1, r18	; 0x01
    2894:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
	if(event_occured)
    2898:	29 81       	ldd	r18, Y+1	; 0x01
    289a:	22 23       	and	r18, r18
    289c:	29 f4       	brne	.+10     	; 0x28a8 <nrk_event_signal+0xdc>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <_nrk_errno_set>
	return NRK_ERROR;
    28a4:	8f ef       	ldi	r24, 0xFF	; 255
    28a6:	01 c0       	rjmp	.+2      	; 0x28aa <nrk_event_signal+0xde>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	1f 91       	pop	r17
    28b2:	0f 91       	pop	r16
    28b4:	ff 90       	pop	r15
    28b6:	ef 90       	pop	r14
    28b8:	08 95       	ret

000028ba <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    28ba:	e0 91 39 07 	lds	r30, 0x0739
    28be:	f0 91 3a 07 	lds	r31, 0x073A
    28c2:	25 85       	ldd	r18, Z+13	; 0x0d
    28c4:	36 85       	ldd	r19, Z+14	; 0x0e
    28c6:	47 85       	ldd	r20, Z+15	; 0x0f
    28c8:	50 89       	ldd	r21, Z+16	; 0x10
    28ca:	26 23       	and	r18, r22
    28cc:	37 23       	and	r19, r23
    28ce:	48 23       	and	r20, r24
    28d0:	59 23       	and	r21, r25
    28d2:	21 15       	cp	r18, r1
    28d4:	31 05       	cpc	r19, r1
    28d6:	41 05       	cpc	r20, r1
    28d8:	51 05       	cpc	r21, r1
    28da:	21 f1       	breq	.+72     	; 0x2924 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    28dc:	61 8b       	std	Z+17, r22	; 0x11
    28de:	72 8b       	std	Z+18, r23	; 0x12
    28e0:	83 8b       	std	Z+19, r24	; 0x13
    28e2:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    28e4:	21 e0       	ldi	r18, 0x01	; 1
    28e6:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    28e8:	00 90 29 07 	lds	r0, 0x0729
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <nrk_event_wait+0x3c>
    28ee:	96 95       	lsr	r25
    28f0:	87 95       	ror	r24
    28f2:	77 95       	ror	r23
    28f4:	67 95       	ror	r22
    28f6:	0a 94       	dec	r0
    28f8:	d2 f7       	brpl	.-12     	; 0x28ee <nrk_event_wait+0x34>
    28fa:	61 70       	andi	r22, 0x01	; 1
    28fc:	70 70       	andi	r23, 0x00	; 0
    28fe:	61 15       	cp	r22, r1
    2900:	71 05       	cpc	r23, r1
    2902:	19 f0       	breq	.+6      	; 0x290a <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    2904:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <nrk_wait_until_nw>
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    2912:	e0 91 39 07 	lds	r30, 0x0739
    2916:	f0 91 3a 07 	lds	r31, 0x073A
    291a:	21 89       	ldd	r18, Z+17	; 0x11
    291c:	32 89       	ldd	r19, Z+18	; 0x12
    291e:	43 89       	ldd	r20, Z+19	; 0x13
    2920:	54 89       	ldd	r21, Z+20	; 0x14
    2922:	03 c0       	rjmp	.+6      	; 0x292a <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	a9 01       	movw	r20, r18
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    292a:	b9 01       	movw	r22, r18
    292c:	ca 01       	movw	r24, r20
    292e:	08 95       	ret

00002930 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	08 95       	ret

00002936 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2936:	27 e0       	ldi	r18, 0x07	; 7
    2938:	85 32       	cpi	r24, 0x25	; 37
    293a:	92 07       	cpc	r25, r18
    293c:	11 f4       	brne	.+4      	; 0x2942 <nrk_get_resource_index+0xc>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	08 95       	ret
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    2942:	8f ef       	ldi	r24, 0xFF	; 255
}
    2944:	08 95       	ret

00002946 <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    2946:	0e 94 9b 14 	call	0x2936	; 0x2936 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    294a:	8f 3f       	cpi	r24, 0xFF	; 255
    294c:	11 f4       	brne	.+4      	; 0x2952 <nrk_sem_delete+0xc>
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	29 f4       	brne	.+10     	; 0x2960 <nrk_sem_delete+0x1a>
    2956:	82 e0       	ldi	r24, 0x02	; 2
    2958:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <_nrk_errno_set>
    295c:	8f ef       	ldi	r24, 0xFF	; 255
    295e:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2960:	99 27       	eor	r25, r25
    2962:	87 fd       	sbrc	r24, 7
    2964:	90 95       	com	r25
    2966:	fc 01       	movw	r30, r24
    2968:	ee 0f       	add	r30, r30
    296a:	ff 1f       	adc	r31, r31
    296c:	e8 0f       	add	r30, r24
    296e:	f9 1f       	adc	r31, r25
    2970:	eb 5d       	subi	r30, 0xDB	; 219
    2972:	f8 4f       	sbci	r31, 0xF8	; 248
    2974:	8f ef       	ldi	r24, 0xFF	; 255
    2976:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    2978:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    297a:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    297c:	80 91 38 07 	lds	r24, 0x0738
    2980:	81 50       	subi	r24, 0x01	; 1
    2982:	80 93 38 07 	sts	0x0738, r24
return NRK_OK;
    2986:	81 e0       	ldi	r24, 0x01	; 1
}
    2988:	08 95       	ret

0000298a <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	0f 92       	push	r0
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    2998:	0e 94 9b 14 	call	0x2936	; 0x2936 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    299c:	8f 3f       	cpi	r24, 0xFF	; 255
    299e:	11 f4       	brne	.+4      	; 0x29a4 <nrk_sem_post+0x1a>
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    29a4:	81 30       	cpi	r24, 0x01	; 1
    29a6:	29 f4       	brne	.+10     	; 0x29b2 <nrk_sem_post+0x28>
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <_nrk_errno_set>
    29ae:	8f ef       	ldi	r24, 0xFF	; 255
    29b0:	45 c0       	rjmp	.+138    	; 0x2a3c <nrk_sem_post+0xb2>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    29b2:	28 2f       	mov	r18, r24
    29b4:	33 27       	eor	r19, r19
    29b6:	27 fd       	sbrc	r18, 7
    29b8:	30 95       	com	r19
    29ba:	89 01       	movw	r16, r18
    29bc:	00 0f       	add	r16, r16
    29be:	11 1f       	adc	r17, r17
    29c0:	02 0f       	add	r16, r18
    29c2:	13 1f       	adc	r17, r19
    29c4:	0b 5d       	subi	r16, 0xDB	; 219
    29c6:	18 4f       	sbci	r17, 0xF8	; 248
    29c8:	d8 01       	movw	r26, r16
    29ca:	12 96       	adiw	r26, 0x02	; 2
    29cc:	2c 91       	ld	r18, X
    29ce:	12 97       	sbiw	r26, 0x02	; 2
    29d0:	9c 91       	ld	r25, X
    29d2:	29 17       	cp	r18, r25
    29d4:	94 f5       	brge	.+100    	; 0x2a3a <nrk_sem_post+0xb0>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>

		nrk_sem_list[id].value++;
    29dc:	f8 01       	movw	r30, r16
    29de:	92 81       	ldd	r25, Z+2	; 0x02
    29e0:	9f 5f       	subi	r25, 0xFF	; 255
    29e2:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    29e4:	e0 91 39 07 	lds	r30, 0x0739
    29e8:	f0 91 3a 07 	lds	r31, 0x073A
    29ec:	14 82       	std	Z+4, r1	; 0x04
    29ee:	ee e7       	ldi	r30, 0x7E	; 126
    29f0:	f6 e0       	ldi	r31, 0x06	; 6

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	99 27       	eor	r25, r25
    29f6:	87 fd       	sbrc	r24, 7
    29f8:	90 95       	com	r25
    29fa:	a9 2f       	mov	r26, r25
    29fc:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    29fe:	63 e0       	ldi	r22, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2a00:	20 81       	ld	r18, Z
    2a02:	22 30       	cpi	r18, 0x02	; 2
    2a04:	99 f4       	brne	.+38     	; 0x2a2c <nrk_sem_post+0xa2>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2a06:	22 85       	ldd	r18, Z+10	; 0x0a
    2a08:	33 85       	ldd	r19, Z+11	; 0x0b
    2a0a:	44 85       	ldd	r20, Z+12	; 0x0c
    2a0c:	55 85       	ldd	r21, Z+13	; 0x0d
    2a0e:	28 17       	cp	r18, r24
    2a10:	39 07       	cpc	r19, r25
    2a12:	4a 07       	cpc	r20, r26
    2a14:	5b 07       	cpc	r21, r27
    2a16:	51 f4       	brne	.+20     	; 0x2a2c <nrk_sem_post+0xa2>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2a18:	62 83       	std	Z+2, r22	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2a1a:	16 86       	std	Z+14, r1	; 0x0e
    2a1c:	17 86       	std	Z+15, r1	; 0x0f
    2a1e:	10 8a       	std	Z+16, r1	; 0x10
    2a20:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2a22:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2a24:	12 86       	std	Z+10, r1	; 0x0a
    2a26:	13 86       	std	Z+11, r1	; 0x0b
    2a28:	14 86       	std	Z+12, r1	; 0x0c
    2a2a:	15 86       	std	Z+13, r1	; 0x0d
    2a2c:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2a2e:	27 e0       	ldi	r18, 0x07	; 7
    2a30:	ea 32       	cpi	r30, 0x2A	; 42
    2a32:	f2 07       	cpc	r31, r18
    2a34:	29 f7       	brne	.-54     	; 0x2a00 <nrk_sem_post+0x76>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    2a36:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
	}
		
return NRK_OK;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
}
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	08 95       	ret

00002a48 <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	0f 92       	push	r0
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2a56:	0e 94 9b 14 	call	0x2936	; 0x2936 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2a5a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a5c:	11 f4       	brne	.+4      	; 0x2a62 <nrk_sem_pend+0x1a>
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	03 c0       	rjmp	.+6      	; 0x2a68 <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	29 f4       	brne	.+10     	; 0x2a70 <nrk_sem_pend+0x28>
    2a66:	82 e0       	ldi	r24, 0x02	; 2
    2a68:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <_nrk_errno_set>
    2a6c:	8f ef       	ldi	r24, 0xFF	; 255
    2a6e:	40 c0       	rjmp	.+128    	; 0x2af0 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	08 2f       	mov	r16, r24
    2a7a:	11 27       	eor	r17, r17
    2a7c:	07 fd       	sbrc	r16, 7
    2a7e:	10 95       	com	r17
    2a80:	f8 01       	movw	r30, r16
    2a82:	ee 0f       	add	r30, r30
    2a84:	ff 1f       	adc	r31, r31
    2a86:	e0 0f       	add	r30, r16
    2a88:	f1 1f       	adc	r31, r17
    2a8a:	eb 5d       	subi	r30, 0xDB	; 219
    2a8c:	f8 4f       	sbci	r31, 0xF8	; 248
    2a8e:	92 81       	ldd	r25, Z+2	; 0x02
    2a90:	99 23       	and	r25, r25
    2a92:	b1 f4       	brne	.+44     	; 0x2ac0 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    2a94:	e0 91 39 07 	lds	r30, 0x0739
    2a98:	f0 91 3a 07 	lds	r31, 0x073A
    2a9c:	97 81       	ldd	r25, Z+7	; 0x07
    2a9e:	92 60       	ori	r25, 0x02	; 2
    2aa0:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    2aa2:	99 27       	eor	r25, r25
    2aa4:	87 fd       	sbrc	r24, 7
    2aa6:	90 95       	com	r25
    2aa8:	a9 2f       	mov	r26, r25
    2aaa:	b9 2f       	mov	r27, r25
    2aac:	81 8b       	std	Z+17, r24	; 0x11
    2aae:	92 8b       	std	Z+18, r25	; 0x12
    2ab0:	a3 8b       	std	Z+19, r26	; 0x13
    2ab2:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    2ab4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	ee 0f       	add	r30, r30
    2ac4:	ff 1f       	adc	r31, r31
    2ac6:	e0 0f       	add	r30, r16
    2ac8:	f1 1f       	adc	r31, r17
    2aca:	eb 5d       	subi	r30, 0xDB	; 219
    2acc:	f8 4f       	sbci	r31, 0xF8	; 248
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	81 50       	subi	r24, 0x01	; 1
    2ad2:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    2ad4:	a0 91 39 07 	lds	r26, 0x0739
    2ad8:	b0 91 3a 07 	lds	r27, 0x073A
    2adc:	81 81       	ldd	r24, Z+1	; 0x01
    2ade:	1b 96       	adiw	r26, 0x0b	; 11
    2ae0:	8c 93       	st	X, r24
    2ae2:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	14 96       	adiw	r26, 0x04	; 4
    2ae8:	8c 93       	st	X, r24
	nrk_int_enable();
    2aea:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>

	return NRK_OK;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
}
    2af0:	0f 90       	pop	r0
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2afc:	0e 94 9b 14 	call	0x2936	; 0x2936 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2b00:	8f 3f       	cpi	r24, 0xFF	; 255
    2b02:	11 f4       	brne	.+4      	; 0x2b08 <nrk_sem_query+0xc>
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	29 f4       	brne	.+10     	; 0x2b16 <nrk_sem_query+0x1a>
    2b0c:	82 e0       	ldi	r24, 0x02	; 2
    2b0e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <_nrk_errno_set>
    2b12:	8f ef       	ldi	r24, 0xFF	; 255
    2b14:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2b16:	99 27       	eor	r25, r25
    2b18:	87 fd       	sbrc	r24, 7
    2b1a:	90 95       	com	r25
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	ee 0f       	add	r30, r30
    2b20:	ff 1f       	adc	r31, r31
    2b22:	e8 0f       	add	r30, r24
    2b24:	f9 1f       	adc	r31, r25
    2b26:	eb 5d       	subi	r30, 0xDB	; 219
    2b28:	f8 4f       	sbci	r31, 0xF8	; 248
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
}
    2b2c:	08 95       	ret

00002b2e <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    2b2e:	e0 91 2e 07 	lds	r30, 0x072E
    2b32:	f0 91 2f 07 	lds	r31, 0x072F
}
    2b36:	80 81       	ld	r24, Z
    2b38:	08 95       	ret

00002b3a <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2b3a:	e0 91 2e 07 	lds	r30, 0x072E
    2b3e:	f0 91 2f 07 	lds	r31, 0x072F
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2b42:	03 c0       	rjmp	.+6      	; 0x2b4a <nrk_print_readyQ+0x10>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2b44:	03 80       	ldd	r0, Z+3	; 0x03
    2b46:	f4 81       	ldd	r31, Z+4	; 0x04
    2b48:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2b4a:	30 97       	sbiw	r30, 0x00	; 0
    2b4c:	d9 f7       	brne	.-10     	; 0x2b44 <nrk_print_readyQ+0xa>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    2b4e:	08 95       	ret

00002b50 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    2b50:	bf 92       	push	r11
    2b52:	cf 92       	push	r12
    2b54:	df 92       	push	r13
    2b56:	ef 92       	push	r14
    2b58:	ff 92       	push	r15
    2b5a:	0f 93       	push	r16
    2b5c:	1f 93       	push	r17
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    2b62:	e0 91 75 06 	lds	r30, 0x0675
    2b66:	f0 91 76 06 	lds	r31, 0x0676
    2b6a:	30 97       	sbiw	r30, 0x00	; 0
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <nrk_add_to_readyQ+0x20>
    2b6e:	9b c0       	rjmp	.+310    	; 0x2ca6 <nrk_add_to_readyQ+0x156>
    {
        return;
    }


    NextNode = _head_node;
    2b70:	40 91 2e 07 	lds	r20, 0x072E
    2b74:	50 91 2f 07 	lds	r21, 0x072F
    CurNode = _free_node;

    if (_head_node != NULL)
    2b78:	41 15       	cp	r20, r1
    2b7a:	51 05       	cpc	r21, r1
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <nrk_add_to_readyQ+0x30>
    2b7e:	57 c0       	rjmp	.+174    	; 0x2c2e <nrk_add_to_readyQ+0xde>
    2b80:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2b82:	2b e2       	ldi	r18, 0x2B	; 43
    2b84:	30 e0       	ldi	r19, 0x00	; 0
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    2b86:	c8 2f       	mov	r28, r24
    2b88:	dd 27       	eor	r29, r29
    2b8a:	c7 fd       	sbrc	r28, 7
    2b8c:	d0 95       	com	r29
    2b8e:	c2 9f       	mul	r28, r18
    2b90:	b0 01       	movw	r22, r0
    2b92:	c3 9f       	mul	r28, r19
    2b94:	70 0d       	add	r23, r0
    2b96:	d2 9f       	mul	r29, r18
    2b98:	70 0d       	add	r23, r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	69 58       	subi	r22, 0x89	; 137
    2b9e:	79 4f       	sbci	r23, 0xF9	; 249
    2ba0:	8b 01       	movw	r16, r22
    2ba2:	06 5f       	subi	r16, 0xF6	; 246
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2ba6:	94 e0       	ldi	r25, 0x04	; 4
    2ba8:	e9 2e       	mov	r14, r25
    2baa:	f1 2c       	mov	r15, r1
    2bac:	e6 0e       	add	r14, r22
    2bae:	f7 1e       	adc	r15, r23
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    2bb0:	9b e0       	ldi	r25, 0x0B	; 11
    2bb2:	c9 2e       	mov	r12, r25
    2bb4:	d1 2c       	mov	r13, r1
    2bb6:	c6 0e       	add	r12, r22
    2bb8:	d7 1e       	adc	r13, r23
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2bba:	6c 91       	ld	r22, X
    2bbc:	70 e0       	ldi	r23, 0x00	; 0
    2bbe:	62 9f       	mul	r22, r18
    2bc0:	e0 01       	movw	r28, r0
    2bc2:	63 9f       	mul	r22, r19
    2bc4:	d0 0d       	add	r29, r0
    2bc6:	72 9f       	mul	r23, r18
    2bc8:	d0 0d       	add	r29, r0
    2bca:	11 24       	eor	r1, r1
    2bcc:	c9 58       	subi	r28, 0x89	; 137
    2bce:	d9 4f       	sbci	r29, 0xF9	; 249
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	99 23       	and	r25, r25
    2bd4:	29 f0       	breq	.+10     	; 0x2be0 <nrk_add_to_readyQ+0x90>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    2bd6:	bb 84       	ldd	r11, Y+11	; 0x0b
    2bd8:	e8 01       	movw	r28, r16
    2bda:	98 81       	ld	r25, Y
    2bdc:	b9 16       	cp	r11, r25
    2bde:	48 f1       	brcs	.+82     	; 0x2c32 <nrk_add_to_readyQ+0xe2>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2be0:	e7 01       	movw	r28, r14
    2be2:	98 81       	ld	r25, Y
    2be4:	99 23       	and	r25, r25
    2be6:	71 f0       	breq	.+28     	; 0x2c04 <nrk_add_to_readyQ+0xb4>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2be8:	62 9f       	mul	r22, r18
    2bea:	e0 01       	movw	r28, r0
    2bec:	63 9f       	mul	r22, r19
    2bee:	d0 0d       	add	r29, r0
    2bf0:	72 9f       	mul	r23, r18
    2bf2:	d0 0d       	add	r29, r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	c9 58       	subi	r28, 0x89	; 137
    2bf8:	d9 4f       	sbci	r29, 0xF9	; 249
    2bfa:	ba 84       	ldd	r11, Y+10	; 0x0a
    2bfc:	e6 01       	movw	r28, r12
    2bfe:	98 81       	ld	r25, Y
    2c00:	b9 16       	cp	r11, r25
    2c02:	b8 f0       	brcs	.+46     	; 0x2c32 <nrk_add_to_readyQ+0xe2>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2c04:	62 9f       	mul	r22, r18
    2c06:	e0 01       	movw	r28, r0
    2c08:	63 9f       	mul	r22, r19
    2c0a:	d0 0d       	add	r29, r0
    2c0c:	72 9f       	mul	r23, r18
    2c0e:	d0 0d       	add	r29, r0
    2c10:	11 24       	eor	r1, r1
    2c12:	c9 58       	subi	r28, 0x89	; 137
    2c14:	d9 4f       	sbci	r29, 0xF9	; 249
    2c16:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c18:	e8 01       	movw	r28, r16
    2c1a:	98 81       	ld	r25, Y
    2c1c:	69 17       	cp	r22, r25
    2c1e:	48 f0       	brcs	.+18     	; 0x2c32 <nrk_add_to_readyQ+0xe2>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    2c20:	13 96       	adiw	r26, 0x03	; 3
    2c22:	0d 90       	ld	r0, X+
    2c24:	bc 91       	ld	r27, X
    2c26:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    2c28:	10 97       	sbiw	r26, 0x00	; 0
    2c2a:	39 f6       	brne	.-114    	; 0x2bba <nrk_add_to_readyQ+0x6a>
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <nrk_add_to_readyQ+0xe2>


    NextNode = _head_node;
    CurNode = _free_node;

    if (_head_node != NULL)
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2c32:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    2c34:	c3 81       	ldd	r28, Z+3	; 0x03
    2c36:	d4 81       	ldd	r29, Z+4	; 0x04
    2c38:	d0 93 76 06 	sts	0x0676, r29
    2c3c:	c0 93 75 06 	sts	0x0675, r28

    if (NextNode == _head_node)
    2c40:	a4 17       	cp	r26, r20
    2c42:	b5 07       	cpc	r27, r21
    2c44:	b1 f4       	brne	.+44     	; 0x2c72 <nrk_add_to_readyQ+0x122>
    {
        //at start
        if (_head_node != NULL)
    2c46:	10 97       	sbiw	r26, 0x00	; 0
    2c48:	49 f0       	breq	.+18     	; 0x2c5c <nrk_add_to_readyQ+0x10c>
        {
            CurNode->Next = _head_node;
    2c4a:	b4 83       	std	Z+4, r27	; 0x04
    2c4c:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2c4e:	12 82       	std	Z+2, r1	; 0x02
    2c50:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2c52:	12 96       	adiw	r26, 0x02	; 2
    2c54:	fc 93       	st	X, r31
    2c56:	ee 93       	st	-X, r30
    2c58:	11 97       	sbiw	r26, 0x01	; 1
    2c5a:	06 c0       	rjmp	.+12     	; 0x2c68 <nrk_add_to_readyQ+0x118>
        }
        else
        {
            CurNode->Next = NULL;
    2c5c:	14 82       	std	Z+4, r1	; 0x04
    2c5e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2c60:	12 82       	std	Z+2, r1	; 0x02
    2c62:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    2c64:	fa 83       	std	Y+2, r31	; 0x02
    2c66:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2c68:	f0 93 2f 07 	sts	0x072F, r31
    2c6c:	e0 93 2e 07 	sts	0x072E, r30
    2c70:	1a c0       	rjmp	.+52     	; 0x2ca6 <nrk_add_to_readyQ+0x156>
    2c72:	11 96       	adiw	r26, 0x01	; 1
    2c74:	8d 91       	ld	r24, X+
    2c76:	9c 91       	ld	r25, X
    2c78:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2c7a:	ac 17       	cp	r26, r28
    2c7c:	bd 07       	cpc	r27, r29
    2c7e:	59 f0       	breq	.+22     	; 0x2c96 <nrk_add_to_readyQ+0x146>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2c80:	92 83       	std	Z+2, r25	; 0x02
    2c82:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    2c84:	b4 83       	std	Z+4, r27	; 0x04
    2c86:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2c88:	11 96       	adiw	r26, 0x01	; 1
    2c8a:	cd 91       	ld	r28, X+
    2c8c:	dc 91       	ld	r29, X
    2c8e:	12 97       	sbiw	r26, 0x02	; 2
    2c90:	fc 83       	std	Y+4, r31	; 0x04
    2c92:	eb 83       	std	Y+3, r30	; 0x03
    2c94:	04 c0       	rjmp	.+8      	; 0x2c9e <nrk_add_to_readyQ+0x14e>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    2c96:	14 82       	std	Z+4, r1	; 0x04
    2c98:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    2c9a:	92 83       	std	Z+2, r25	; 0x02
    2c9c:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2c9e:	12 96       	adiw	r26, 0x02	; 2
    2ca0:	fc 93       	st	X, r31
    2ca2:	ee 93       	st	-X, r30
    2ca4:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	1f 91       	pop	r17
    2cac:	0f 91       	pop	r16
    2cae:	ff 90       	pop	r15
    2cb0:	ef 90       	pop	r14
    2cb2:	df 90       	pop	r13
    2cb4:	cf 90       	pop	r12
    2cb6:	bf 90       	pop	r11
    2cb8:	08 95       	ret

00002cba <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    2cbe:	e0 91 2e 07 	lds	r30, 0x072E
    2cc2:	f0 91 2f 07 	lds	r31, 0x072F
    2cc6:	30 97       	sbiw	r30, 0x00	; 0
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <nrk_rem_from_readyQ+0x12>
    2cca:	44 c0       	rjmp	.+136    	; 0x2d54 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    2ccc:	99 27       	eor	r25, r25
    2cce:	87 fd       	sbrc	r24, 7
    2cd0:	90 95       	com	r25
    2cd2:	20 81       	ld	r18, Z
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	28 17       	cp	r18, r24
    2cd8:	39 07       	cpc	r19, r25
    2cda:	81 f4       	brne	.+32     	; 0x2cfc <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    2cdc:	a3 81       	ldd	r26, Z+3	; 0x03
    2cde:	b4 81       	ldd	r27, Z+4	; 0x04
    2ce0:	b0 93 2f 07 	sts	0x072F, r27
    2ce4:	a0 93 2e 07 	sts	0x072E, r26
        _head_node->Prev = NULL;
    2ce8:	12 96       	adiw	r26, 0x02	; 2
    2cea:	1c 92       	st	X, r1
    2cec:	1e 92       	st	-X, r1
    2cee:	11 97       	sbiw	r26, 0x01	; 1
    2cf0:	18 c0       	rjmp	.+48     	; 0x2d22 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    2cf2:	03 80       	ldd	r0, Z+3	; 0x03
    2cf4:	f4 81       	ldd	r31, Z+4	; 0x04
    2cf6:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    2cf8:	30 97       	sbiw	r30, 0x00	; 0
    2cfa:	61 f1       	breq	.+88     	; 0x2d54 <nrk_rem_from_readyQ+0x9a>
    2cfc:	20 81       	ld	r18, Z
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	28 17       	cp	r18, r24
    2d02:	39 07       	cpc	r19, r25
    2d04:	b1 f7       	brne	.-20     	; 0x2cf2 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2d06:	c1 81       	ldd	r28, Z+1	; 0x01
    2d08:	d2 81       	ldd	r29, Z+2	; 0x02
    2d0a:	83 81       	ldd	r24, Z+3	; 0x03
    2d0c:	94 81       	ldd	r25, Z+4	; 0x04
    2d0e:	9c 83       	std	Y+4, r25	; 0x04
    2d10:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2d12:	a3 81       	ldd	r26, Z+3	; 0x03
    2d14:	b4 81       	ldd	r27, Z+4	; 0x04
    2d16:	10 97       	sbiw	r26, 0x00	; 0
    2d18:	21 f0       	breq	.+8      	; 0x2d22 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2d1a:	12 96       	adiw	r26, 0x02	; 2
    2d1c:	dc 93       	st	X, r29
    2d1e:	ce 93       	st	-X, r28
    2d20:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2d22:	a0 91 75 06 	lds	r26, 0x0675
    2d26:	b0 91 76 06 	lds	r27, 0x0676
    2d2a:	10 97       	sbiw	r26, 0x00	; 0
    2d2c:	39 f4       	brne	.+14     	; 0x2d3c <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2d2e:	f0 93 76 06 	sts	0x0676, r31
    2d32:	e0 93 75 06 	sts	0x0675, r30
        _free_node->Next = NULL;
    2d36:	14 82       	std	Z+4, r1	; 0x04
    2d38:	13 82       	std	Z+3, r1	; 0x03
    2d3a:	0a c0       	rjmp	.+20     	; 0x2d50 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2d3c:	b4 83       	std	Z+4, r27	; 0x04
    2d3e:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2d40:	12 96       	adiw	r26, 0x02	; 2
    2d42:	fc 93       	st	X, r31
    2d44:	ee 93       	st	-X, r30
    2d46:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2d48:	f0 93 76 06 	sts	0x0676, r31
    2d4c:	e0 93 75 06 	sts	0x0675, r30
    }
    _free_node->Prev = NULL;
    2d50:	12 82       	std	Z+2, r1	; 0x02
    2d52:	11 82       	std	Z+1, r1	; 0x01
}
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2d68:	69 81       	ldd	r22, Y+1	; 0x01
    2d6a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d6c:	4b 81       	ldd	r20, Y+3	; 0x03
    2d6e:	5c 81       	ldd	r21, Y+4	; 0x04
    2d70:	8d 81       	ldd	r24, Y+5	; 0x05
    2d72:	9e 81       	ldd	r25, Y+6	; 0x06
    2d74:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <nrk_task_stk_init>
    2d78:	bc 01       	movw	r22, r24
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d7c:	88 23       	and	r24, r24
    2d7e:	69 f0       	breq	.+26     	; 0x2d9a <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2d80:	4b 81       	ldd	r20, Y+3	; 0x03
    2d82:	5c 81       	ldd	r21, Y+4	; 0x04
    2d84:	ce 01       	movw	r24, r28
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	00 e0       	ldi	r16, 0x00	; 0
    2d8c:	10 e0       	ldi	r17, 0x00	; 0
    2d8e:	ee 24       	eor	r14, r14
    2d90:	ff 24       	eor	r15, r15
    2d92:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2d96:	1f 82       	std	Y+7, r1	; 0x07
    2d98:	14 c0       	rjmp	.+40     	; 0x2dc2 <nrk_activate_task+0x68>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2d9a:	28 81       	ld	r18, Y
    2d9c:	33 27       	eor	r19, r19
    2d9e:	27 fd       	sbrc	r18, 7
    2da0:	30 95       	com	r19
    2da2:	8b e2       	ldi	r24, 0x2B	; 43
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	28 9f       	mul	r18, r24
    2da8:	f0 01       	movw	r30, r0
    2daa:	29 9f       	mul	r18, r25
    2dac:	f0 0d       	add	r31, r0
    2dae:	38 9f       	mul	r19, r24
    2db0:	f0 0d       	add	r31, r0
    2db2:	11 24       	eor	r1, r1
    2db4:	e9 58       	subi	r30, 0x89	; 137
    2db6:	f9 4f       	sbci	r31, 0xF9	; 249
    2db8:	81 85       	ldd	r24, Z+9	; 0x09
    2dba:	83 30       	cpi	r24, 0x03	; 3
    2dbc:	f9 f4       	brne	.+62     	; 0x2dfc <nrk_activate_task+0xa2>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2dbe:	71 83       	std	Z+1, r23	; 0x01
    2dc0:	60 83       	st	Z, r22
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2dc2:	28 81       	ld	r18, Y
    2dc4:	33 27       	eor	r19, r19
    2dc6:	27 fd       	sbrc	r18, 7
    2dc8:	30 95       	com	r19
    2dca:	8b e2       	ldi	r24, 0x2B	; 43
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	28 9f       	mul	r18, r24
    2dd0:	f0 01       	movw	r30, r0
    2dd2:	29 9f       	mul	r18, r25
    2dd4:	f0 0d       	add	r31, r0
    2dd6:	38 9f       	mul	r19, r24
    2dd8:	f0 0d       	add	r31, r0
    2dda:	11 24       	eor	r1, r1
    2ddc:	e9 58       	subi	r30, 0x89	; 137
    2dde:	f9 4f       	sbci	r31, 0xF9	; 249
    2de0:	85 89       	ldd	r24, Z+21	; 0x15
    2de2:	96 89       	ldd	r25, Z+22	; 0x16
    2de4:	a7 89       	ldd	r26, Z+23	; 0x17
    2de6:	b0 8d       	ldd	r27, Z+24	; 0x18
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	a1 05       	cpc	r26, r1
    2dec:	b1 05       	cpc	r27, r1
    2dee:	41 f4       	brne	.+16     	; 0x2e00 <nrk_activate_task+0xa6>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2df0:	82 e0       	ldi	r24, 0x02	; 2
    2df2:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2df4:	88 81       	ld	r24, Y
    2df6:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <nrk_add_to_readyQ>
    2dfa:	02 c0       	rjmp	.+4      	; 0x2e00 <nrk_activate_task+0xa6>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2dfc:	8f ef       	ldi	r24, 0xFF	; 255
    2dfe:	01 c0       	rjmp	.+2      	; 0x2e02 <nrk_activate_task+0xa8>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
}
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	08 95       	ret

00002e10 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2e10:	1f 93       	push	r17
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	28 97       	sbiw	r28, 0x08	; 8
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	29 83       	std	Y+1, r18	; 0x01
    2e28:	3a 83       	std	Y+2, r19	; 0x02
    2e2a:	4b 83       	std	Y+3, r20	; 0x03
    2e2c:	5c 83       	std	Y+4, r21	; 0x04
    2e2e:	6d 83       	std	Y+5, r22	; 0x05
    2e30:	7e 83       	std	Y+6, r23	; 0x06
    2e32:	8f 83       	std	Y+7, r24	; 0x07
    2e34:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2e36:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2e3a:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    2e3e:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2e40:	ce 01       	movw	r24, r28
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	0e 94 4e 1b 	call	0x369c	; 0x369c <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2e48:	63 30       	cpi	r22, 0x03	; 3
    2e4a:	71 05       	cpc	r23, r1
    2e4c:	80 f0       	brcs	.+32     	; 0x2e6e <nrk_set_next_wakeup+0x5e>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2e4e:	e0 91 39 07 	lds	r30, 0x0739
    2e52:	f0 91 3a 07 	lds	r31, 0x073A
    2e56:	61 0f       	add	r22, r17
    2e58:	71 1d       	adc	r23, r1
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	65 8b       	std	Z+21, r22	; 0x15
    2e60:	76 8b       	std	Z+22, r23	; 0x16
    2e62:	87 8b       	std	Z+23, r24	; 0x17
    2e64:	90 8f       	std	Z+24, r25	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2e66:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>

    return NRK_OK;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	01 c0       	rjmp	.+2      	; 0x2e70 <nrk_set_next_wakeup+0x60>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2e6e:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2e70:	28 96       	adiw	r28, 0x08	; 8
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	1f 91       	pop	r17
    2e82:	08 95       	ret

00002e84 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2e84:	0e 94 ce 22 	call	0x459c	; 0x459c <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2e88:	e0 91 39 07 	lds	r30, 0x0739
    2e8c:	f0 91 3a 07 	lds	r31, 0x073A
    2e90:	85 81       	ldd	r24, Z+5	; 0x05
    2e92:	88 23       	and	r24, r24
    2e94:	b9 f7       	brne	.-18     	; 0x2e84 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2e96:	08 95       	ret

00002e98 <nrk_wait>:
    return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    2e98:	1f 93       	push	r17
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	28 97       	sbiw	r28, 0x08	; 8
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	29 83       	std	Y+1, r18	; 0x01
    2eb0:	3a 83       	std	Y+2, r19	; 0x02
    2eb2:	4b 83       	std	Y+3, r20	; 0x03
    2eb4:	5c 83       	std	Y+4, r21	; 0x04
    2eb6:	6d 83       	std	Y+5, r22	; 0x05
    2eb8:	7e 83       	std	Y+6, r23	; 0x06
    2eba:	8f 83       	std	Y+7, r24	; 0x07
    2ebc:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2ebe:	0e 94 62 12 	call	0x24c4	; 0x24c4 <nrk_stack_check>

    nrk_int_disable ();
    2ec2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2ec6:	e0 91 39 07 	lds	r30, 0x0739
    2eca:	f0 91 3a 07 	lds	r31, 0x073A
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	92 a7       	std	Z+42, r25	; 0x2a
    2ed8:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2eda:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    2ede:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	01 96       	adiw	r24, 0x01	; 1
    2ee4:	0e 94 4e 1b 	call	0x369c	; 0x369c <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2ee8:	e0 91 39 07 	lds	r30, 0x0739
    2eec:	f0 91 3a 07 	lds	r31, 0x073A
    2ef0:	61 0f       	add	r22, r17
    2ef2:	71 1d       	adc	r23, r1
    2ef4:	81 1d       	adc	r24, r1
    2ef6:	91 1d       	adc	r25, r1
    2ef8:	65 8b       	std	Z+21, r22	; 0x15
    2efa:	76 8b       	std	Z+22, r23	; 0x16
    2efc:	87 8b       	std	Z+23, r24	; 0x17
    2efe:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2f00:	18 3f       	cpi	r17, 0xF8	; 248
    2f02:	88 f4       	brcc	.+34     	; 0x2f26 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2f04:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_nrk_get_next_wakeup>
    2f08:	21 2f       	mov	r18, r17
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	2f 5f       	subi	r18, 0xFF	; 255
    2f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f10:	48 2f       	mov	r20, r24
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	24 17       	cp	r18, r20
    2f16:	35 07       	cpc	r19, r21
    2f18:	34 f4       	brge	.+12     	; 0x2f26 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    2f1a:	81 2f       	mov	r24, r17
    2f1c:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    2f1e:	80 93 ea 05 	sts	0x05EA, r24
            _nrk_set_next_wakeup (timer);
    2f22:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2f26:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2f2a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	28 96       	adiw	r28, 0x08	; 8
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	1f 91       	pop	r17
    2f42:	08 95       	ret

00002f44 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2f44:	1f 93       	push	r17
    uint8_t timer;
    nrk_int_disable ();
    2f46:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2f4a:	e0 91 39 07 	lds	r30, 0x0739
    2f4e:	f0 91 3a 07 	lds	r31, 0x073A
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2f56:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2f58:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    2f5c:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2f5e:	88 3f       	cpi	r24, 0xF8	; 248
    2f60:	88 f4       	brcc	.+34     	; 0x2f84 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2f62:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_nrk_get_next_wakeup>
    2f66:	21 2f       	mov	r18, r17
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	2f 5f       	subi	r18, 0xFF	; 255
    2f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6e:	48 2f       	mov	r20, r24
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	24 17       	cp	r18, r20
    2f74:	35 07       	cpc	r19, r21
    2f76:	34 f4       	brge	.+12     	; 0x2f84 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    2f78:	81 2f       	mov	r24, r17
    2f7a:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    2f7c:	80 93 ea 05 	sts	0x05EA, r24
            _nrk_set_next_wakeup (timer);
    2f80:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2f84:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2f88:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	1f 91       	pop	r17
    2f90:	08 95       	ret

00002f92 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2f9a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2f9e:	e0 91 39 07 	lds	r30, 0x0739
    2fa2:	f0 91 3a 07 	lds	r31, 0x073A
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2faa:	ce 01       	movw	r24, r28
    2fac:	a0 e0       	ldi	r26, 0x00	; 0
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	85 8b       	std	Z+21, r24	; 0x15
    2fb2:	96 8b       	std	Z+22, r25	; 0x16
    2fb4:	a7 8b       	std	Z+23, r26	; 0x17
    2fb6:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2fb8:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    2fbc:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2fbe:	88 3f       	cpi	r24, 0xF8	; 248
    2fc0:	88 f4       	brcc	.+34     	; 0x2fe4 <nrk_wait_until_ticks+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2fc2:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_nrk_get_next_wakeup>
    2fc6:	21 2f       	mov	r18, r17
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	2f 5f       	subi	r18, 0xFF	; 255
    2fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fce:	48 2f       	mov	r20, r24
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	24 17       	cp	r18, r20
    2fd4:	35 07       	cpc	r19, r21
    2fd6:	34 f4       	brge	.+12     	; 0x2fe4 <nrk_wait_until_ticks+0x52>
        {
            timer += TIME_PAD;
    2fd8:	81 2f       	mov	r24, r17
    2fda:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    2fdc:	80 93 ea 05 	sts	0x05EA, r24
            _nrk_set_next_wakeup (timer);
    2fe0:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2fe4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2fe8:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	1f 91       	pop	r17
    2ff4:	08 95       	ret

00002ff6 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	df 93       	push	r29
    3000:	cf 93       	push	r28
    3002:	0f 92       	push	r0
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    300a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    300e:	e0 91 39 07 	lds	r30, 0x0739
    3012:	f0 91 3a 07 	lds	r31, 0x073A
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    301a:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    301e:	e0 91 39 07 	lds	r30, 0x0739
    3022:	f0 91 3a 07 	lds	r31, 0x073A
    3026:	e8 2e       	mov	r14, r24
    3028:	ff 24       	eor	r15, r15
    302a:	0e 0d       	add	r16, r14
    302c:	1f 1d       	adc	r17, r15
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	05 8b       	std	Z+21, r16	; 0x15
    3034:	16 8b       	std	Z+22, r17	; 0x16
    3036:	27 8b       	std	Z+23, r18	; 0x17
    3038:	30 8f       	std	Z+24, r19	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    303a:	88 3f       	cpi	r24, 0xF8	; 248
    303c:	90 f4       	brcc	.+36     	; 0x3062 <nrk_wait_ticks+0x6c>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    303e:	89 83       	std	Y+1, r24	; 0x01
    3040:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_nrk_get_next_wakeup>
    3044:	08 94       	sec
    3046:	e1 1c       	adc	r14, r1
    3048:	f1 1c       	adc	r15, r1
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	99 81       	ldd	r25, Y+1	; 0x01
    3050:	e2 16       	cp	r14, r18
    3052:	f3 06       	cpc	r15, r19
    3054:	34 f4       	brge	.+12     	; 0x3062 <nrk_wait_ticks+0x6c>
        {
            timer += TIME_PAD;
    3056:	89 2f       	mov	r24, r25
    3058:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    305a:	80 93 ea 05 	sts	0x05EA, r24
            _nrk_set_next_wakeup (timer);
    305e:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3062:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3066:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	0f 90       	pop	r0
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	1f 91       	pop	r17
    3074:	0f 91       	pop	r16
    3076:	ff 90       	pop	r15
    3078:	ef 90       	pop	r14
    307a:	08 95       	ret

0000307c <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3084:	0e 94 62 12 	call	0x24c4	; 0x24c4 <nrk_stack_check>

    if (p == 0)
    3088:	20 97       	sbiw	r28, 0x00	; 0
    308a:	11 f4       	brne	.+4      	; 0x3090 <nrk_wait_until_next_n_periods+0x14>
        p = 1;
    308c:	c1 e0       	ldi	r28, 0x01	; 1
    308e:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3090:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3094:	e0 91 39 07 	lds	r30, 0x0739
    3098:	f0 91 3a 07 	lds	r31, 0x073A
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    30a0:	d2 a7       	std	Z+42, r29	; 0x2a
    30a2:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    30a4:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    30a8:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    30aa:	88 3f       	cpi	r24, 0xF8	; 248
    30ac:	88 f4       	brcc	.+34     	; 0x30d0 <nrk_wait_until_next_n_periods+0x54>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    30ae:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_nrk_get_next_wakeup>
    30b2:	21 2f       	mov	r18, r17
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	48 2f       	mov	r20, r24
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	24 17       	cp	r18, r20
    30c0:	35 07       	cpc	r19, r21
    30c2:	34 f4       	brge	.+12     	; 0x30d0 <nrk_wait_until_next_n_periods+0x54>
        {
            timer += TIME_PAD;
    30c4:	81 2f       	mov	r24, r17
    30c6:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    30c8:	80 93 ea 05 	sts	0x05EA, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    30cc:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    30d0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    30d4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	08 95       	ret

000030e2 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    30e2:	1f 93       	push	r17
    uint8_t timer;

    nrk_stack_check ();
    30e4:	0e 94 62 12 	call	0x24c4	; 0x24c4 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    30e8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    30ec:	e0 91 39 07 	lds	r30, 0x0739
    30f0:	f0 91 3a 07 	lds	r31, 0x073A
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	92 a7       	std	Z+42, r25	; 0x2a
    30fa:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3100:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    3104:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3106:	88 3f       	cpi	r24, 0xF8	; 248
    3108:	88 f4       	brcc	.+34     	; 0x312c <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    310a:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_nrk_get_next_wakeup>
    310e:	21 2f       	mov	r18, r17
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	2f 5f       	subi	r18, 0xFF	; 255
    3114:	3f 4f       	sbci	r19, 0xFF	; 255
    3116:	48 2f       	mov	r20, r24
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	24 17       	cp	r18, r20
    311c:	35 07       	cpc	r19, r21
    311e:	34 f4       	brge	.+12     	; 0x312c <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    3120:	81 2f       	mov	r24, r17
    3122:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    3124:	80 93 ea 05 	sts	0x05EA, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3128:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    312c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3130:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	1f 91       	pop	r17
    3138:	08 95       	ret

0000313a <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    313a:	e0 91 39 07 	lds	r30, 0x0739
    313e:	f0 91 3a 07 	lds	r31, 0x073A
    3142:	80 85       	ldd	r24, Z+8	; 0x08
    3144:	0e 94 5d 16 	call	0x2cba	; 0x2cba <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    3148:	e0 91 39 07 	lds	r30, 0x0739
    314c:	f0 91 3a 07 	lds	r31, 0x073A
    3150:	84 e0       	ldi	r24, 0x04	; 4
    3152:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    3154:	0e 94 71 18 	call	0x30e2	; 0x30e2 <nrk_wait_until_next_period>
    return NRK_OK;
}
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	08 95       	ret

0000315c <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    315c:	8f 92       	push	r8
    315e:	9f 92       	push	r9
    3160:	af 92       	push	r10
    3162:	bf 92       	push	r11
    3164:	cf 92       	push	r12
    3166:	df 92       	push	r13
    3168:	ef 92       	push	r14
    316a:	ff 92       	push	r15
    316c:	0f 93       	push	r16
    316e:	1f 93       	push	r17
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	60 97       	sbiw	r28, 0x10	; 16
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	29 87       	std	Y+9, r18	; 0x09
    3186:	3a 87       	std	Y+10, r19	; 0x0a
    3188:	4b 87       	std	Y+11, r20	; 0x0b
    318a:	5c 87       	std	Y+12, r21	; 0x0c
    318c:	6d 87       	std	Y+13, r22	; 0x0d
    318e:	7e 87       	std	Y+14, r23	; 0x0e
    3190:	8f 87       	std	Y+15, r24	; 0x0f
    3192:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3194:	ce 01       	movw	r24, r28
    3196:	01 96       	adiw	r24, 0x01	; 1
    3198:	0e 94 0a 19 	call	0x3214	; 0x3214 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    319c:	ce 01       	movw	r24, r28
    319e:	09 96       	adiw	r24, 0x09	; 9
    31a0:	09 85       	ldd	r16, Y+9	; 0x09
    31a2:	1a 85       	ldd	r17, Y+10	; 0x0a
    31a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    31a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    31a8:	4d 85       	ldd	r20, Y+13	; 0x0d
    31aa:	5e 85       	ldd	r21, Y+14	; 0x0e
    31ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    31ae:	78 89       	ldd	r23, Y+16	; 0x10
    31b0:	89 80       	ldd	r8, Y+1	; 0x01
    31b2:	9a 80       	ldd	r9, Y+2	; 0x02
    31b4:	ab 80       	ldd	r10, Y+3	; 0x03
    31b6:	bc 80       	ldd	r11, Y+4	; 0x04
    31b8:	cd 80       	ldd	r12, Y+5	; 0x05
    31ba:	de 80       	ldd	r13, Y+6	; 0x06
    31bc:	ef 80       	ldd	r14, Y+7	; 0x07
    31be:	f8 84       	ldd	r15, Y+8	; 0x08
    31c0:	0e 94 68 19 	call	0x32d0	; 0x32d0 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    31c4:	8f 3f       	cpi	r24, 0xFF	; 255
    31c6:	61 f0       	breq	.+24     	; 0x31e0 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    31c8:	29 85       	ldd	r18, Y+9	; 0x09
    31ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    31cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    31ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    31d0:	6d 85       	ldd	r22, Y+13	; 0x0d
    31d2:	7e 85       	ldd	r23, Y+14	; 0x0e
    31d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d6:	98 89       	ldd	r25, Y+16	; 0x10
    31d8:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <nrk_wait>

    return NRK_OK;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	01 c0       	rjmp	.+2      	; 0x31e2 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    31e0:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    31e2:	60 96       	adiw	r28, 0x10	; 16
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	1f 91       	pop	r17
    31f4:	0f 91       	pop	r16
    31f6:	ff 90       	pop	r15
    31f8:	ef 90       	pop	r14
    31fa:	df 90       	pop	r13
    31fc:	cf 90       	pop	r12
    31fe:	bf 90       	pop	r11
    3200:	af 90       	pop	r10
    3202:	9f 90       	pop	r9
    3204:	8f 90       	pop	r8
    3206:	08 95       	ret

00003208 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3208:	e0 91 39 07 	lds	r30, 0x0739
    320c:	f0 91 3a 07 	lds	r31, 0x073A
}
    3210:	80 85       	ldd	r24, Z+8	; 0x08
    3212:	08 95       	ret

00003214 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    3214:	ef 92       	push	r14
    3216:	ff 92       	push	r15
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3222:	1c 82       	std	Y+4, r1	; 0x04
    3224:	1d 82       	std	Y+5, r1	; 0x05
    3226:	1e 82       	std	Y+6, r1	; 0x06
    3228:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    322a:	80 91 30 07 	lds	r24, 0x0730
    322e:	90 91 31 07 	lds	r25, 0x0731
    3232:	a0 91 32 07 	lds	r26, 0x0732
    3236:	b0 91 33 07 	lds	r27, 0x0733
    323a:	88 83       	st	Y, r24
    323c:	99 83       	std	Y+1, r25	; 0x01
    323e:	aa 83       	std	Y+2, r26	; 0x02
    3240:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3242:	e0 90 34 07 	lds	r14, 0x0734
    3246:	f0 90 35 07 	lds	r15, 0x0735
    324a:	00 91 36 07 	lds	r16, 0x0736
    324e:	10 91 37 07 	lds	r17, 0x0737
    3252:	ec 82       	std	Y+4, r14	; 0x04
    3254:	fd 82       	std	Y+5, r15	; 0x05
    3256:	0e 83       	std	Y+6, r16	; 0x06
    3258:	1f 83       	std	Y+7, r17	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    325a:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    325e:	68 2f       	mov	r22, r24
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	23 eb       	ldi	r18, 0xB3	; 179
    3268:	36 ee       	ldi	r19, 0xE6	; 230
    326a:	4e e0       	ldi	r20, 0x0E	; 14
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    3272:	6e 0d       	add	r22, r14
    3274:	7f 1d       	adc	r23, r15
    3276:	80 1f       	adc	r24, r16
    3278:	91 1f       	adc	r25, r17
    327a:	6c 83       	std	Y+4, r22	; 0x04
    327c:	7d 83       	std	Y+5, r23	; 0x05
    327e:	8e 83       	std	Y+6, r24	; 0x06
    3280:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3282:	13 c0       	rjmp	.+38     	; 0x32aa <nrk_time_get+0x96>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3284:	80 50       	subi	r24, 0x00	; 0
    3286:	9a 4c       	sbci	r25, 0xCA	; 202
    3288:	aa 49       	sbci	r26, 0x9A	; 154
    328a:	bb 43       	sbci	r27, 0x3B	; 59
    328c:	8c 83       	std	Y+4, r24	; 0x04
    328e:	9d 83       	std	Y+5, r25	; 0x05
    3290:	ae 83       	std	Y+6, r26	; 0x06
    3292:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3294:	88 81       	ld	r24, Y
    3296:	99 81       	ldd	r25, Y+1	; 0x01
    3298:	aa 81       	ldd	r26, Y+2	; 0x02
    329a:	bb 81       	ldd	r27, Y+3	; 0x03
    329c:	01 96       	adiw	r24, 0x01	; 1
    329e:	a1 1d       	adc	r26, r1
    32a0:	b1 1d       	adc	r27, r1
    32a2:	88 83       	st	Y, r24
    32a4:	99 83       	std	Y+1, r25	; 0x01
    32a6:	aa 83       	std	Y+2, r26	; 0x02
    32a8:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    32aa:	8c 81       	ldd	r24, Y+4	; 0x04
    32ac:	9d 81       	ldd	r25, Y+5	; 0x05
    32ae:	ae 81       	ldd	r26, Y+6	; 0x06
    32b0:	bf 81       	ldd	r27, Y+7	; 0x07
    32b2:	80 30       	cpi	r24, 0x00	; 0
    32b4:	2a ec       	ldi	r18, 0xCA	; 202
    32b6:	92 07       	cpc	r25, r18
    32b8:	2a e9       	ldi	r18, 0x9A	; 154
    32ba:	a2 07       	cpc	r26, r18
    32bc:	2b e3       	ldi	r18, 0x3B	; 59
    32be:	b2 07       	cpc	r27, r18
    32c0:	08 f7       	brcc	.-62     	; 0x3284 <nrk_time_get+0x70>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }

}
    32c2:	df 91       	pop	r29
    32c4:	cf 91       	pop	r28
    32c6:	1f 91       	pop	r17
    32c8:	0f 91       	pop	r16
    32ca:	ff 90       	pop	r15
    32cc:	ef 90       	pop	r14
    32ce:	08 95       	ret

000032d0 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    32d0:	8f 92       	push	r8
    32d2:	9f 92       	push	r9
    32d4:	af 92       	push	r10
    32d6:	bf 92       	push	r11
    32d8:	cf 92       	push	r12
    32da:	df 92       	push	r13
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	df 93       	push	r29
    32e6:	cf 93       	push	r28
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	60 97       	sbiw	r28, 0x10	; 16
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	fc 01       	movw	r30, r24
    32fa:	09 83       	std	Y+1, r16	; 0x01
    32fc:	1a 83       	std	Y+2, r17	; 0x02
    32fe:	2b 83       	std	Y+3, r18	; 0x03
    3300:	3c 83       	std	Y+4, r19	; 0x04
    3302:	4d 83       	std	Y+5, r20	; 0x05
    3304:	5e 83       	std	Y+6, r21	; 0x06
    3306:	6f 83       	std	Y+7, r22	; 0x07
    3308:	78 87       	std	Y+8, r23	; 0x08
    330a:	89 86       	std	Y+9, r8	; 0x09
    330c:	9a 86       	std	Y+10, r9	; 0x0a
    330e:	ab 86       	std	Y+11, r10	; 0x0b
    3310:	bc 86       	std	Y+12, r11	; 0x0c
    3312:	cd 86       	std	Y+13, r12	; 0x0d
    3314:	de 86       	std	Y+14, r13	; 0x0e
    3316:	ef 86       	std	Y+15, r14	; 0x0f
    3318:	f8 8a       	std	Y+16, r15	; 0x10
	return NRK_OK;
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
    331a:	e9 80       	ldd	r14, Y+1	; 0x01
    331c:	fa 80       	ldd	r15, Y+2	; 0x02
    331e:	0b 81       	ldd	r16, Y+3	; 0x03
    3320:	1c 81       	ldd	r17, Y+4	; 0x04
    3322:	2d 81       	ldd	r18, Y+5	; 0x05
    3324:	3e 81       	ldd	r19, Y+6	; 0x06
    3326:	4f 81       	ldd	r20, Y+7	; 0x07
    3328:	58 85       	ldd	r21, Y+8	; 0x08
    332a:	a9 84       	ldd	r10, Y+9	; 0x09
    332c:	ba 84       	ldd	r11, Y+10	; 0x0a
    332e:	cb 84       	ldd	r12, Y+11	; 0x0b
    3330:	dc 84       	ldd	r13, Y+12	; 0x0c
    3332:	8d 85       	ldd	r24, Y+13	; 0x0d
    3334:	9e 85       	ldd	r25, Y+14	; 0x0e
    3336:	af 85       	ldd	r26, Y+15	; 0x0f
    3338:	b8 89       	ldd	r27, Y+16	; 0x10
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    333a:	ea 14       	cp	r14, r10
    333c:	fb 04       	cpc	r15, r11
    333e:	0c 05       	cpc	r16, r12
    3340:	1d 05       	cpc	r17, r13
    3342:	08 f4       	brcc	.+2      	; 0x3346 <nrk_time_sub+0x76>
    3344:	40 c0       	rjmp	.+128    	; 0x33c6 <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    3346:	ae 14       	cp	r10, r14
    3348:	bf 04       	cpc	r11, r15
    334a:	c0 06       	cpc	r12, r16
    334c:	d1 06       	cpc	r13, r17
    334e:	91 f4       	brne	.+36     	; 0x3374 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3350:	28 17       	cp	r18, r24
    3352:	39 07       	cpc	r19, r25
    3354:	4a 07       	cpc	r20, r26
    3356:	5b 07       	cpc	r21, r27
    3358:	b0 f1       	brcs	.+108    	; 0x33c6 <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    335a:	28 1b       	sub	r18, r24
    335c:	39 0b       	sbc	r19, r25
    335e:	4a 0b       	sbc	r20, r26
    3360:	5b 0b       	sbc	r21, r27
    3362:	24 83       	std	Z+4, r18	; 0x04
    3364:	35 83       	std	Z+5, r19	; 0x05
    3366:	46 83       	std	Z+6, r20	; 0x06
    3368:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    336a:	10 82       	st	Z, r1
    336c:	11 82       	std	Z+1, r1	; 0x01
    336e:	12 82       	std	Z+2, r1	; 0x02
    3370:	13 82       	std	Z+3, r1	; 0x03
    3372:	27 c0       	rjmp	.+78     	; 0x33c2 <nrk_time_sub+0xf2>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3374:	28 17       	cp	r18, r24
    3376:	39 07       	cpc	r19, r25
    3378:	4a 07       	cpc	r20, r26
    337a:	5b 07       	cpc	r21, r27
    337c:	90 f4       	brcc	.+36     	; 0x33a2 <nrk_time_sub+0xd2>
{
	high.secs--;
    337e:	08 94       	sec
    3380:	e1 08       	sbc	r14, r1
    3382:	f1 08       	sbc	r15, r1
    3384:	01 09       	sbc	r16, r1
    3386:	11 09       	sbc	r17, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3388:	ea 18       	sub	r14, r10
    338a:	fb 08       	sbc	r15, r11
    338c:	0c 09       	sbc	r16, r12
    338e:	1d 09       	sbc	r17, r13
    3390:	e0 82       	st	Z, r14
    3392:	f1 82       	std	Z+1, r15	; 0x01
    3394:	02 83       	std	Z+2, r16	; 0x02
    3396:	13 83       	std	Z+3, r17	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3398:	20 50       	subi	r18, 0x00	; 0
    339a:	36 43       	sbci	r19, 0x36	; 54
    339c:	45 46       	sbci	r20, 0x65	; 101
    339e:	54 4c       	sbci	r21, 0xC4	; 196
    33a0:	08 c0       	rjmp	.+16     	; 0x33b2 <nrk_time_sub+0xe2>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    33a2:	ea 18       	sub	r14, r10
    33a4:	fb 08       	sbc	r15, r11
    33a6:	0c 09       	sbc	r16, r12
    33a8:	1d 09       	sbc	r17, r13
    33aa:	e0 82       	st	Z, r14
    33ac:	f1 82       	std	Z+1, r15	; 0x01
    33ae:	02 83       	std	Z+2, r16	; 0x02
    33b0:	13 83       	std	Z+3, r17	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    33b2:	28 1b       	sub	r18, r24
    33b4:	39 0b       	sbc	r19, r25
    33b6:	4a 0b       	sbc	r20, r26
    33b8:	5b 0b       	sbc	r21, r27
    33ba:	24 83       	std	Z+4, r18	; 0x04
    33bc:	35 83       	std	Z+5, r19	; 0x05
    33be:	46 83       	std	Z+6, r20	; 0x06
    33c0:	57 83       	std	Z+7, r21	; 0x07
return NRK_OK;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	01 c0       	rjmp	.+2      	; 0x33c8 <nrk_time_sub+0xf8>
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
if(low.secs==high.secs)
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    33c6:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    33c8:	60 96       	adiw	r28, 0x10	; 16
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ff 90       	pop	r15
    33de:	ef 90       	pop	r14
    33e0:	df 90       	pop	r13
    33e2:	cf 90       	pop	r12
    33e4:	bf 90       	pop	r11
    33e6:	af 90       	pop	r10
    33e8:	9f 90       	pop	r9
    33ea:	8f 90       	pop	r8
    33ec:	08 95       	ret

000033ee <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    33ee:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    33f0:	14 c0       	rjmp	.+40     	; 0x341a <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    33f2:	20 50       	subi	r18, 0x00	; 0
    33f4:	3a 4c       	sbci	r19, 0xCA	; 202
    33f6:	4a 49       	sbci	r20, 0x9A	; 154
    33f8:	5b 43       	sbci	r21, 0x3B	; 59
    33fa:	24 83       	std	Z+4, r18	; 0x04
    33fc:	35 83       	std	Z+5, r19	; 0x05
    33fe:	46 83       	std	Z+6, r20	; 0x06
    3400:	57 83       	std	Z+7, r21	; 0x07
    t->secs++;
    3402:	20 81       	ld	r18, Z
    3404:	31 81       	ldd	r19, Z+1	; 0x01
    3406:	42 81       	ldd	r20, Z+2	; 0x02
    3408:	53 81       	ldd	r21, Z+3	; 0x03
    340a:	2f 5f       	subi	r18, 0xFF	; 255
    340c:	3f 4f       	sbci	r19, 0xFF	; 255
    340e:	4f 4f       	sbci	r20, 0xFF	; 255
    3410:	5f 4f       	sbci	r21, 0xFF	; 255
    3412:	20 83       	st	Z, r18
    3414:	31 83       	std	Z+1, r19	; 0x01
    3416:	42 83       	std	Z+2, r20	; 0x02
    3418:	53 83       	std	Z+3, r21	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    341a:	24 81       	ldd	r18, Z+4	; 0x04
    341c:	35 81       	ldd	r19, Z+5	; 0x05
    341e:	46 81       	ldd	r20, Z+6	; 0x06
    3420:	57 81       	ldd	r21, Z+7	; 0x07
    3422:	20 30       	cpi	r18, 0x00	; 0
    3424:	8a ec       	ldi	r24, 0xCA	; 202
    3426:	38 07       	cpc	r19, r24
    3428:	8a e9       	ldi	r24, 0x9A	; 154
    342a:	48 07       	cpc	r20, r24
    342c:	8b e3       	ldi	r24, 0x3B	; 59
    342e:	58 07       	cpc	r21, r24
    3430:	00 f7       	brcc	.-64     	; 0x33f2 <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    3432:	08 95       	ret

00003434 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3434:	8f 92       	push	r8
    3436:	9f 92       	push	r9
    3438:	af 92       	push	r10
    343a:	bf 92       	push	r11
    343c:	cf 92       	push	r12
    343e:	df 92       	push	r13
    3440:	ef 92       	push	r14
    3442:	ff 92       	push	r15
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	60 97       	sbiw	r28, 0x10	; 16
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	09 83       	std	Y+1, r16	; 0x01
    345e:	1a 83       	std	Y+2, r17	; 0x02
    3460:	2b 83       	std	Y+3, r18	; 0x03
    3462:	3c 83       	std	Y+4, r19	; 0x04
    3464:	4d 83       	std	Y+5, r20	; 0x05
    3466:	5e 83       	std	Y+6, r21	; 0x06
    3468:	6f 83       	std	Y+7, r22	; 0x07
    346a:	78 87       	std	Y+8, r23	; 0x08
    346c:	89 86       	std	Y+9, r8	; 0x09
    346e:	9a 86       	std	Y+10, r9	; 0x0a
    3470:	ab 86       	std	Y+11, r10	; 0x0b
    3472:	bc 86       	std	Y+12, r11	; 0x0c
    3474:	cd 86       	std	Y+13, r12	; 0x0d
    3476:	de 86       	std	Y+14, r13	; 0x0e
    3478:	ef 86       	std	Y+15, r14	; 0x0f
    347a:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    347c:	29 85       	ldd	r18, Y+9	; 0x09
    347e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3480:	4b 85       	ldd	r20, Y+11	; 0x0b
    3482:	5c 85       	ldd	r21, Y+12	; 0x0c
    3484:	e9 80       	ldd	r14, Y+1	; 0x01
    3486:	fa 80       	ldd	r15, Y+2	; 0x02
    3488:	0b 81       	ldd	r16, Y+3	; 0x03
    348a:	1c 81       	ldd	r17, Y+4	; 0x04
    348c:	2e 0d       	add	r18, r14
    348e:	3f 1d       	adc	r19, r15
    3490:	40 1f       	adc	r20, r16
    3492:	51 1f       	adc	r21, r17
    3494:	fc 01       	movw	r30, r24
    3496:	20 83       	st	Z, r18
    3498:	31 83       	std	Z+1, r19	; 0x01
    349a:	42 83       	std	Z+2, r20	; 0x02
    349c:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    349e:	2d 85       	ldd	r18, Y+13	; 0x0d
    34a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    34a2:	4f 85       	ldd	r20, Y+15	; 0x0f
    34a4:	58 89       	ldd	r21, Y+16	; 0x10
    34a6:	ed 80       	ldd	r14, Y+5	; 0x05
    34a8:	fe 80       	ldd	r15, Y+6	; 0x06
    34aa:	0f 81       	ldd	r16, Y+7	; 0x07
    34ac:	18 85       	ldd	r17, Y+8	; 0x08
    34ae:	2e 0d       	add	r18, r14
    34b0:	3f 1d       	adc	r19, r15
    34b2:	40 1f       	adc	r20, r16
    34b4:	51 1f       	adc	r21, r17
    34b6:	24 83       	std	Z+4, r18	; 0x04
    34b8:	35 83       	std	Z+5, r19	; 0x05
    34ba:	46 83       	std	Z+6, r20	; 0x06
    34bc:	57 83       	std	Z+7, r21	; 0x07
nrk_time_compact_nanos(result);
    34be:	0e 94 f7 19 	call	0x33ee	; 0x33ee <nrk_time_compact_nanos>
return NRK_OK;
}
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	60 96       	adiw	r28, 0x10	; 16
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	1f 91       	pop	r17
    34d6:	0f 91       	pop	r16
    34d8:	ff 90       	pop	r15
    34da:	ef 90       	pop	r14
    34dc:	df 90       	pop	r13
    34de:	cf 90       	pop	r12
    34e0:	bf 90       	pop	r11
    34e2:	af 90       	pop	r10
    34e4:	9f 90       	pop	r9
    34e6:	8f 90       	pop	r8
    34e8:	08 95       	ret

000034ea <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    34ea:	60 93 30 07 	sts	0x0730, r22
    34ee:	70 93 31 07 	sts	0x0731, r23
    34f2:	80 93 32 07 	sts	0x0732, r24
    34f6:	90 93 33 07 	sts	0x0733, r25
  nrk_system_time.nano_secs=nano_secs;
    34fa:	20 93 34 07 	sts	0x0734, r18
    34fe:	30 93 35 07 	sts	0x0735, r19
    3502:	40 93 36 07 	sts	0x0736, r20
    3506:	50 93 37 07 	sts	0x0737, r21
}
    350a:	08 95       	ret

0000350c <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    350c:	8f 92       	push	r8
    350e:	9f 92       	push	r9
    3510:	af 92       	push	r10
    3512:	bf 92       	push	r11
    3514:	cf 92       	push	r12
    3516:	df 92       	push	r13
    3518:	ef 92       	push	r14
    351a:	ff 92       	push	r15
    351c:	0f 93       	push	r16
    351e:	1f 93       	push	r17
    3520:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3522:	20 81       	ld	r18, Z
    3524:	31 81       	ldd	r19, Z+1	; 0x01
    3526:	42 81       	ldd	r20, Z+2	; 0x02
    3528:	53 81       	ldd	r21, Z+3	; 0x03
    352a:	64 81       	ldd	r22, Z+4	; 0x04
    352c:	75 81       	ldd	r23, Z+5	; 0x05
    352e:	86 81       	ldd	r24, Z+6	; 0x06
    3530:	97 81       	ldd	r25, Z+7	; 0x07
    3532:	21 15       	cp	r18, r1
    3534:	31 05       	cpc	r19, r1
    3536:	41 05       	cpc	r20, r1
    3538:	51 05       	cpc	r21, r1
    353a:	09 f4       	brne	.+2      	; 0x353e <_nrk_time_to_ticks+0x32>
    353c:	61 c0       	rjmp	.+194    	; 0x3600 <_nrk_time_to_ticks+0xf4>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    353e:	22 34       	cpi	r18, 0x42	; 66
    3540:	31 05       	cpc	r19, r1
    3542:	41 05       	cpc	r20, r1
    3544:	51 05       	cpc	r21, r1
    3546:	08 f0       	brcs	.+2      	; 0x354a <_nrk_time_to_ticks+0x3e>
    3548:	62 c0       	rjmp	.+196    	; 0x360e <_nrk_time_to_ticks+0x102>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    354a:	5b 01       	movw	r10, r22
    354c:	6c 01       	movw	r12, r24
    354e:	ee 24       	eor	r14, r14
    3550:	ff 24       	eor	r15, r15
    3552:	87 01       	movw	r16, r14
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	38 c0       	rjmp	.+112    	; 0x35c8 <_nrk_time_to_ticks+0xbc>
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3558:	8a 2c       	mov	r8, r10
    355a:	ab 2d       	mov	r26, r11
    355c:	a6 53       	subi	r26, 0x36	; 54
    355e:	f1 e0       	ldi	r31, 0x01	; 1
    3560:	ab 15       	cp	r26, r11
    3562:	08 f0       	brcs	.+2      	; 0x3566 <_nrk_time_to_ticks+0x5a>
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	8c 2d       	mov	r24, r12
    3568:	86 56       	subi	r24, 0x66	; 102
    356a:	91 e0       	ldi	r25, 0x01	; 1
    356c:	8c 15       	cp	r24, r12
    356e:	08 f0       	brcs	.+2      	; 0x3572 <_nrk_time_to_ticks+0x66>
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	f8 0f       	add	r31, r24
    3574:	71 e0       	ldi	r23, 0x01	; 1
    3576:	f8 17       	cp	r31, r24
    3578:	08 f0       	brcs	.+2      	; 0x357c <_nrk_time_to_ticks+0x70>
    357a:	70 e0       	ldi	r23, 0x00	; 0
    357c:	97 2b       	or	r25, r23
    357e:	7d 2d       	mov	r23, r13
    3580:	75 5c       	subi	r23, 0xC5	; 197
    3582:	e1 e0       	ldi	r30, 0x01	; 1
    3584:	7d 15       	cp	r23, r13
    3586:	08 f0       	brcs	.+2      	; 0x358a <_nrk_time_to_ticks+0x7e>
    3588:	e0 e0       	ldi	r30, 0x00	; 0
    358a:	97 0f       	add	r25, r23
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	97 17       	cp	r25, r23
    3590:	08 f0       	brcs	.+2      	; 0x3594 <_nrk_time_to_ticks+0x88>
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	8e 2b       	or	r24, r30
    3596:	8e 0d       	add	r24, r14
    3598:	e1 e0       	ldi	r30, 0x01	; 1
    359a:	8e 15       	cp	r24, r14
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <_nrk_time_to_ticks+0x94>
    359e:	e0 e0       	ldi	r30, 0x00	; 0
    35a0:	ef 0d       	add	r30, r15
    35a2:	71 e0       	ldi	r23, 0x01	; 1
    35a4:	ef 15       	cp	r30, r15
    35a6:	08 f0       	brcs	.+2      	; 0x35aa <_nrk_time_to_ticks+0x9e>
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	70 0f       	add	r23, r16
    35ac:	b1 e0       	ldi	r27, 0x01	; 1
    35ae:	70 17       	cp	r23, r16
    35b0:	08 f0       	brcs	.+2      	; 0x35b4 <_nrk_time_to_ticks+0xa8>
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	b1 0f       	add	r27, r17
    35b6:	a8 2c       	mov	r10, r8
    35b8:	ba 2e       	mov	r11, r26
    35ba:	cf 2e       	mov	r12, r31
    35bc:	d9 2e       	mov	r13, r25
    35be:	e8 2e       	mov	r14, r24
    35c0:	fe 2e       	mov	r15, r30
    35c2:	07 2f       	mov	r16, r23
    35c4:	1b 2f       	mov	r17, r27
    35c6:	6f 5f       	subi	r22, 0xFF	; 255
    35c8:	86 2f       	mov	r24, r22
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a0 e0       	ldi	r26, 0x00	; 0
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	82 17       	cp	r24, r18
    35d2:	93 07       	cpc	r25, r19
    35d4:	a4 07       	cpc	r26, r20
    35d6:	b5 07       	cpc	r27, r21
    35d8:	08 f4       	brcc	.+2      	; 0x35dc <_nrk_time_to_ticks+0xd0>
    35da:	be cf       	rjmp	.-132    	; 0x3558 <_nrk_time_to_ticks+0x4c>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    35dc:	95 01       	movw	r18, r10
    35de:	a6 01       	movw	r20, r12
    35e0:	b7 01       	movw	r22, r14
    35e2:	c8 01       	movw	r24, r16
    35e4:	a3 eb       	ldi	r26, 0xB3	; 179
    35e6:	aa 2e       	mov	r10, r26
    35e8:	f6 ee       	ldi	r31, 0xE6	; 230
    35ea:	bf 2e       	mov	r11, r31
    35ec:	ee e0       	ldi	r30, 0x0E	; 14
    35ee:	ce 2e       	mov	r12, r30
    35f0:	dd 24       	eor	r13, r13
    35f2:	ee 24       	eor	r14, r14
    35f4:	ff 24       	eor	r15, r15
    35f6:	00 e0       	ldi	r16, 0x00	; 0
    35f8:	10 e0       	ldi	r17, 0x00	; 0
    35fa:	0e 94 6d 23 	call	0x46da	; 0x46da <__udivdi3>
    35fe:	09 c0       	rjmp	.+18     	; 0x3612 <_nrk_time_to_ticks+0x106>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3600:	23 eb       	ldi	r18, 0xB3	; 179
    3602:	36 ee       	ldi	r19, 0xE6	; 230
    3604:	4e e0       	ldi	r20, 0x0E	; 14
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <_nrk_time_to_ticks+0x106>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3612:	c9 01       	movw	r24, r18
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	bf 90       	pop	r11
    3622:	af 90       	pop	r10
    3624:	9f 90       	pop	r9
    3626:	8f 90       	pop	r8
    3628:	08 95       	ret

0000362a <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    362a:	ef 92       	push	r14
    362c:	ff 92       	push	r15
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	28 97       	sbiw	r28, 0x08	; 8
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    3646:	7b 01       	movw	r14, r22
    3648:	8c 01       	movw	r16, r24
    364a:	ba e0       	ldi	r27, 0x0A	; 10
    364c:	16 95       	lsr	r17
    364e:	07 95       	ror	r16
    3650:	f7 94       	ror	r15
    3652:	e7 94       	ror	r14
    3654:	ba 95       	dec	r27
    3656:	d1 f7       	brne	.-12     	; 0x364c <_nrk_ticks_to_time+0x22>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3658:	e9 82       	std	Y+1, r14	; 0x01
    365a:	fa 82       	std	Y+2, r15	; 0x02
    365c:	0b 83       	std	Y+3, r16	; 0x03
    365e:	1c 83       	std	Y+4, r17	; 0x04
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3660:	73 70       	andi	r23, 0x03	; 3
    3662:	80 70       	andi	r24, 0x00	; 0
    3664:	90 70       	andi	r25, 0x00	; 0
    3666:	23 eb       	ldi	r18, 0xB3	; 179
    3668:	36 ee       	ldi	r19, 0xE6	; 230
    366a:	4e e0       	ldi	r20, 0x0E	; 14
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3672:	6d 83       	std	Y+5, r22	; 0x05
    3674:	7e 83       	std	Y+6, r23	; 0x06
    3676:	8f 83       	std	Y+7, r24	; 0x07
    3678:	98 87       	std	Y+8, r25	; 0x08
    367a:	2e 2d       	mov	r18, r14
    367c:	3a 81       	ldd	r19, Y+2	; 0x02
    367e:	4b 81       	ldd	r20, Y+3	; 0x03
    3680:	5c 81       	ldd	r21, Y+4	; 0x04

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
}
    3682:	28 96       	adiw	r28, 0x08	; 8
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	08 95       	ret

0000369c <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    369c:	8f 92       	push	r8
    369e:	9f 92       	push	r9
    36a0:	af 92       	push	r10
    36a2:	bf 92       	push	r11
    36a4:	cf 92       	push	r12
    36a6:	df 92       	push	r13
    36a8:	ef 92       	push	r14
    36aa:	ff 92       	push	r15
    36ac:	0f 93       	push	r16
    36ae:	1f 93       	push	r17
    36b0:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    36b2:	20 81       	ld	r18, Z
    36b4:	31 81       	ldd	r19, Z+1	; 0x01
    36b6:	42 81       	ldd	r20, Z+2	; 0x02
    36b8:	53 81       	ldd	r21, Z+3	; 0x03
    36ba:	64 81       	ldd	r22, Z+4	; 0x04
    36bc:	75 81       	ldd	r23, Z+5	; 0x05
    36be:	86 81       	ldd	r24, Z+6	; 0x06
    36c0:	97 81       	ldd	r25, Z+7	; 0x07
    36c2:	21 15       	cp	r18, r1
    36c4:	31 05       	cpc	r19, r1
    36c6:	41 05       	cpc	r20, r1
    36c8:	51 05       	cpc	r21, r1
    36ca:	09 f4       	brne	.+2      	; 0x36ce <_nrk_time_to_ticks_long+0x32>
    36cc:	5b c0       	rjmp	.+182    	; 0x3784 <_nrk_time_to_ticks_long+0xe8>
{
   tmp=t->nano_secs;
    36ce:	5b 01       	movw	r10, r22
    36d0:	6c 01       	movw	r12, r24
    36d2:	ee 24       	eor	r14, r14
    36d4:	ff 24       	eor	r15, r15
    36d6:	87 01       	movw	r16, r14
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	38 c0       	rjmp	.+112    	; 0x374c <_nrk_time_to_ticks_long+0xb0>
    36dc:	8a 2c       	mov	r8, r10
    36de:	ab 2d       	mov	r26, r11
    36e0:	a6 53       	subi	r26, 0x36	; 54
    36e2:	f1 e0       	ldi	r31, 0x01	; 1
    36e4:	ab 15       	cp	r26, r11
    36e6:	08 f0       	brcs	.+2      	; 0x36ea <_nrk_time_to_ticks_long+0x4e>
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	8c 2d       	mov	r24, r12
    36ec:	86 56       	subi	r24, 0x66	; 102
    36ee:	91 e0       	ldi	r25, 0x01	; 1
    36f0:	8c 15       	cp	r24, r12
    36f2:	08 f0       	brcs	.+2      	; 0x36f6 <_nrk_time_to_ticks_long+0x5a>
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	f8 0f       	add	r31, r24
    36f8:	71 e0       	ldi	r23, 0x01	; 1
    36fa:	f8 17       	cp	r31, r24
    36fc:	08 f0       	brcs	.+2      	; 0x3700 <_nrk_time_to_ticks_long+0x64>
    36fe:	70 e0       	ldi	r23, 0x00	; 0
    3700:	97 2b       	or	r25, r23
    3702:	7d 2d       	mov	r23, r13
    3704:	75 5c       	subi	r23, 0xC5	; 197
    3706:	e1 e0       	ldi	r30, 0x01	; 1
    3708:	7d 15       	cp	r23, r13
    370a:	08 f0       	brcs	.+2      	; 0x370e <_nrk_time_to_ticks_long+0x72>
    370c:	e0 e0       	ldi	r30, 0x00	; 0
    370e:	97 0f       	add	r25, r23
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	97 17       	cp	r25, r23
    3714:	08 f0       	brcs	.+2      	; 0x3718 <_nrk_time_to_ticks_long+0x7c>
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	8e 2b       	or	r24, r30
    371a:	8e 0d       	add	r24, r14
    371c:	e1 e0       	ldi	r30, 0x01	; 1
    371e:	8e 15       	cp	r24, r14
    3720:	08 f0       	brcs	.+2      	; 0x3724 <_nrk_time_to_ticks_long+0x88>
    3722:	e0 e0       	ldi	r30, 0x00	; 0
    3724:	ef 0d       	add	r30, r15
    3726:	71 e0       	ldi	r23, 0x01	; 1
    3728:	ef 15       	cp	r30, r15
    372a:	08 f0       	brcs	.+2      	; 0x372e <_nrk_time_to_ticks_long+0x92>
    372c:	70 e0       	ldi	r23, 0x00	; 0
    372e:	70 0f       	add	r23, r16
    3730:	b1 e0       	ldi	r27, 0x01	; 1
    3732:	70 17       	cp	r23, r16
    3734:	08 f0       	brcs	.+2      	; 0x3738 <_nrk_time_to_ticks_long+0x9c>
    3736:	b0 e0       	ldi	r27, 0x00	; 0
    3738:	b1 0f       	add	r27, r17
    373a:	a8 2c       	mov	r10, r8
    373c:	ba 2e       	mov	r11, r26
    373e:	cf 2e       	mov	r12, r31
    3740:	d9 2e       	mov	r13, r25
    3742:	e8 2e       	mov	r14, r24
    3744:	fe 2e       	mov	r15, r30
    3746:	07 2f       	mov	r16, r23
    3748:	1b 2f       	mov	r17, r27
    374a:	6f 5f       	subi	r22, 0xFF	; 255
    374c:	86 2f       	mov	r24, r22
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	a0 e0       	ldi	r26, 0x00	; 0
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	82 17       	cp	r24, r18
    3756:	93 07       	cpc	r25, r19
    3758:	a4 07       	cpc	r26, r20
    375a:	b5 07       	cpc	r27, r21
    375c:	08 f4       	brcc	.+2      	; 0x3760 <_nrk_time_to_ticks_long+0xc4>
    375e:	be cf       	rjmp	.-132    	; 0x36dc <_nrk_time_to_ticks_long+0x40>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3760:	95 01       	movw	r18, r10
    3762:	a6 01       	movw	r20, r12
    3764:	b7 01       	movw	r22, r14
    3766:	c8 01       	movw	r24, r16
    3768:	e3 eb       	ldi	r30, 0xB3	; 179
    376a:	ae 2e       	mov	r10, r30
    376c:	06 ee       	ldi	r16, 0xE6	; 230
    376e:	b0 2e       	mov	r11, r16
    3770:	1e e0       	ldi	r17, 0x0E	; 14
    3772:	c1 2e       	mov	r12, r17
    3774:	dd 24       	eor	r13, r13
    3776:	ee 24       	eor	r14, r14
    3778:	ff 24       	eor	r15, r15
    377a:	00 e0       	ldi	r16, 0x00	; 0
    377c:	10 e0       	ldi	r17, 0x00	; 0
    377e:	0e 94 6d 23 	call	0x46da	; 0x46da <__udivdi3>
    3782:	06 c0       	rjmp	.+12     	; 0x3790 <_nrk_time_to_ticks_long+0xf4>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3784:	23 eb       	ldi	r18, 0xB3	; 179
    3786:	36 ee       	ldi	r19, 0xE6	; 230
    3788:	4e e0       	ldi	r20, 0x0E	; 14
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    3790:	b9 01       	movw	r22, r18
    3792:	ca 01       	movw	r24, r20
}
return ticks;
}
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	df 90       	pop	r13
    379e:	cf 90       	pop	r12
    37a0:	bf 90       	pop	r11
    37a2:	af 90       	pop	r10
    37a4:	9f 90       	pop	r9
    37a6:	8f 90       	pop	r8
    37a8:	08 95       	ret

000037aa <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    37aa:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    37ac:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    37ae:	0e 94 62 12 	call	0x24c4	; 0x24c4 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    37b2:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_nrk_get_next_wakeup>
    37b6:	84 30       	cpi	r24, 0x04	; 4
    37b8:	10 f4       	brcc	.+4      	; 0x37be <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=CPU_IDLE;
    37ba:	10 93 2d 07 	sts	0x072D, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    37be:	0e 94 ce 22 	call	0x459c	; 0x459c <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    37c2:	80 91 ed 05 	lds	r24, 0x05ED
    37c6:	85 35       	cpi	r24, 0x55	; 85
    37c8:	19 f0       	breq	.+6      	; 0x37d0 <nrk_idle_task+0x26>
    37ca:	88 e0       	ldi	r24, 0x08	; 8
    37cc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    37d0:	80 91 7e 41 	lds	r24, 0x417E
    37d4:	85 35       	cpi	r24, 0x55	; 85
    37d6:	59 f3       	breq	.-42     	; 0x37ae <nrk_idle_task+0x4>
    37d8:	88 e0       	ldi	r24, 0x08	; 8
    37da:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <nrk_error_add>
    37de:	e7 cf       	rjmp	.-50     	; 0x37ae <nrk_idle_task+0x4>

000037e0 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    37e0:	2f 92       	push	r2
    37e2:	3f 92       	push	r3
    37e4:	4f 92       	push	r4
    37e6:	5f 92       	push	r5
    37e8:	6f 92       	push	r6
    37ea:	7f 92       	push	r7
    37ec:	8f 92       	push	r8
    37ee:	9f 92       	push	r9
    37f0:	af 92       	push	r10
    37f2:	bf 92       	push	r11
    37f4:	cf 92       	push	r12
    37f6:	df 92       	push	r13
    37f8:	ef 92       	push	r14
    37fa:	ff 92       	push	r15
    37fc:	0f 93       	push	r16
    37fe:	1f 93       	push	r17
    3800:	df 93       	push	r29
    3802:	cf 93       	push	r28
    3804:	00 d0       	rcall	.+0      	; 0x3806 <_nrk_scheduler+0x26>
    3806:	00 d0       	rcall	.+0      	; 0x3808 <_nrk_scheduler+0x28>
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    380c:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    3810:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    3814:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    3818:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_nrk_high_speed_timer_get>
    381c:	9a 83       	std	Y+2, r25	; 0x02
    381e:	89 83       	std	Y+1, r24	; 0x01
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3820:	8a ef       	ldi	r24, 0xFA	; 250
    3822:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3826:	60 91 ea 05 	lds	r22, 0x05EA
    382a:	70 e0       	ldi	r23, 0x00	; 0
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	23 eb       	ldi	r18, 0xB3	; 179
    3832:	36 ee       	ldi	r19, 0xE6	; 230
    3834:	4e e0       	ldi	r20, 0x0E	; 14
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    383c:	7b 01       	movw	r14, r22
    383e:	8c 01       	movw	r16, r24
    3840:	80 91 34 07 	lds	r24, 0x0734
    3844:	90 91 35 07 	lds	r25, 0x0735
    3848:	a0 91 36 07 	lds	r26, 0x0736
    384c:	b0 91 37 07 	lds	r27, 0x0737
    3850:	e8 0e       	add	r14, r24
    3852:	f9 1e       	adc	r15, r25
    3854:	0a 1f       	adc	r16, r26
    3856:	1b 1f       	adc	r17, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3858:	c8 01       	movw	r24, r16
    385a:	b7 01       	movw	r22, r14
    385c:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    3860:	e6 1a       	sub	r14, r22
    3862:	f7 0a       	sbc	r15, r23
    3864:	08 0b       	sbc	r16, r24
    3866:	19 0b       	sbc	r17, r25
    3868:	80 91 30 07 	lds	r24, 0x0730
    386c:	90 91 31 07 	lds	r25, 0x0731
    3870:	a0 91 32 07 	lds	r26, 0x0732
    3874:	b0 91 33 07 	lds	r27, 0x0733

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3878:	63 eb       	ldi	r22, 0xB3	; 179
    387a:	a6 2e       	mov	r10, r22
    387c:	66 ee       	ldi	r22, 0xE6	; 230
    387e:	b6 2e       	mov	r11, r22
    3880:	6e e0       	ldi	r22, 0x0E	; 14
    3882:	c6 2e       	mov	r12, r22
    3884:	d1 2c       	mov	r13, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <_nrk_scheduler+0xd0>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	96 e3       	ldi	r25, 0x36	; 54
    388c:	a5 e6       	ldi	r26, 0x65	; 101
    388e:	b4 ec       	ldi	r27, 0xC4	; 196
    3890:	e8 0e       	add	r14, r24
    3892:	f9 1e       	adc	r15, r25
    3894:	0a 1f       	adc	r16, r26
    3896:	1b 1f       	adc	r17, r27
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3898:	c8 01       	movw	r24, r16
    389a:	b7 01       	movw	r22, r14
    389c:	a6 01       	movw	r20, r12
    389e:	95 01       	movw	r18, r10
    38a0:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    38a4:	e6 1a       	sub	r14, r22
    38a6:	f7 0a       	sbc	r15, r23
    38a8:	08 0b       	sbc	r16, r24
    38aa:	19 0b       	sbc	r17, r25
    38ac:	d4 01       	movw	r26, r8
    38ae:	c3 01       	movw	r24, r6
    38b0:	3c 01       	movw	r6, r24
    38b2:	4d 01       	movw	r8, r26
    38b4:	08 94       	sec
    38b6:	61 1c       	adc	r6, r1
    38b8:	71 1c       	adc	r7, r1
    38ba:	81 1c       	adc	r8, r1
    38bc:	91 1c       	adc	r9, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    38be:	e0 e0       	ldi	r30, 0x00	; 0
    38c0:	ee 16       	cp	r14, r30
    38c2:	ea ec       	ldi	r30, 0xCA	; 202
    38c4:	fe 06       	cpc	r15, r30
    38c6:	ea e9       	ldi	r30, 0x9A	; 154
    38c8:	0e 07       	cpc	r16, r30
    38ca:	eb e3       	ldi	r30, 0x3B	; 59
    38cc:	1e 07       	cpc	r17, r30
    38ce:	e0 f6       	brcc	.-72     	; 0x3888 <_nrk_scheduler+0xa8>
    38d0:	80 93 30 07 	sts	0x0730, r24
    38d4:	90 93 31 07 	sts	0x0731, r25
    38d8:	a0 93 32 07 	sts	0x0732, r26
    38dc:	b0 93 33 07 	sts	0x0733, r27
    38e0:	e0 92 34 07 	sts	0x0734, r14
    38e4:	f0 92 35 07 	sts	0x0735, r15
    38e8:	00 93 36 07 	sts	0x0736, r16
    38ec:	10 93 37 07 	sts	0x0737, r17
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    38f0:	e0 91 39 07 	lds	r30, 0x0739
    38f4:	f0 91 3a 07 	lds	r31, 0x073A
    38f8:	85 81       	ldd	r24, Z+5	; 0x05
    38fa:	88 23       	and	r24, r24
    38fc:	39 f1       	breq	.+78     	; 0x394c <_nrk_scheduler+0x16c>
    38fe:	81 85       	ldd	r24, Z+9	; 0x09
    3900:	84 30       	cpi	r24, 0x04	; 4
    3902:	21 f1       	breq	.+72     	; 0x394c <_nrk_scheduler+0x16c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3904:	87 81       	ldd	r24, Z+7	; 0x07
    3906:	82 30       	cpi	r24, 0x02	; 2
    3908:	29 f0       	breq	.+10     	; 0x3914 <_nrk_scheduler+0x134>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    390a:	88 23       	and	r24, r24
    390c:	41 f0       	breq	.+16     	; 0x391e <_nrk_scheduler+0x13e>
    390e:	86 81       	ldd	r24, Z+6	; 0x06
    3910:	88 23       	and	r24, r24
    3912:	11 f4       	brne	.+4      	; 0x3918 <_nrk_scheduler+0x138>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3914:	85 e0       	ldi	r24, 0x05	; 5
    3916:	01 c0       	rjmp	.+2      	; 0x391a <_nrk_scheduler+0x13a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3918:	83 e0       	ldi	r24, 0x03	; 3
    391a:	81 87       	std	Z+9, r24	; 0x09
    391c:	14 c0       	rjmp	.+40     	; 0x3946 <_nrk_scheduler+0x166>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    391e:	83 e0       	ldi	r24, 0x03	; 3
    3920:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    3922:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    3924:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    3926:	85 89       	ldd	r24, Z+21	; 0x15
    3928:	96 89       	ldd	r25, Z+22	; 0x16
    392a:	a7 89       	ldd	r26, Z+23	; 0x17
    392c:	b0 8d       	ldd	r27, Z+24	; 0x18
    392e:	00 97       	sbiw	r24, 0x00	; 0
    3930:	a1 05       	cpc	r26, r1
    3932:	b1 05       	cpc	r27, r1
    3934:	41 f4       	brne	.+16     	; 0x3946 <_nrk_scheduler+0x166>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    3936:	81 8d       	ldd	r24, Z+25	; 0x19
    3938:	92 8d       	ldd	r25, Z+26	; 0x1a
    393a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    393c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    393e:	85 8b       	std	Z+21, r24	; 0x15
    3940:	96 8b       	std	Z+22, r25	; 0x16
    3942:	a7 8b       	std	Z+23, r26	; 0x17
    3944:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    3946:	80 85       	ldd	r24, Z+8	; 0x08
    3948:	0e 94 5d 16 	call	0x2cba	; 0x2cba <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    394c:	e0 91 39 07 	lds	r30, 0x0739
    3950:	f0 91 3a 07 	lds	r31, 0x073A
    3954:	85 a1       	ldd	r24, Z+37	; 0x25
    3956:	96 a1       	ldd	r25, Z+38	; 0x26
    3958:	a7 a1       	ldd	r26, Z+39	; 0x27
    395a:	b0 a5       	ldd	r27, Z+40	; 0x28
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	a1 05       	cpc	r26, r1
    3960:	b1 05       	cpc	r27, r1
    3962:	09 f4       	brne	.+2      	; 0x3966 <_nrk_scheduler+0x186>
    3964:	44 c0       	rjmp	.+136    	; 0x39ee <_nrk_scheduler+0x20e>
    3966:	60 85       	ldd	r22, Z+8	; 0x08
    3968:	66 23       	and	r22, r22
    396a:	09 f4       	brne	.+2      	; 0x396e <_nrk_scheduler+0x18e>
    396c:	40 c0       	rjmp	.+128    	; 0x39ee <_nrk_scheduler+0x20e>
    396e:	81 85       	ldd	r24, Z+9	; 0x09
    3970:	84 30       	cpi	r24, 0x04	; 4
    3972:	e9 f1       	breq	.+122    	; 0x39ee <_nrk_scheduler+0x20e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    3974:	25 8d       	ldd	r18, Z+29	; 0x1d
    3976:	36 8d       	ldd	r19, Z+30	; 0x1e
    3978:	47 8d       	ldd	r20, Z+31	; 0x1f
    397a:	50 a1       	ldd	r21, Z+32	; 0x20
    397c:	80 91 ea 05 	lds	r24, 0x05EA
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	a0 e0       	ldi	r26, 0x00	; 0
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	28 17       	cp	r18, r24
    3988:	39 07       	cpc	r19, r25
    398a:	4a 07       	cpc	r20, r26
    398c:	5b 07       	cpc	r21, r27
    398e:	60 f4       	brcc	.+24     	; 0x39a8 <_nrk_scheduler+0x1c8>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    3990:	82 e0       	ldi	r24, 0x02	; 2
    3992:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    3996:	e0 91 39 07 	lds	r30, 0x0739
    399a:	f0 91 3a 07 	lds	r31, 0x073A
    399e:	15 8e       	std	Z+29, r1	; 0x1d
    39a0:	16 8e       	std	Z+30, r1	; 0x1e
    39a2:	17 8e       	std	Z+31, r1	; 0x1f
    39a4:	10 a2       	std	Z+32, r1	; 0x20
    39a6:	08 c0       	rjmp	.+16     	; 0x39b8 <_nrk_scheduler+0x1d8>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    39a8:	28 1b       	sub	r18, r24
    39aa:	39 0b       	sbc	r19, r25
    39ac:	4a 0b       	sbc	r20, r26
    39ae:	5b 0b       	sbc	r21, r27
    39b0:	25 8f       	std	Z+29, r18	; 0x1d
    39b2:	36 8f       	std	Z+30, r19	; 0x1e
    39b4:	47 8f       	std	Z+31, r20	; 0x1f
    39b6:	50 a3       	std	Z+32, r21	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    39b8:	e0 91 39 07 	lds	r30, 0x0739
    39bc:	f0 91 3a 07 	lds	r31, 0x073A
    39c0:	00 85       	ldd	r16, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    39c2:	25 8d       	ldd	r18, Z+29	; 0x1d
    39c4:	36 8d       	ldd	r19, Z+30	; 0x1e
    39c6:	47 8d       	ldd	r20, Z+31	; 0x1f
    39c8:	50 a1       	ldd	r21, Z+32	; 0x20
    39ca:	21 15       	cp	r18, r1
    39cc:	31 05       	cpc	r19, r1
    39ce:	41 05       	cpc	r20, r1
    39d0:	51 05       	cpc	r21, r1
    39d2:	69 f4       	brne	.+26     	; 0x39ee <_nrk_scheduler+0x20e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    39d4:	83 e0       	ldi	r24, 0x03	; 3
    39d6:	60 2f       	mov	r22, r16
    39d8:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    39dc:	e0 91 39 07 	lds	r30, 0x0739
    39e0:	f0 91 3a 07 	lds	r31, 0x073A
    39e4:	83 e0       	ldi	r24, 0x03	; 3
    39e6:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    39e8:	80 2f       	mov	r24, r16
    39ea:	0e 94 5d 16 	call	0x2cba	; 0x2cba <nrk_rem_from_readyQ>
    39ee:	0c e8       	ldi	r16, 0x8C	; 140
    39f0:	16 e0       	ldi	r17, 0x06	; 6
    39f2:	c8 01       	movw	r24, r16
    39f4:	40 97       	sbiw	r24, 0x10	; 16

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    39f6:	50 e6       	ldi	r21, 0x60	; 96
    39f8:	e5 2e       	mov	r14, r21
    39fa:	5a ee       	ldi	r21, 0xEA	; 234
    39fc:	f5 2e       	mov	r15, r21
    39fe:	99 24       	eor	r9, r9
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
                    nrk_task_TCB[task_ID].num_periods=1;
    3a00:	41 e0       	ldi	r20, 0x01	; 1
    3a02:	24 2e       	mov	r2, r20
    3a04:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3a06:	3a ef       	ldi	r19, 0xFA	; 250
    3a08:	43 2e       	mov	r4, r19
    3a0a:	51 2c       	mov	r5, r1
    3a0c:	61 2c       	mov	r6, r1
    3a0e:	71 2c       	mov	r7, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    3a10:	22 e0       	ldi	r18, 0x02	; 2
    3a12:	82 2e       	mov	r8, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3a14:	67 01       	movw	r12, r14
    3a16:	58 01       	movw	r10, r16
    3a18:	9c 83       	std	Y+4, r25	; 0x04
    3a1a:	8b 83       	std	Y+3, r24	; 0x03

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3a1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3a1e:	bc 81       	ldd	r27, Y+4	; 0x04
    3a20:	13 96       	adiw	r26, 0x03	; 3
    3a22:	8c 91       	ld	r24, X
    3a24:	13 97       	sbiw	r26, 0x03	; 3
    3a26:	8f 3f       	cpi	r24, 0xFF	; 255
    3a28:	09 f4       	brne	.+2      	; 0x3a2c <_nrk_scheduler+0x24c>
    3a2a:	15 c1       	rjmp	.+554    	; 0x3c56 <_nrk_scheduler+0x476>
        nrk_task_TCB[task_ID].suspend_flag=0;
    3a2c:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    3a2e:	88 23       	and	r24, r24
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <_nrk_scheduler+0x254>
    3a32:	6d c0       	rjmp	.+218    	; 0x3b0e <_nrk_scheduler+0x32e>
    3a34:	14 96       	adiw	r26, 0x04	; 4
    3a36:	8c 91       	ld	r24, X
    3a38:	14 97       	sbiw	r26, 0x04	; 4
    3a3a:	84 30       	cpi	r24, 0x04	; 4
    3a3c:	09 f4       	brne	.+2      	; 0x3a40 <_nrk_scheduler+0x260>
    3a3e:	67 c0       	rjmp	.+206    	; 0x3b0e <_nrk_scheduler+0x32e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3a40:	f5 01       	movw	r30, r10
    3a42:	80 81       	ld	r24, Z
    3a44:	91 81       	ldd	r25, Z+1	; 0x01
    3a46:	a2 81       	ldd	r26, Z+2	; 0x02
    3a48:	b3 81       	ldd	r27, Z+3	; 0x03
    3a4a:	e0 90 ea 05 	lds	r14, 0x05EA
    3a4e:	ff 24       	eor	r15, r15
    3a50:	00 e0       	ldi	r16, 0x00	; 0
    3a52:	10 e0       	ldi	r17, 0x00	; 0
    3a54:	8e 15       	cp	r24, r14
    3a56:	9f 05       	cpc	r25, r15
    3a58:	a0 07       	cpc	r26, r16
    3a5a:	b1 07       	cpc	r27, r17
    3a5c:	48 f0       	brcs	.+18     	; 0x3a70 <_nrk_scheduler+0x290>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    3a5e:	8e 19       	sub	r24, r14
    3a60:	9f 09       	sbc	r25, r15
    3a62:	a0 0b       	sbc	r26, r16
    3a64:	b1 0b       	sbc	r27, r17
    3a66:	80 83       	st	Z, r24
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	a2 83       	std	Z+2, r26	; 0x02
    3a6c:	b3 83       	std	Z+3, r27	; 0x03
    3a6e:	06 c0       	rjmp	.+12     	; 0x3a7c <_nrk_scheduler+0x29c>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    3a70:	d5 01       	movw	r26, r10
    3a72:	1d 92       	st	X+, r1
    3a74:	1d 92       	st	X+, r1
    3a76:	1d 92       	st	X+, r1
    3a78:	1c 92       	st	X, r1
    3a7a:	13 97       	sbiw	r26, 0x03	; 3
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    3a7c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a7e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a80:	84 89       	ldd	r24, Z+20	; 0x14
    3a82:	95 89       	ldd	r25, Z+21	; 0x15
    3a84:	a6 89       	ldd	r26, Z+22	; 0x16
    3a86:	b7 89       	ldd	r27, Z+23	; 0x17
    3a88:	8e 15       	cp	r24, r14
    3a8a:	9f 05       	cpc	r25, r15
    3a8c:	a0 07       	cpc	r26, r16
    3a8e:	b1 07       	cpc	r27, r17
    3a90:	48 f0       	brcs	.+18     	; 0x3aa4 <_nrk_scheduler+0x2c4>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    3a92:	8e 19       	sub	r24, r14
    3a94:	9f 09       	sbc	r25, r15
    3a96:	a0 0b       	sbc	r26, r16
    3a98:	b1 0b       	sbc	r27, r17
    3a9a:	84 8b       	std	Z+20, r24	; 0x14
    3a9c:	95 8b       	std	Z+21, r25	; 0x15
    3a9e:	a6 8b       	std	Z+22, r26	; 0x16
    3aa0:	b7 8b       	std	Z+23, r27	; 0x17
    3aa2:	23 c0       	rjmp	.+70     	; 0x3aea <_nrk_scheduler+0x30a>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    3aa4:	ab 81       	ldd	r26, Y+3	; 0x03
    3aa6:	bc 81       	ldd	r27, Y+4	; 0x04
    3aa8:	5c 96       	adiw	r26, 0x1c	; 28
    3aaa:	2d 91       	ld	r18, X+
    3aac:	3d 91       	ld	r19, X+
    3aae:	4d 91       	ld	r20, X+
    3ab0:	5c 91       	ld	r21, X
    3ab2:	5f 97       	sbiw	r26, 0x1f	; 31
    3ab4:	e2 16       	cp	r14, r18
    3ab6:	f3 06       	cpc	r15, r19
    3ab8:	04 07       	cpc	r16, r20
    3aba:	15 07       	cpc	r17, r21
    3abc:	50 f4       	brcc	.+20     	; 0x3ad2 <_nrk_scheduler+0x2f2>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    3abe:	2e 19       	sub	r18, r14
    3ac0:	3f 09       	sbc	r19, r15
    3ac2:	40 0b       	sbc	r20, r16
    3ac4:	51 0b       	sbc	r21, r17
    3ac6:	fd 01       	movw	r30, r26
    3ac8:	24 8b       	std	Z+20, r18	; 0x14
    3aca:	35 8b       	std	Z+21, r19	; 0x15
    3acc:	46 8b       	std	Z+22, r20	; 0x16
    3ace:	57 8b       	std	Z+23, r21	; 0x17
    3ad0:	0c c0       	rjmp	.+24     	; 0x3aea <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3ad2:	c8 01       	movw	r24, r16
    3ad4:	b7 01       	movw	r22, r14
    3ad6:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    3ada:	ab 81       	ldd	r26, Y+3	; 0x03
    3adc:	bc 81       	ldd	r27, Y+4	; 0x04
    3ade:	54 96       	adiw	r26, 0x14	; 20
    3ae0:	6d 93       	st	X+, r22
    3ae2:	7d 93       	st	X+, r23
    3ae4:	8d 93       	st	X+, r24
    3ae6:	9c 93       	st	X, r25
    3ae8:	57 97       	sbiw	r26, 0x17	; 23
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3aea:	eb 81       	ldd	r30, Y+3	; 0x03
    3aec:	fc 81       	ldd	r31, Y+4	; 0x04
    3aee:	84 89       	ldd	r24, Z+20	; 0x14
    3af0:	95 89       	ldd	r25, Z+21	; 0x15
    3af2:	a6 89       	ldd	r26, Z+22	; 0x16
    3af4:	b7 89       	ldd	r27, Z+23	; 0x17
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	a1 05       	cpc	r26, r1
    3afa:	b1 05       	cpc	r27, r1
    3afc:	41 f4       	brne	.+16     	; 0x3b0e <_nrk_scheduler+0x32e>
    3afe:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b00:	95 8d       	ldd	r25, Z+29	; 0x1d
    3b02:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3b04:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3b06:	84 8b       	std	Z+20, r24	; 0x14
    3b08:	95 8b       	std	Z+21, r25	; 0x15
    3b0a:	a6 8b       	std	Z+22, r26	; 0x16
    3b0c:	b7 8b       	std	Z+23, r27	; 0x17

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    3b0e:	ab 81       	ldd	r26, Y+3	; 0x03
    3b10:	bc 81       	ldd	r27, Y+4	; 0x04
    3b12:	14 96       	adiw	r26, 0x04	; 4
    3b14:	8c 91       	ld	r24, X
    3b16:	14 97       	sbiw	r26, 0x04	; 4
    3b18:	83 30       	cpi	r24, 0x03	; 3
    3b1a:	09 f0       	breq	.+2      	; 0x3b1e <_nrk_scheduler+0x33e>
    3b1c:	9c c0       	rjmp	.+312    	; 0x3c56 <_nrk_scheduler+0x476>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3b1e:	f5 01       	movw	r30, r10
    3b20:	80 81       	ld	r24, Z
    3b22:	91 81       	ldd	r25, Z+1	; 0x01
    3b24:	a2 81       	ldd	r26, Z+2	; 0x02
    3b26:	b3 81       	ldd	r27, Z+3	; 0x03
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	a1 05       	cpc	r26, r1
    3b2c:	b1 05       	cpc	r27, r1
    3b2e:	09 f0       	breq	.+2      	; 0x3b32 <_nrk_scheduler+0x352>
    3b30:	7e c0       	rjmp	.+252    	; 0x3c2e <_nrk_scheduler+0x44e>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3b32:	ab 81       	ldd	r26, Y+3	; 0x03
    3b34:	bc 81       	ldd	r27, Y+4	; 0x04
    3b36:	12 96       	adiw	r26, 0x02	; 2
    3b38:	8c 91       	ld	r24, X
    3b3a:	12 97       	sbiw	r26, 0x02	; 2
    3b3c:	88 23       	and	r24, r24
    3b3e:	c1 f0       	breq	.+48     	; 0x3b70 <_nrk_scheduler+0x390>
    3b40:	11 96       	adiw	r26, 0x01	; 1
    3b42:	8c 91       	ld	r24, X
    3b44:	11 97       	sbiw	r26, 0x01	; 1
    3b46:	88 23       	and	r24, r24
    3b48:	99 f0       	breq	.+38     	; 0x3b70 <_nrk_scheduler+0x390>
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	a0 e0       	ldi	r26, 0x00	; 0
    3b50:	b0 e0       	ldi	r27, 0x00	; 0
    3b52:	00 90 29 07 	lds	r0, 0x0729
    3b56:	04 c0       	rjmp	.+8      	; 0x3b60 <_nrk_scheduler+0x380>
    3b58:	88 0f       	add	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	aa 1f       	adc	r26, r26
    3b5e:	bb 1f       	adc	r27, r27
    3b60:	0a 94       	dec	r0
    3b62:	d2 f7       	brpl	.-12     	; 0x3b58 <_nrk_scheduler+0x378>
    3b64:	eb 81       	ldd	r30, Y+3	; 0x03
    3b66:	fc 81       	ldd	r31, Y+4	; 0x04
    3b68:	84 87       	std	Z+12, r24	; 0x0c
    3b6a:	95 87       	std	Z+13, r25	; 0x0d
    3b6c:	a6 87       	std	Z+14, r26	; 0x0e
    3b6e:	b7 87       	std	Z+15, r27	; 0x0f
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    3b70:	ab 81       	ldd	r26, Y+3	; 0x03
    3b72:	bc 81       	ldd	r27, Y+4	; 0x04
    3b74:	12 96       	adiw	r26, 0x02	; 2
    3b76:	1c 92       	st	X, r1
    3b78:	12 97       	sbiw	r26, 0x02	; 2
                nrk_task_TCB[task_ID].nw_flag=0;
    3b7a:	11 96       	adiw	r26, 0x01	; 1
    3b7c:	1c 92       	st	X, r1
    3b7e:	11 97       	sbiw	r26, 0x01	; 1
                nrk_task_TCB[task_ID].suspend_flag=0;
    3b80:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    3b82:	f5 01       	movw	r30, r10
    3b84:	64 89       	ldd	r22, Z+20	; 0x14
    3b86:	75 89       	ldd	r23, Z+21	; 0x15
    3b88:	5c 96       	adiw	r26, 0x1c	; 28
    3b8a:	ed 90       	ld	r14, X+
    3b8c:	fd 90       	ld	r15, X+
    3b8e:	0d 91       	ld	r16, X+
    3b90:	1c 91       	ld	r17, X
    3b92:	5f 97       	sbiw	r26, 0x1f	; 31
    3b94:	eb 81       	ldd	r30, Y+3	; 0x03
    3b96:	fc 81       	ldd	r31, Y+4	; 0x04
    3b98:	80 a1       	ldd	r24, Z+32	; 0x20
    3b9a:	91 a1       	ldd	r25, Z+33	; 0x21
    3b9c:	a2 a1       	ldd	r26, Z+34	; 0x22
    3b9e:	b3 a1       	ldd	r27, Z+35	; 0x23
    3ba0:	61 30       	cpi	r22, 0x01	; 1
    3ba2:	71 05       	cpc	r23, r1
    3ba4:	e9 f4       	brne	.+58     	; 0x3be0 <_nrk_scheduler+0x400>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3ba6:	80 8f       	std	Z+24, r24	; 0x18
    3ba8:	91 8f       	std	Z+25, r25	; 0x19
    3baa:	a2 8f       	std	Z+26, r26	; 0x1a
    3bac:	b3 8f       	std	Z+27, r27	; 0x1b
                    nrk_task_TCB[task_ID].task_state = READY;
    3bae:	84 82       	std	Z+4, r8	; 0x04
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    3bb0:	84 89       	ldd	r24, Z+20	; 0x14
    3bb2:	95 89       	ldd	r25, Z+21	; 0x15
    3bb4:	a6 89       	ldd	r26, Z+22	; 0x16
    3bb6:	b7 89       	ldd	r27, Z+23	; 0x17
    3bb8:	f5 01       	movw	r30, r10
    3bba:	80 83       	st	Z, r24
    3bbc:	91 83       	std	Z+1, r25	; 0x01
    3bbe:	a2 83       	std	Z+2, r26	; 0x02
    3bc0:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3bc2:	e1 14       	cp	r14, r1
    3bc4:	f1 04       	cpc	r15, r1
    3bc6:	01 05       	cpc	r16, r1
    3bc8:	11 05       	cpc	r17, r1
    3bca:	31 f4       	brne	.+12     	; 0x3bd8 <_nrk_scheduler+0x3f8>
    3bcc:	d5 01       	movw	r26, r10
    3bce:	4d 92       	st	X+, r4
    3bd0:	5d 92       	st	X+, r5
    3bd2:	6d 92       	st	X+, r6
    3bd4:	7c 92       	st	X, r7
    3bd6:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    3bd8:	89 2d       	mov	r24, r9
    3bda:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <nrk_add_to_readyQ>
    3bde:	27 c0       	rjmp	.+78     	; 0x3c2e <_nrk_scheduler+0x44e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3be0:	eb 81       	ldd	r30, Y+3	; 0x03
    3be2:	fc 81       	ldd	r31, Y+4	; 0x04
    3be4:	80 8f       	std	Z+24, r24	; 0x18
    3be6:	91 8f       	std	Z+25, r25	; 0x19
    3be8:	a2 8f       	std	Z+26, r26	; 0x1a
    3bea:	b3 8f       	std	Z+27, r27	; 0x1b
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3bec:	61 50       	subi	r22, 0x01	; 1
    3bee:	70 40       	sbci	r23, 0x00	; 0
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a8 01       	movw	r20, r16
    3bf6:	97 01       	movw	r18, r14
    3bf8:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    3bfc:	d5 01       	movw	r26, r10
    3bfe:	6d 93       	st	X+, r22
    3c00:	7d 93       	st	X+, r23
    3c02:	8d 93       	st	X+, r24
    3c04:	9c 93       	st	X, r25
    3c06:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3c08:	eb 81       	ldd	r30, Y+3	; 0x03
    3c0a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c0c:	64 8b       	std	Z+20, r22	; 0x14
    3c0e:	75 8b       	std	Z+21, r23	; 0x15
    3c10:	86 8b       	std	Z+22, r24	; 0x16
    3c12:	97 8b       	std	Z+23, r25	; 0x17
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3c14:	e1 14       	cp	r14, r1
    3c16:	f1 04       	cpc	r15, r1
    3c18:	01 05       	cpc	r16, r1
    3c1a:	11 05       	cpc	r17, r1
    3c1c:	29 f4       	brne	.+10     	; 0x3c28 <_nrk_scheduler+0x448>
    3c1e:	4d 92       	st	X+, r4
    3c20:	5d 92       	st	X+, r5
    3c22:	6d 92       	st	X+, r6
    3c24:	7c 92       	st	X, r7
    3c26:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    3c28:	f5 01       	movw	r30, r10
    3c2a:	35 8a       	std	Z+21, r3	; 0x15
    3c2c:	24 8a       	std	Z+20, r2	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3c2e:	d5 01       	movw	r26, r10
    3c30:	2d 91       	ld	r18, X+
    3c32:	3d 91       	ld	r19, X+
    3c34:	4d 91       	ld	r20, X+
    3c36:	5c 91       	ld	r21, X
    3c38:	13 97       	sbiw	r26, 0x03	; 3
    3c3a:	21 15       	cp	r18, r1
    3c3c:	31 05       	cpc	r19, r1
    3c3e:	41 05       	cpc	r20, r1
    3c40:	51 05       	cpc	r21, r1
    3c42:	49 f0       	breq	.+18     	; 0x3c56 <_nrk_scheduler+0x476>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3c44:	c6 01       	movw	r24, r12
    3c46:	a0 e0       	ldi	r26, 0x00	; 0
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3c4a:	28 17       	cp	r18, r24
    3c4c:	39 07       	cpc	r19, r25
    3c4e:	4a 07       	cpc	r20, r26
    3c50:	5b 07       	cpc	r21, r27
    3c52:	08 f4       	brcc	.+2      	; 0x3c56 <_nrk_scheduler+0x476>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3c54:	69 01       	movw	r12, r18

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3c56:	93 94       	inc	r9
    3c58:	eb e2       	ldi	r30, 0x2B	; 43
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	ae 0e       	add	r10, r30
    3c5e:	bf 1e       	adc	r11, r31
    3c60:	8b 81       	ldd	r24, Y+3	; 0x03
    3c62:	9c 81       	ldd	r25, Y+4	; 0x04
    3c64:	8b 96       	adiw	r24, 0x2b	; 43
    3c66:	9c 83       	std	Y+4, r25	; 0x04
    3c68:	8b 83       	std	Y+3, r24	; 0x03
    3c6a:	99 2d       	mov	r25, r9
    3c6c:	94 30       	cpi	r25, 0x04	; 4
    3c6e:	09 f0       	breq	.+2      	; 0x3c72 <_nrk_scheduler+0x492>
    3c70:	d5 ce       	rjmp	.-598    	; 0x3a1c <_nrk_scheduler+0x23c>
    3c72:	76 01       	movw	r14, r12


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3c74:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <nrk_get_high_ready_task_ID>
    3c78:	08 2f       	mov	r16, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3c7a:	28 2f       	mov	r18, r24
    3c7c:	33 27       	eor	r19, r19
    3c7e:	27 fd       	sbrc	r18, 7
    3c80:	30 95       	com	r19
    3c82:	8b e2       	ldi	r24, 0x2B	; 43
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	28 9f       	mul	r18, r24
    3c88:	f0 01       	movw	r30, r0
    3c8a:	29 9f       	mul	r18, r25
    3c8c:	f0 0d       	add	r31, r0
    3c8e:	38 9f       	mul	r19, r24
    3c90:	f0 0d       	add	r31, r0
    3c92:	11 24       	eor	r1, r1
    3c94:	e9 58       	subi	r30, 0x89	; 137
    3c96:	f9 4f       	sbci	r31, 0xF9	; 249
    3c98:	a2 84       	ldd	r10, Z+10	; 0x0a
    3c9a:	a0 92 3b 07 	sts	0x073B, r10
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    3c9e:	f0 93 2b 07 	sts	0x072B, r31
    3ca2:	e0 93 2a 07 	sts	0x072A, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    3ca6:	00 23       	and	r16, r16
    3ca8:	01 f1       	breq	.+64     	; 0x3cea <_nrk_scheduler+0x50a>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    3caa:	85 a1       	ldd	r24, Z+37	; 0x25
    3cac:	96 a1       	ldd	r25, Z+38	; 0x26
    3cae:	a7 a1       	ldd	r26, Z+39	; 0x27
    3cb0:	b0 a5       	ldd	r27, Z+40	; 0x28
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	a1 05       	cpc	r26, r1
    3cb6:	b1 05       	cpc	r27, r1
    3cb8:	99 f0       	breq	.+38     	; 0x3ce0 <_nrk_scheduler+0x500>
    3cba:	25 8d       	ldd	r18, Z+29	; 0x1d
    3cbc:	36 8d       	ldd	r19, Z+30	; 0x1e
    3cbe:	47 8d       	ldd	r20, Z+31	; 0x1f
    3cc0:	50 a1       	ldd	r21, Z+32	; 0x20
    3cc2:	2a 3f       	cpi	r18, 0xFA	; 250
    3cc4:	31 05       	cpc	r19, r1
    3cc6:	41 05       	cpc	r20, r1
    3cc8:	51 05       	cpc	r21, r1
    3cca:	50 f4       	brcc	.+20     	; 0x3ce0 <_nrk_scheduler+0x500>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    3ccc:	b6 01       	movw	r22, r12
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	26 17       	cp	r18, r22
    3cd4:	37 07       	cpc	r19, r23
    3cd6:	48 07       	cpc	r20, r24
    3cd8:	59 07       	cpc	r21, r25
    3cda:	38 f4       	brcc	.+14     	; 0x3cea <_nrk_scheduler+0x50a>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    3cdc:	79 01       	movw	r14, r18
    3cde:	0c c0       	rjmp	.+24     	; 0x3cf8 <_nrk_scheduler+0x518>
    3ce0:	ab ef       	ldi	r26, 0xFB	; 251
    3ce2:	ea 16       	cp	r14, r26
    3ce4:	f1 04       	cpc	r15, r1
    3ce6:	40 f0       	brcs	.+16     	; 0x3cf8 <_nrk_scheduler+0x518>
    3ce8:	04 c0       	rjmp	.+8      	; 0x3cf2 <_nrk_scheduler+0x512>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    3cea:	bb ef       	ldi	r27, 0xFB	; 251
    3cec:	eb 16       	cp	r14, r27
    3cee:	f1 04       	cpc	r15, r1
    3cf0:	18 f0       	brcs	.+6      	; 0x3cf8 <_nrk_scheduler+0x518>
    3cf2:	8a ef       	ldi	r24, 0xFA	; 250
    3cf4:	e8 2e       	mov	r14, r24
    3cf6:	f1 2c       	mov	r15, r1
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    3cf8:	a0 92 2c 07 	sts	0x072C, r10
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    3cfc:	f0 93 3a 07 	sts	0x073A, r31
    3d00:	e0 93 39 07 	sts	0x0739, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    3d04:	e0 92 ea 05 	sts	0x05EA, r14

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    3d08:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	01 96       	adiw	r24, 0x01	; 1
    3d10:	8e 15       	cp	r24, r14
    3d12:	9f 05       	cpc	r25, r15
    3d14:	50 f0       	brcs	.+20     	; 0x3d2a <_nrk_scheduler+0x54a>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    3d16:	0e 94 14 20 	call	0x4028	; 0x4028 <_nrk_os_timer_get>
    3d1a:	e8 2e       	mov	r14, r24
    3d1c:	ff 24       	eor	r15, r15
    3d1e:	e2 e0       	ldi	r30, 0x02	; 2
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	ee 0e       	add	r14, r30
    3d24:	ff 1e       	adc	r15, r31
        _nrk_prev_timer_val=next_wake;
    3d26:	e0 92 ea 05 	sts	0x05EA, r14
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    3d2a:	00 23       	and	r16, r16
    3d2c:	11 f0       	breq	.+4      	; 0x3d32 <_nrk_scheduler+0x552>
    3d2e:	10 92 2d 07 	sts	0x072D, r1

    _nrk_set_next_wakeup(next_wake);
    3d32:	8e 2d       	mov	r24, r14
    3d34:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3c:	6c ed       	ldi	r22, 0xDC	; 220
    3d3e:	75 e0       	ldi	r23, 0x05	; 5
    3d40:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3d44:	0e 94 36 23 	call	0x466c	; 0x466c <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3d48:	0e 94 42 23 	call	0x4684	; 0x4684 <nrk_start_high_ready_task>

}
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	ff 90       	pop	r15
    3d5e:	ef 90       	pop	r14
    3d60:	df 90       	pop	r13
    3d62:	cf 90       	pop	r12
    3d64:	bf 90       	pop	r11
    3d66:	af 90       	pop	r10
    3d68:	9f 90       	pop	r9
    3d6a:	8f 90       	pop	r8
    3d6c:	7f 90       	pop	r7
    3d6e:	6f 90       	pop	r6
    3d70:	5f 90       	pop	r5
    3d72:	4f 90       	pop	r4
    3d74:	3f 90       	pop	r3
    3d76:	2f 90       	pop	r2
    3d78:	08 95       	ret

00003d7a <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3d7a:	89 e0       	ldi	r24, 0x09	; 9
    3d7c:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3d80:	8d e8       	ldi	r24, 0x8D	; 141
    3d82:	9c e3       	ldi	r25, 0x3C	; 60
    3d84:	90 93 29 01 	sts	0x0129, r25
    3d88:	80 93 28 01 	sts	0x0128, r24
}
    3d8c:	08 95       	ret

00003d8e <_nrk_precision_os_timer_reset>:

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3d8e:	10 92 25 01 	sts	0x0125, r1
    3d92:	10 92 24 01 	sts	0x0124, r1
}
    3d96:	08 95       	ret

00003d98 <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	91 f7       	brne	.-28     	; 0x3d98 <nrk_spin_wait_us>

}
    3db4:	08 95       	ret

00003db6 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3db6:	10 92 21 01 	sts	0x0121, r1
}
    3dba:	08 95       	ret

00003dbc <_nrk_precision_os_timer_get>:
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3dbc:	df 93       	push	r29
    3dbe:	cf 93       	push	r28
    3dc0:	00 d0       	rcall	.+0      	; 0x3dc2 <_nrk_precision_os_timer_get+0x6>
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3dc6:	80 91 24 01 	lds	r24, 0x0124
    3dca:	90 91 25 01 	lds	r25, 0x0125
    3dce:	9a 83       	std	Y+2, r25	; 0x02
    3dd0:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3dd2:	29 81       	ldd	r18, Y+1	; 0x01
    3dd4:	3a 81       	ldd	r19, Y+2	; 0x02
}
    3dd6:	c9 01       	movw	r24, r18
    3dd8:	0f 90       	pop	r0
    3dda:	0f 90       	pop	r0
    3ddc:	cf 91       	pop	r28
    3dde:	df 91       	pop	r29
    3de0:	08 95       	ret

00003de2 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3de2:	10 92 81 00 	sts	0x0081, r1
}
    3de6:	08 95       	ret

00003de8 <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	80 93 81 00 	sts	0x0081, r24
}
    3dee:	08 95       	ret

00003df0 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3df0:	83 b5       	in	r24, 0x23	; 35
    3df2:	81 60       	ori	r24, 0x01	; 1
    3df4:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3df6:	10 92 85 00 	sts	0x0085, r1
    3dfa:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    3dfe:	08 95       	ret

00003e00 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3e00:	df 93       	push	r29
    3e02:	cf 93       	push	r28
    3e04:	00 d0       	rcall	.+0      	; 0x3e06 <_nrk_high_speed_timer_get+0x6>
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3e0a:	80 91 84 00 	lds	r24, 0x0084
    3e0e:	90 91 85 00 	lds	r25, 0x0085
    3e12:	9a 83       	std	Y+2, r25	; 0x02
    3e14:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3e16:	29 81       	ldd	r18, Y+1	; 0x01
    3e18:	3a 81       	ldd	r19, Y+2	; 0x02
}
    3e1a:	c9 01       	movw	r24, r18
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	08 95       	ret

00003e26 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3e26:	ef 92       	push	r14
    3e28:	ff 92       	push	r15
    3e2a:	0f 93       	push	r16
    3e2c:	1f 93       	push	r17
    3e2e:	cf 93       	push	r28
    3e30:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3e32:	ec 01       	movw	r28, r24
    3e34:	cc 0f       	add	r28, r28
    3e36:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3e38:	8f ef       	ldi	r24, 0xFF	; 255
    3e3a:	c9 37       	cpi	r28, 0x79	; 121
    3e3c:	d8 07       	cpc	r29, r24
    3e3e:	10 f0       	brcs	.+4      	; 0x3e44 <nrk_high_speed_timer_wait+0x1e>
    3e40:	c0 e0       	ldi	r28, 0x00	; 0
    3e42:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3e44:	7e 01       	movw	r14, r28
    3e46:	00 e0       	ldi	r16, 0x00	; 0
    3e48:	10 e0       	ldi	r17, 0x00	; 0
    3e4a:	80 e0       	ldi	r24, 0x00	; 0
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	e6 0e       	add	r14, r22
    3e50:	f7 1e       	adc	r15, r23
    3e52:	08 1f       	adc	r16, r24
    3e54:	19 1f       	adc	r17, r25
if(tmp>65536) 
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	e9 16       	cp	r14, r25
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	f9 06       	cpc	r15, r25
    3e5e:	91 e0       	ldi	r25, 0x01	; 1
    3e60:	09 07       	cpc	r16, r25
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	19 07       	cpc	r17, r25
    3e66:	68 f0       	brcs	.+26     	; 0x3e82 <nrk_high_speed_timer_wait+0x5c>
	{
	tmp-=65536;
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	af ef       	ldi	r26, 0xFF	; 255
    3e6e:	bf ef       	ldi	r27, 0xFF	; 255
    3e70:	e8 0e       	add	r14, r24
    3e72:	f9 1e       	adc	r15, r25
    3e74:	0a 1f       	adc	r16, r26
    3e76:	1b 1f       	adc	r17, r27
	do{}while(_nrk_high_speed_timer_get()>start);
    3e78:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_nrk_high_speed_timer_get>
    3e7c:	c8 17       	cp	r28, r24
    3e7e:	d9 07       	cpc	r29, r25
    3e80:	d8 f3       	brcs	.-10     	; 0x3e78 <nrk_high_speed_timer_wait+0x52>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3e82:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_nrk_high_speed_timer_get>
    3e86:	8e 15       	cp	r24, r14
    3e88:	9f 05       	cpc	r25, r15
    3e8a:	d8 f3       	brcs	.-10     	; 0x3e82 <nrk_high_speed_timer_wait+0x5c>
}
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	1f 91       	pop	r17
    3e92:	0f 91       	pop	r16
    3e94:	ff 90       	pop	r15
    3e96:	ef 90       	pop	r14
    3e98:	08 95       	ret

00003e9a <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3e9a:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3e9e:	e0 e7       	ldi	r30, 0x70	; 112
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	8d 7f       	andi	r24, 0xFD	; 253
    3ea6:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3ea8:	80 81       	ld	r24, Z
    3eaa:	8e 7f       	andi	r24, 0xFE	; 254
    3eac:	80 83       	st	Z, r24
}
    3eae:	08 95       	ret

00003eb0 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3eb0:	80 93 b2 00 	sts	0x00B2, r24
}
    3eb4:	08 95       	ret

00003eb6 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3eb6:	e0 e7       	ldi	r30, 0x70	; 112
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	80 81       	ld	r24, Z
    3ebc:	83 60       	ori	r24, 0x03	; 3
    3ebe:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3ec0:	83 e0       	ldi	r24, 0x03	; 3
    3ec2:	80 93 b1 00 	sts	0x00B1, r24
}
    3ec6:	08 95       	ret

00003ec8 <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3ec8:	83 b5       	in	r24, 0x23	; 35
    3eca:	82 60       	ori	r24, 0x02	; 2
    3ecc:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3ece:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3ed2:	10 92 ae 05 	sts	0x05AE, r1
    _nrk_prev_timer_val=0;
    3ed6:	10 92 ea 05 	sts	0x05EA, r1
}
    3eda:	08 95       	ret

00003edc <_nrk_setup_timer>:

}


void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
    3edc:	8e ef       	ldi	r24, 0xFE	; 254
    3ede:	80 93 ea 05 	sts	0x05EA, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3ee2:	90 e2       	ldi	r25, 0x20	; 32
    3ee4:	90 93 b6 00 	sts	0x00B6, r25
  OCR2A = _nrk_prev_timer_val;
    3ee8:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3eec:	83 e0       	ldi	r24, 0x03	; 3
    3eee:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3ef0:	92 e0       	ldi	r25, 0x02	; 2
    3ef2:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3ef6:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3efa:	93 b5       	in	r25, 0x23	; 35
    3efc:	92 60       	ori	r25, 0x02	; 2
    3efe:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3f00:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3f02:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3f04:	83 b5       	in	r24, 0x23	; 35
    3f06:	82 60       	ori	r24, 0x02	; 2
    3f08:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3f0a:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3f14:	10 92 85 00 	sts	0x0085, r1
    3f18:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3f1c:	83 b5       	in	r24, 0x23	; 35
    3f1e:	82 60       	ori	r24, 0x02	; 2
    3f20:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3f22:	83 b5       	in	r24, 0x23	; 35
    3f24:	81 60       	ori	r24, 0x01	; 1
    3f26:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3f28:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3f2c:	10 92 25 01 	sts	0x0125, r1
    3f30:	10 92 24 01 	sts	0x0124, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3f34:	83 b5       	in	r24, 0x23	; 35
    3f36:	82 60       	ori	r24, 0x02	; 2
    3f38:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3f3a:	83 b5       	in	r24, 0x23	; 35
    3f3c:	81 60       	ori	r24, 0x01	; 1
    3f3e:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3f40:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_nrk_os_timer_reset>
  _nrk_precision_os_timer_reset();
    3f44:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <_nrk_precision_os_timer_reset>
  _nrk_os_timer_start();
    3f48:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3f4c:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3f50:	10 92 ae 05 	sts	0x05AE, r1
}
    3f54:	08 95       	ret

00003f56 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3f56:	80 91 b3 00 	lds	r24, 0x00B3
}
    3f5a:	8f 5f       	subi	r24, 0xFF	; 255
    3f5c:	08 95       	ret

00003f5e <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3f5e:	81 50       	subi	r24, 0x01	; 1
    3f60:	80 93 b3 00 	sts	0x00B3, r24
}
    3f64:	08 95       	ret

00003f66 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f66:	88 23       	and	r24, r24
    3f68:	11 f4       	brne	.+4      	; 0x3f6e <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3f6a:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3f6e:	8f ef       	ldi	r24, 0xFF	; 255
    3f70:	08 95       	ret

00003f72 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f72:	88 23       	and	r24, r24
    3f74:	31 f4       	brne	.+12     	; 0x3f82 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3f76:	10 92 95 00 	sts	0x0095, r1
    3f7a:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	08 95       	ret
	}
return NRK_ERROR;
    3f82:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f84:	08 95       	ret

00003f86 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f86:	88 23       	and	r24, r24
    3f88:	29 f4       	brne	.+10     	; 0x3f94 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3f8a:	20 91 94 00 	lds	r18, 0x0094
    3f8e:	30 91 95 00 	lds	r19, 0x0095
    3f92:	02 c0       	rjmp	.+4      	; 0x3f98 <nrk_timer_int_read+0x12>
	}
return 0;
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0

}
    3f98:	c9 01       	movw	r24, r18
    3f9a:	08 95       	ret

00003f9c <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3f9c:	88 23       	and	r24, r24
    3f9e:	29 f4       	brne	.+10     	; 0x3faa <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3fa0:	82 e0       	ldi	r24, 0x02	; 2
    3fa2:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	08 95       	ret
	}
return NRK_ERROR;
    3faa:	8f ef       	ldi	r24, 0xFF	; 255
}
    3fac:	08 95       	ret

00003fae <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3fae:	88 23       	and	r24, r24
    3fb0:	b9 f5       	brne	.+110    	; 0x4020 <nrk_timer_int_configure+0x72>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	85 30       	cpi	r24, 0x05	; 5
    3fb8:	91 05       	cpc	r25, r1
    3fba:	10 f4       	brcc	.+4      	; 0x3fc0 <nrk_timer_int_configure+0x12>
    3fbc:	60 93 e3 05 	sts	0x05E3, r22
	TCCR3A = 0;  
    3fc0:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3fc4:	88 e0       	ldi	r24, 0x08	; 8
    3fc6:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3fca:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3fce:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3fd2:	30 93 9e 05 	sts	0x059E, r19
    3fd6:	20 93 9d 05 	sts	0x059D, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3fda:	80 91 e3 05 	lds	r24, 0x05E3
    3fde:	81 30       	cpi	r24, 0x01	; 1
    3fe0:	21 f4       	brne	.+8      	; 0x3fea <nrk_timer_int_configure+0x3c>
    3fe2:	80 91 91 00 	lds	r24, 0x0091
    3fe6:	81 60       	ori	r24, 0x01	; 1
    3fe8:	0b c0       	rjmp	.+22     	; 0x4000 <nrk_timer_int_configure+0x52>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3fea:	82 30       	cpi	r24, 0x02	; 2
    3fec:	21 f4       	brne	.+8      	; 0x3ff6 <nrk_timer_int_configure+0x48>
    3fee:	80 91 91 00 	lds	r24, 0x0091
    3ff2:	82 60       	ori	r24, 0x02	; 2
    3ff4:	05 c0       	rjmp	.+10     	; 0x4000 <nrk_timer_int_configure+0x52>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3ff6:	83 30       	cpi	r24, 0x03	; 3
    3ff8:	39 f4       	brne	.+14     	; 0x4008 <nrk_timer_int_configure+0x5a>
    3ffa:	80 91 91 00 	lds	r24, 0x0091
    3ffe:	83 60       	ori	r24, 0x03	; 3
    4000:	80 93 91 00 	sts	0x0091, r24
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	08 95       	ret
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4008:	84 30       	cpi	r24, 0x04	; 4
    400a:	21 f4       	brne	.+8      	; 0x4014 <nrk_timer_int_configure+0x66>
    400c:	80 91 91 00 	lds	r24, 0x0091
    4010:	84 60       	ori	r24, 0x04	; 4
    4012:	f6 cf       	rjmp	.-20     	; 0x4000 <nrk_timer_int_configure+0x52>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4014:	85 30       	cpi	r24, 0x05	; 5
    4016:	31 f4       	brne	.+12     	; 0x4024 <nrk_timer_int_configure+0x76>
    4018:	80 91 91 00 	lds	r24, 0x0091
    401c:	85 60       	ori	r24, 0x05	; 5
    401e:	f0 cf       	rjmp	.-32     	; 0x4000 <nrk_timer_int_configure+0x52>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    4020:	8f ef       	ldi	r24, 0xFF	; 255
    4022:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4024:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4026:	08 95       	ret

00004028 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4028:	80 91 b2 00 	lds	r24, 0x00B2
}
    402c:	08 95       	ret

0000402e <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    402e:	1f 92       	push	r1
    4030:	0f 92       	push	r0
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	0f 92       	push	r0
    4036:	0b b6       	in	r0, 0x3b	; 59
    4038:	0f 92       	push	r0
    403a:	11 24       	eor	r1, r1
    403c:	2f 93       	push	r18
    403e:	3f 93       	push	r19
    4040:	4f 93       	push	r20
    4042:	5f 93       	push	r21
    4044:	6f 93       	push	r22
    4046:	7f 93       	push	r23
    4048:	8f 93       	push	r24
    404a:	9f 93       	push	r25
    404c:	af 93       	push	r26
    404e:	bf 93       	push	r27
    4050:	ef 93       	push	r30
    4052:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4054:	8a e0       	ldi	r24, 0x0A	; 10
    4056:	60 e0       	ldi	r22, 0x00	; 0
    4058:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
    405c:	ff cf       	rjmp	.-2      	; 0x405c <__vector_default+0x2e>

0000405e <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    405e:	0f 92       	push	r0
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	0f 92       	push	r0
    4064:	1f 92       	push	r1
    4066:	2f 92       	push	r2
    4068:	3f 92       	push	r3
    406a:	4f 92       	push	r4
    406c:	5f 92       	push	r5
    406e:	6f 92       	push	r6
    4070:	7f 92       	push	r7
    4072:	8f 92       	push	r8
    4074:	9f 92       	push	r9
    4076:	af 92       	push	r10
    4078:	bf 92       	push	r11
    407a:	cf 92       	push	r12
    407c:	df 92       	push	r13
    407e:	ef 92       	push	r14
    4080:	ff 92       	push	r15
    4082:	0f 93       	push	r16
    4084:	1f 93       	push	r17
    4086:	2f 93       	push	r18
    4088:	3f 93       	push	r19
    408a:	4f 93       	push	r20
    408c:	5f 93       	push	r21
    408e:	6f 93       	push	r22
    4090:	7f 93       	push	r23
    4092:	8f 93       	push	r24
    4094:	9f 93       	push	r25
    4096:	af 93       	push	r26
    4098:	bf 93       	push	r27
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	ef 93       	push	r30
    40a0:	ff 93       	push	r31
    40a2:	a0 91 39 07 	lds	r26, 0x0739
    40a6:	b0 91 3a 07 	lds	r27, 0x073A
    40aa:	0d b6       	in	r0, 0x3d	; 61
    40ac:	0d 92       	st	X+, r0
    40ae:	0e b6       	in	r0, 0x3e	; 62
    40b0:	0d 92       	st	X+, r0
    40b2:	1f 92       	push	r1
    40b4:	a0 91 d1 05 	lds	r26, 0x05D1
    40b8:	b0 91 d2 05 	lds	r27, 0x05D2
    40bc:	1e 90       	ld	r1, -X
    40be:	be bf       	out	0x3e, r27	; 62
    40c0:	ad bf       	out	0x3d, r26	; 61
    40c2:	08 95       	ret

000040c4 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    40c4:	1f 92       	push	r1
    40c6:	0f 92       	push	r0
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	0f 92       	push	r0
    40cc:	0b b6       	in	r0, 0x3b	; 59
    40ce:	0f 92       	push	r0
    40d0:	11 24       	eor	r1, r1
    40d2:	2f 93       	push	r18
    40d4:	3f 93       	push	r19
    40d6:	4f 93       	push	r20
    40d8:	5f 93       	push	r21
    40da:	6f 93       	push	r22
    40dc:	7f 93       	push	r23
    40de:	8f 93       	push	r24
    40e0:	9f 93       	push	r25
    40e2:	af 93       	push	r26
    40e4:	bf 93       	push	r27
    40e6:	ef 93       	push	r30
    40e8:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    40ea:	e0 91 9d 05 	lds	r30, 0x059D
    40ee:	f0 91 9e 05 	lds	r31, 0x059E
    40f2:	30 97       	sbiw	r30, 0x00	; 0
    40f4:	11 f0       	breq	.+4      	; 0x40fa <__vector_32+0x36>
    40f6:	09 95       	icall
    40f8:	04 c0       	rjmp	.+8      	; 0x4102 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    40fa:	8a e0       	ldi	r24, 0x0A	; 10
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
	return;  	
}
    4102:	ff 91       	pop	r31
    4104:	ef 91       	pop	r30
    4106:	bf 91       	pop	r27
    4108:	af 91       	pop	r26
    410a:	9f 91       	pop	r25
    410c:	8f 91       	pop	r24
    410e:	7f 91       	pop	r23
    4110:	6f 91       	pop	r22
    4112:	5f 91       	pop	r21
    4114:	4f 91       	pop	r20
    4116:	3f 91       	pop	r19
    4118:	2f 91       	pop	r18
    411a:	0f 90       	pop	r0
    411c:	0b be       	out	0x3b, r0	; 59
    411e:	0f 90       	pop	r0
    4120:	0f be       	out	0x3f, r0	; 63
    4122:	0f 90       	pop	r0
    4124:	1f 90       	pop	r1
    4126:	18 95       	reti

00004128 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4128:	1f 92       	push	r1
    412a:	0f 92       	push	r0
    412c:	0f b6       	in	r0, 0x3f	; 63
    412e:	0f 92       	push	r0
    4130:	11 24       	eor	r1, r1

	return;  	
} 
    4132:	0f 90       	pop	r0
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	0f 90       	pop	r0
    4138:	1f 90       	pop	r1
    413a:	18 95       	reti

0000413c <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    413c:	04 b6       	in	r0, 0x34	; 52
    413e:	03 fc       	sbrc	r0, 3
    4140:	02 c0       	rjmp	.+4      	; 0x4146 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	01 c0       	rjmp	.+2      	; 0x4148 <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    4146:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4148:	04 b6       	in	r0, 0x34	; 52
    414a:	02 fe       	sbrs	r0, 2
    414c:	06 c0       	rjmp	.+12     	; 0x415a <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    414e:	94 b7       	in	r25, 0x34	; 52
    4150:	9b 7f       	andi	r25, 0xFB	; 251
    4152:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4154:	04 b6       	in	r0, 0x34	; 52
    4156:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4158:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    415a:	04 b6       	in	r0, 0x34	; 52
    415c:	01 fe       	sbrs	r0, 1
    415e:	05 c0       	rjmp	.+10     	; 0x416a <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4160:	94 b7       	in	r25, 0x34	; 52
    4162:	9d 7f       	andi	r25, 0xFD	; 253
    4164:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4166:	82 60       	ori	r24, 0x02	; 2
    4168:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    416a:	88 23       	and	r24, r24
    416c:	61 f4       	brne	.+24     	; 0x4186 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    416e:	04 b6       	in	r0, 0x34	; 52
    4170:	00 fe       	sbrs	r0, 0
    4172:	04 c0       	rjmp	.+8      	; 0x417c <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4174:	94 b7       	in	r25, 0x34	; 52
    4176:	9e 7f       	andi	r25, 0xFE	; 254
    4178:	94 bf       	out	0x34, r25	; 52
    417a:	01 c0       	rjmp	.+2      	; 0x417e <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    417c:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    417e:	90 91 b0 00 	lds	r25, 0x00B0
    4182:	91 11       	cpse	r25, r1
    4184:	81 60       	ori	r24, 0x01	; 1

return error;
}
    4186:	08 95       	ret

00004188 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4188:	88 23       	and	r24, r24
    418a:	11 f4       	brne	.+4      	; 0x4190 <nrk_ext_int_enable+0x8>
    418c:	e8 9a       	sbi	0x1d, 0	; 29
    418e:	39 c0       	rjmp	.+114    	; 0x4202 <__stack+0x3>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4190:	81 30       	cpi	r24, 0x01	; 1
    4192:	11 f4       	brne	.+4      	; 0x4198 <nrk_ext_int_enable+0x10>
    4194:	e9 9a       	sbi	0x1d, 1	; 29
    4196:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4198:	82 30       	cpi	r24, 0x02	; 2
    419a:	11 f4       	brne	.+4      	; 0x41a0 <nrk_ext_int_enable+0x18>
    419c:	ea 9a       	sbi	0x1d, 2	; 29
    419e:	31 c0       	rjmp	.+98     	; 0x4202 <__stack+0x3>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    41a0:	83 30       	cpi	r24, 0x03	; 3
    41a2:	21 f4       	brne	.+8      	; 0x41ac <nrk_ext_int_enable+0x24>
    41a4:	80 91 6b 00 	lds	r24, 0x006B
    41a8:	81 60       	ori	r24, 0x01	; 1
    41aa:	29 c0       	rjmp	.+82     	; 0x41fe <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    41ac:	84 30       	cpi	r24, 0x04	; 4
    41ae:	21 f4       	brne	.+8      	; 0x41b8 <nrk_ext_int_enable+0x30>
    41b0:	80 91 6b 00 	lds	r24, 0x006B
    41b4:	82 60       	ori	r24, 0x02	; 2
    41b6:	23 c0       	rjmp	.+70     	; 0x41fe <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    41b8:	85 30       	cpi	r24, 0x05	; 5
    41ba:	21 f4       	brne	.+8      	; 0x41c4 <nrk_ext_int_enable+0x3c>
    41bc:	80 91 6b 00 	lds	r24, 0x006B
    41c0:	84 60       	ori	r24, 0x04	; 4
    41c2:	1d c0       	rjmp	.+58     	; 0x41fe <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    41c4:	86 30       	cpi	r24, 0x06	; 6
    41c6:	21 f4       	brne	.+8      	; 0x41d0 <nrk_ext_int_enable+0x48>
    41c8:	80 91 6b 00 	lds	r24, 0x006B
    41cc:	88 60       	ori	r24, 0x08	; 8
    41ce:	17 c0       	rjmp	.+46     	; 0x41fe <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    41d0:	87 30       	cpi	r24, 0x07	; 7
    41d2:	21 f4       	brne	.+8      	; 0x41dc <nrk_ext_int_enable+0x54>
    41d4:	80 91 6b 00 	lds	r24, 0x006B
    41d8:	80 61       	ori	r24, 0x10	; 16
    41da:	11 c0       	rjmp	.+34     	; 0x41fe <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    41dc:	88 30       	cpi	r24, 0x08	; 8
    41de:	21 f4       	brne	.+8      	; 0x41e8 <nrk_ext_int_enable+0x60>
    41e0:	80 91 6b 00 	lds	r24, 0x006B
    41e4:	80 62       	ori	r24, 0x20	; 32
    41e6:	0b c0       	rjmp	.+22     	; 0x41fe <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    41e8:	89 30       	cpi	r24, 0x09	; 9
    41ea:	21 f4       	brne	.+8      	; 0x41f4 <nrk_ext_int_enable+0x6c>
    41ec:	80 91 6b 00 	lds	r24, 0x006B
    41f0:	80 64       	ori	r24, 0x40	; 64
    41f2:	05 c0       	rjmp	.+10     	; 0x41fe <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    41f4:	8a 30       	cpi	r24, 0x0A	; 10
    41f6:	39 f4       	brne	.+14     	; 0x4206 <__stack+0x7>
    41f8:	80 91 6b 00 	lds	r24, 0x006B
    41fc:	80 68       	ori	r24, 0x80	; 128
    41fe:	80 93 6b 00 	sts	0x006B, r24
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	08 95       	ret
return NRK_ERROR;
    4206:	8f ef       	ldi	r24, 0xFF	; 255
}
    4208:	08 95       	ret

0000420a <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    420a:	88 23       	and	r24, r24
    420c:	11 f4       	brne	.+4      	; 0x4212 <nrk_ext_int_disable+0x8>
    420e:	e8 98       	cbi	0x1d, 0	; 29
    4210:	39 c0       	rjmp	.+114    	; 0x4284 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4212:	81 30       	cpi	r24, 0x01	; 1
    4214:	11 f4       	brne	.+4      	; 0x421a <nrk_ext_int_disable+0x10>
    4216:	e9 98       	cbi	0x1d, 1	; 29
    4218:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    421a:	82 30       	cpi	r24, 0x02	; 2
    421c:	11 f4       	brne	.+4      	; 0x4222 <nrk_ext_int_disable+0x18>
    421e:	e9 98       	cbi	0x1d, 1	; 29
    4220:	31 c0       	rjmp	.+98     	; 0x4284 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4222:	83 30       	cpi	r24, 0x03	; 3
    4224:	21 f4       	brne	.+8      	; 0x422e <nrk_ext_int_disable+0x24>
    4226:	80 91 6b 00 	lds	r24, 0x006B
    422a:	8e 7f       	andi	r24, 0xFE	; 254
    422c:	29 c0       	rjmp	.+82     	; 0x4280 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    422e:	84 30       	cpi	r24, 0x04	; 4
    4230:	21 f4       	brne	.+8      	; 0x423a <nrk_ext_int_disable+0x30>
    4232:	80 91 6b 00 	lds	r24, 0x006B
    4236:	8d 7f       	andi	r24, 0xFD	; 253
    4238:	23 c0       	rjmp	.+70     	; 0x4280 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    423a:	85 30       	cpi	r24, 0x05	; 5
    423c:	21 f4       	brne	.+8      	; 0x4246 <nrk_ext_int_disable+0x3c>
    423e:	80 91 6b 00 	lds	r24, 0x006B
    4242:	8b 7f       	andi	r24, 0xFB	; 251
    4244:	1d c0       	rjmp	.+58     	; 0x4280 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4246:	86 30       	cpi	r24, 0x06	; 6
    4248:	21 f4       	brne	.+8      	; 0x4252 <nrk_ext_int_disable+0x48>
    424a:	80 91 6b 00 	lds	r24, 0x006B
    424e:	87 7f       	andi	r24, 0xF7	; 247
    4250:	17 c0       	rjmp	.+46     	; 0x4280 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4252:	87 30       	cpi	r24, 0x07	; 7
    4254:	21 f4       	brne	.+8      	; 0x425e <nrk_ext_int_disable+0x54>
    4256:	80 91 6b 00 	lds	r24, 0x006B
    425a:	8f 7e       	andi	r24, 0xEF	; 239
    425c:	11 c0       	rjmp	.+34     	; 0x4280 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    425e:	88 30       	cpi	r24, 0x08	; 8
    4260:	21 f4       	brne	.+8      	; 0x426a <nrk_ext_int_disable+0x60>
    4262:	80 91 6b 00 	lds	r24, 0x006B
    4266:	8f 7d       	andi	r24, 0xDF	; 223
    4268:	0b c0       	rjmp	.+22     	; 0x4280 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    426a:	89 30       	cpi	r24, 0x09	; 9
    426c:	21 f4       	brne	.+8      	; 0x4276 <nrk_ext_int_disable+0x6c>
    426e:	80 91 6b 00 	lds	r24, 0x006B
    4272:	8f 7b       	andi	r24, 0xBF	; 191
    4274:	05 c0       	rjmp	.+10     	; 0x4280 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4276:	8a 30       	cpi	r24, 0x0A	; 10
    4278:	39 f4       	brne	.+14     	; 0x4288 <nrk_ext_int_disable+0x7e>
    427a:	80 91 6b 00 	lds	r24, 0x006B
    427e:	8f 77       	andi	r24, 0x7F	; 127
    4280:	80 93 6b 00 	sts	0x006B, r24
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	08 95       	ret
return NRK_ERROR;
    4288:	8f ef       	ldi	r24, 0xFF	; 255
}
    428a:	08 95       	ret

0000428c <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    428c:	88 23       	and	r24, r24
    428e:	39 f5       	brne	.+78     	; 0x42de <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    4290:	50 93 59 07 	sts	0x0759, r21
    4294:	40 93 58 07 	sts	0x0758, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4298:	66 23       	and	r22, r22
    429a:	21 f4       	brne	.+8      	; 0x42a4 <nrk_ext_int_configure+0x18>
    429c:	80 91 69 00 	lds	r24, 0x0069
    42a0:	8c 7f       	andi	r24, 0xFC	; 252
    42a2:	66 c0       	rjmp	.+204    	; 0x4370 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    42a4:	61 30       	cpi	r22, 0x01	; 1
    42a6:	49 f4       	brne	.+18     	; 0x42ba <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    42a8:	80 91 69 00 	lds	r24, 0x0069
    42ac:	8d 7f       	andi	r24, 0xFD	; 253
    42ae:	80 93 69 00 	sts	0x0069, r24
    42b2:	80 91 69 00 	lds	r24, 0x0069
    42b6:	81 60       	ori	r24, 0x01	; 1
    42b8:	5b c0       	rjmp	.+182    	; 0x4370 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    42ba:	62 30       	cpi	r22, 0x02	; 2
    42bc:	49 f4       	brne	.+18     	; 0x42d0 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    42be:	80 91 69 00 	lds	r24, 0x0069
    42c2:	82 60       	ori	r24, 0x02	; 2
    42c4:	80 93 69 00 	sts	0x0069, r24
    42c8:	80 91 69 00 	lds	r24, 0x0069
    42cc:	8e 7f       	andi	r24, 0xFE	; 254
    42ce:	50 c0       	rjmp	.+160    	; 0x4370 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    42d0:	63 30       	cpi	r22, 0x03	; 3
    42d2:	09 f0       	breq	.+2      	; 0x42d6 <nrk_ext_int_configure+0x4a>
    42d4:	62 c0       	rjmp	.+196    	; 0x439a <nrk_ext_int_configure+0x10e>
    42d6:	80 91 69 00 	lds	r24, 0x0069
    42da:	83 60       	ori	r24, 0x03	; 3
    42dc:	49 c0       	rjmp	.+146    	; 0x4370 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    42de:	81 30       	cpi	r24, 0x01	; 1
    42e0:	31 f5       	brne	.+76     	; 0x432e <nrk_ext_int_configure+0xa2>
	{
	ext_int1_callback=callback_func;
    42e2:	50 93 57 07 	sts	0x0757, r21
    42e6:	40 93 56 07 	sts	0x0756, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    42ea:	66 23       	and	r22, r22
    42ec:	21 f4       	brne	.+8      	; 0x42f6 <nrk_ext_int_configure+0x6a>
    42ee:	80 91 69 00 	lds	r24, 0x0069
    42f2:	83 7f       	andi	r24, 0xF3	; 243
    42f4:	3d c0       	rjmp	.+122    	; 0x4370 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    42f6:	61 30       	cpi	r22, 0x01	; 1
    42f8:	49 f4       	brne	.+18     	; 0x430c <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    42fa:	80 91 69 00 	lds	r24, 0x0069
    42fe:	87 7f       	andi	r24, 0xF7	; 247
    4300:	80 93 69 00 	sts	0x0069, r24
    4304:	80 91 69 00 	lds	r24, 0x0069
    4308:	84 60       	ori	r24, 0x04	; 4
    430a:	32 c0       	rjmp	.+100    	; 0x4370 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    430c:	62 30       	cpi	r22, 0x02	; 2
    430e:	49 f4       	brne	.+18     	; 0x4322 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4310:	80 91 69 00 	lds	r24, 0x0069
    4314:	88 60       	ori	r24, 0x08	; 8
    4316:	80 93 69 00 	sts	0x0069, r24
    431a:	80 91 69 00 	lds	r24, 0x0069
    431e:	8b 7f       	andi	r24, 0xFB	; 251
    4320:	27 c0       	rjmp	.+78     	; 0x4370 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4322:	63 30       	cpi	r22, 0x03	; 3
    4324:	d1 f5       	brne	.+116    	; 0x439a <nrk_ext_int_configure+0x10e>
    4326:	80 91 69 00 	lds	r24, 0x0069
    432a:	8c 60       	ori	r24, 0x0C	; 12
    432c:	21 c0       	rjmp	.+66     	; 0x4370 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    432e:	82 30       	cpi	r24, 0x02	; 2
    4330:	41 f5       	brne	.+80     	; 0x4382 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    4332:	50 93 5b 07 	sts	0x075B, r21
    4336:	40 93 5a 07 	sts	0x075A, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    433a:	66 23       	and	r22, r22
    433c:	21 f4       	brne	.+8      	; 0x4346 <nrk_ext_int_configure+0xba>
    433e:	80 91 69 00 	lds	r24, 0x0069
    4342:	8f 7c       	andi	r24, 0xCF	; 207
    4344:	15 c0       	rjmp	.+42     	; 0x4370 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    4346:	61 30       	cpi	r22, 0x01	; 1
    4348:	49 f4       	brne	.+18     	; 0x435c <nrk_ext_int_configure+0xd0>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    434a:	80 91 69 00 	lds	r24, 0x0069
    434e:	8f 7d       	andi	r24, 0xDF	; 223
    4350:	80 93 69 00 	sts	0x0069, r24
    4354:	80 91 69 00 	lds	r24, 0x0069
    4358:	80 61       	ori	r24, 0x10	; 16
    435a:	0a c0       	rjmp	.+20     	; 0x4370 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    435c:	62 30       	cpi	r22, 0x02	; 2
    435e:	59 f4       	brne	.+22     	; 0x4376 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4360:	80 91 69 00 	lds	r24, 0x0069
    4364:	80 62       	ori	r24, 0x20	; 32
    4366:	80 93 69 00 	sts	0x0069, r24
    436a:	80 91 69 00 	lds	r24, 0x0069
    436e:	8f 7e       	andi	r24, 0xEF	; 239
    4370:	80 93 69 00 	sts	0x0069, r24
    4374:	12 c0       	rjmp	.+36     	; 0x439a <nrk_ext_int_configure+0x10e>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4376:	63 30       	cpi	r22, 0x03	; 3
    4378:	81 f4       	brne	.+32     	; 0x439a <nrk_ext_int_configure+0x10e>
    437a:	80 91 69 00 	lds	r24, 0x0069
    437e:	80 63       	ori	r24, 0x30	; 48
    4380:	f7 cf       	rjmp	.-18     	; 0x4370 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4382:	83 50       	subi	r24, 0x03	; 3
    4384:	88 30       	cpi	r24, 0x08	; 8
    4386:	58 f4       	brcc	.+22     	; 0x439e <nrk_ext_int_configure+0x112>
	PCICR |= BM(PCIE0);	
    4388:	80 91 68 00 	lds	r24, 0x0068
    438c:	81 60       	ori	r24, 0x01	; 1
    438e:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4392:	50 93 5d 07 	sts	0x075D, r21
    4396:	40 93 5c 07 	sts	0x075C, r20
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
	return NRK_OK;
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	08 95       	ret
if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
	PCICR |= BM(PCIE0);	
	pc_int0_callback=callback_func;
	return NRK_OK;
	}
return NRK_ERROR;
    439e:	8f ef       	ldi	r24, 0xFF	; 255
}
    43a0:	08 95       	ret

000043a2 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    43a2:	1f 92       	push	r1
    43a4:	0f 92       	push	r0
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	0f 92       	push	r0
    43aa:	0b b6       	in	r0, 0x3b	; 59
    43ac:	0f 92       	push	r0
    43ae:	11 24       	eor	r1, r1
    43b0:	2f 93       	push	r18
    43b2:	3f 93       	push	r19
    43b4:	4f 93       	push	r20
    43b6:	5f 93       	push	r21
    43b8:	6f 93       	push	r22
    43ba:	7f 93       	push	r23
    43bc:	8f 93       	push	r24
    43be:	9f 93       	push	r25
    43c0:	af 93       	push	r26
    43c2:	bf 93       	push	r27
    43c4:	ef 93       	push	r30
    43c6:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    43c8:	e0 91 5c 07 	lds	r30, 0x075C
    43cc:	f0 91 5d 07 	lds	r31, 0x075D
    43d0:	30 97       	sbiw	r30, 0x00	; 0
    43d2:	11 f0       	breq	.+4      	; 0x43d8 <__vector_9+0x36>
    43d4:	09 95       	icall
    43d6:	04 c0       	rjmp	.+8      	; 0x43e0 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43d8:	8a e0       	ldi	r24, 0x0A	; 10
    43da:	60 e0       	ldi	r22, 0x00	; 0
    43dc:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
	return;  	
}
    43e0:	ff 91       	pop	r31
    43e2:	ef 91       	pop	r30
    43e4:	bf 91       	pop	r27
    43e6:	af 91       	pop	r26
    43e8:	9f 91       	pop	r25
    43ea:	8f 91       	pop	r24
    43ec:	7f 91       	pop	r23
    43ee:	6f 91       	pop	r22
    43f0:	5f 91       	pop	r21
    43f2:	4f 91       	pop	r20
    43f4:	3f 91       	pop	r19
    43f6:	2f 91       	pop	r18
    43f8:	0f 90       	pop	r0
    43fa:	0b be       	out	0x3b, r0	; 59
    43fc:	0f 90       	pop	r0
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	0f 90       	pop	r0
    4402:	1f 90       	pop	r1
    4404:	18 95       	reti

00004406 <__vector_1>:


SIGNAL(INT0_vect) {
    4406:	1f 92       	push	r1
    4408:	0f 92       	push	r0
    440a:	0f b6       	in	r0, 0x3f	; 63
    440c:	0f 92       	push	r0
    440e:	0b b6       	in	r0, 0x3b	; 59
    4410:	0f 92       	push	r0
    4412:	11 24       	eor	r1, r1
    4414:	2f 93       	push	r18
    4416:	3f 93       	push	r19
    4418:	4f 93       	push	r20
    441a:	5f 93       	push	r21
    441c:	6f 93       	push	r22
    441e:	7f 93       	push	r23
    4420:	8f 93       	push	r24
    4422:	9f 93       	push	r25
    4424:	af 93       	push	r26
    4426:	bf 93       	push	r27
    4428:	ef 93       	push	r30
    442a:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    442c:	e0 91 58 07 	lds	r30, 0x0758
    4430:	f0 91 59 07 	lds	r31, 0x0759
    4434:	30 97       	sbiw	r30, 0x00	; 0
    4436:	11 f0       	breq	.+4      	; 0x443c <__vector_1+0x36>
    4438:	09 95       	icall
    443a:	04 c0       	rjmp	.+8      	; 0x4444 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    443c:	8a e0       	ldi	r24, 0x0A	; 10
    443e:	60 e0       	ldi	r22, 0x00	; 0
    4440:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
	return;  	
}
    4444:	ff 91       	pop	r31
    4446:	ef 91       	pop	r30
    4448:	bf 91       	pop	r27
    444a:	af 91       	pop	r26
    444c:	9f 91       	pop	r25
    444e:	8f 91       	pop	r24
    4450:	7f 91       	pop	r23
    4452:	6f 91       	pop	r22
    4454:	5f 91       	pop	r21
    4456:	4f 91       	pop	r20
    4458:	3f 91       	pop	r19
    445a:	2f 91       	pop	r18
    445c:	0f 90       	pop	r0
    445e:	0b be       	out	0x3b, r0	; 59
    4460:	0f 90       	pop	r0
    4462:	0f be       	out	0x3f, r0	; 63
    4464:	0f 90       	pop	r0
    4466:	1f 90       	pop	r1
    4468:	18 95       	reti

0000446a <__vector_2>:

SIGNAL(INT1_vect) {
    446a:	1f 92       	push	r1
    446c:	0f 92       	push	r0
    446e:	0f b6       	in	r0, 0x3f	; 63
    4470:	0f 92       	push	r0
    4472:	0b b6       	in	r0, 0x3b	; 59
    4474:	0f 92       	push	r0
    4476:	11 24       	eor	r1, r1
    4478:	2f 93       	push	r18
    447a:	3f 93       	push	r19
    447c:	4f 93       	push	r20
    447e:	5f 93       	push	r21
    4480:	6f 93       	push	r22
    4482:	7f 93       	push	r23
    4484:	8f 93       	push	r24
    4486:	9f 93       	push	r25
    4488:	af 93       	push	r26
    448a:	bf 93       	push	r27
    448c:	ef 93       	push	r30
    448e:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    4490:	e0 91 56 07 	lds	r30, 0x0756
    4494:	f0 91 57 07 	lds	r31, 0x0757
    4498:	30 97       	sbiw	r30, 0x00	; 0
    449a:	11 f0       	breq	.+4      	; 0x44a0 <__vector_2+0x36>
    449c:	09 95       	icall
    449e:	04 c0       	rjmp	.+8      	; 0x44a8 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    44a0:	8a e0       	ldi	r24, 0x0A	; 10
    44a2:	60 e0       	ldi	r22, 0x00	; 0
    44a4:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
	return;  	
}
    44a8:	ff 91       	pop	r31
    44aa:	ef 91       	pop	r30
    44ac:	bf 91       	pop	r27
    44ae:	af 91       	pop	r26
    44b0:	9f 91       	pop	r25
    44b2:	8f 91       	pop	r24
    44b4:	7f 91       	pop	r23
    44b6:	6f 91       	pop	r22
    44b8:	5f 91       	pop	r21
    44ba:	4f 91       	pop	r20
    44bc:	3f 91       	pop	r19
    44be:	2f 91       	pop	r18
    44c0:	0f 90       	pop	r0
    44c2:	0b be       	out	0x3b, r0	; 59
    44c4:	0f 90       	pop	r0
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	0f 90       	pop	r0
    44ca:	1f 90       	pop	r1
    44cc:	18 95       	reti

000044ce <__vector_3>:

SIGNAL(INT2_vect) {
    44ce:	1f 92       	push	r1
    44d0:	0f 92       	push	r0
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	0f 92       	push	r0
    44d6:	0b b6       	in	r0, 0x3b	; 59
    44d8:	0f 92       	push	r0
    44da:	11 24       	eor	r1, r1
    44dc:	2f 93       	push	r18
    44de:	3f 93       	push	r19
    44e0:	4f 93       	push	r20
    44e2:	5f 93       	push	r21
    44e4:	6f 93       	push	r22
    44e6:	7f 93       	push	r23
    44e8:	8f 93       	push	r24
    44ea:	9f 93       	push	r25
    44ec:	af 93       	push	r26
    44ee:	bf 93       	push	r27
    44f0:	ef 93       	push	r30
    44f2:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    44f4:	e0 91 5a 07 	lds	r30, 0x075A
    44f8:	f0 91 5b 07 	lds	r31, 0x075B
    44fc:	30 97       	sbiw	r30, 0x00	; 0
    44fe:	11 f0       	breq	.+4      	; 0x4504 <__vector_3+0x36>
    4500:	09 95       	icall
    4502:	04 c0       	rjmp	.+8      	; 0x450c <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4504:	8a e0       	ldi	r24, 0x0A	; 10
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	0e 94 2a 11 	call	0x2254	; 0x2254 <nrk_kernel_error_add>
	return;  	
}
    450c:	ff 91       	pop	r31
    450e:	ef 91       	pop	r30
    4510:	bf 91       	pop	r27
    4512:	af 91       	pop	r26
    4514:	9f 91       	pop	r25
    4516:	8f 91       	pop	r24
    4518:	7f 91       	pop	r23
    451a:	6f 91       	pop	r22
    451c:	5f 91       	pop	r21
    451e:	4f 91       	pop	r20
    4520:	3f 91       	pop	r19
    4522:	2f 91       	pop	r18
    4524:	0f 90       	pop	r0
    4526:	0b be       	out	0x3b, r0	; 59
    4528:	0f 90       	pop	r0
    452a:	0f be       	out	0x3f, r0	; 63
    452c:	0f 90       	pop	r0
    452e:	1f 90       	pop	r1
    4530:	18 95       	reti

00004532 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4532:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4536:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4538:	84 b7       	in	r24, 0x34	; 52
    453a:	87 7f       	andi	r24, 0xF7	; 247
    453c:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    453e:	e0 e6       	ldi	r30, 0x60	; 96
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	80 81       	ld	r24, Z
    4544:	88 61       	ori	r24, 0x18	; 24
    4546:	80 83       	st	Z, r24
WDTCSR = 0;
    4548:	10 82       	st	Z, r1
nrk_int_enable();
    454a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
}
    454e:	08 95       	ret

00004550 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4550:	0e 94 57 0d 	call	0x1aae	; 0x1aae <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4554:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4556:	84 b7       	in	r24, 0x34	; 52
    4558:	87 7f       	andi	r24, 0xF7	; 247
    455a:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    455c:	e0 e6       	ldi	r30, 0x60	; 96
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	88 61       	ori	r24, 0x18	; 24
    4564:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4566:	8d e0       	ldi	r24, 0x0D	; 13
    4568:	80 83       	st	Z, r24
nrk_int_enable();
    456a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
}
    456e:	08 95       	ret

00004570 <nrk_watchdog_check>:

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4570:	04 b6       	in	r0, 0x34	; 52
    4572:	03 fc       	sbrc	r0, 3
    4574:	02 c0       	rjmp	.+4      	; 0x457a <nrk_watchdog_check+0xa>
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	08 95       	ret
return NRK_ERROR;
    457a:	8f ef       	ldi	r24, 0xFF	; 255
}
    457c:	08 95       	ret

0000457e <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    457e:	a8 95       	wdr

}
    4580:	08 95       	ret

00004582 <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    4582:	08 95       	ret

00004584 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4584:	83 b7       	in	r24, 0x33	; 51
    4586:	81 7f       	andi	r24, 0xF1	; 241
    4588:	86 60       	ori	r24, 0x06	; 6
    458a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    458c:	83 b7       	in	r24, 0x33	; 51
    458e:	81 60       	ori	r24, 0x01	; 1
    4590:	83 bf       	out	0x33, r24	; 51
    4592:	88 95       	sleep
    4594:	83 b7       	in	r24, 0x33	; 51
    4596:	8e 7f       	andi	r24, 0xFE	; 254
    4598:	83 bf       	out	0x33, r24	; 51

}
    459a:	08 95       	ret

0000459c <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    459c:	83 b7       	in	r24, 0x33	; 51
    459e:	81 7f       	andi	r24, 0xF1	; 241
    45a0:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    45a2:	83 b7       	in	r24, 0x33	; 51
    45a4:	81 60       	ori	r24, 0x01	; 1
    45a6:	83 bf       	out	0x33, r24	; 51
    45a8:	88 95       	sleep
    45aa:	83 b7       	in	r24, 0x33	; 51
    45ac:	8e 7f       	andi	r24, 0xFE	; 254
    45ae:	83 bf       	out	0x33, r24	; 51

}
    45b0:	08 95       	ret

000045b2 <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    45b2:	fc 01       	movw	r30, r24
    45b4:	76 83       	std	Z+6, r23	; 0x06
    45b6:	65 83       	std	Z+5, r22	; 0x05
}
    45b8:	08 95       	ret

000045ba <nrk_task_set_stk>:

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    45ba:	ef 92       	push	r14
    45bc:	ff 92       	push	r15
    45be:	0f 93       	push	r16
    45c0:	1f 93       	push	r17
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	ec 01       	movw	r28, r24
    45c8:	8b 01       	movw	r16, r22
    45ca:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    45cc:	40 32       	cpi	r20, 0x20	; 32
    45ce:	51 05       	cpc	r21, r1
    45d0:	18 f4       	brcc	.+6      	; 0x45d8 <nrk_task_set_stk+0x1e>
    45d2:	81 e1       	ldi	r24, 0x11	; 17
    45d4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    45d8:	08 94       	sec
    45da:	e1 08       	sbc	r14, r1
    45dc:	f1 08       	sbc	r15, r1
    45de:	e0 0e       	add	r14, r16
    45e0:	f1 1e       	adc	r15, r17
    45e2:	fa 82       	std	Y+2, r15	; 0x02
    45e4:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    45e6:	1c 83       	std	Y+4, r17	; 0x04
    45e8:	0b 83       	std	Y+3, r16	; 0x03

}
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	1f 91       	pop	r17
    45f0:	0f 91       	pop	r16
    45f2:	ff 90       	pop	r15
    45f4:	ef 90       	pop	r14
    45f6:	08 95       	ret

000045f8 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    45f8:	25 e5       	ldi	r18, 0x55	; 85
    45fa:	fa 01       	movw	r30, r20
    45fc:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    45fe:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    4600:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4602:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4604:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    4606:	12 92       	st	-Z, r1
    4608:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    460a:	12 92       	st	-Z, r1
    460c:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    460e:	12 92       	st	-Z, r1
    4610:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4612:	12 92       	st	-Z, r1
    4614:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4616:	12 92       	st	-Z, r1
    4618:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    461a:	12 92       	st	-Z, r1
    461c:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    461e:	12 92       	st	-Z, r1
    4620:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4622:	12 92       	st	-Z, r1
    4624:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    4626:	12 92       	st	-Z, r1
    4628:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    462a:	12 92       	st	-Z, r1
    462c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    462e:	12 92       	st	-Z, r1
    4630:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4632:	12 92       	st	-Z, r1
    4634:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4636:	12 92       	st	-Z, r1
    4638:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    463a:	12 92       	st	-Z, r1
    463c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    463e:	12 92       	st	-Z, r1
    4640:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4642:	12 92       	st	-Z, r1
    4644:	12 92       	st	-Z, r1
    *(--stk) = 0;
    4646:	12 92       	st	-Z, r1
    4648:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    464a:	cf 01       	movw	r24, r30
    464c:	08 95       	ret

0000464e <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    464e:	85 e5       	ldi	r24, 0x55	; 85
    4650:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4654:	ee ef       	ldi	r30, 0xFE	; 254
    4656:	f1 e4       	ldi	r31, 0x41	; 65
    4658:	f0 93 d2 05 	sts	0x05D2, r31
    465c:	e0 93 d1 05 	sts	0x05D1, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4660:	89 e4       	ldi	r24, 0x49	; 73
    4662:	9f e0       	ldi	r25, 0x0F	; 15
    4664:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4666:	80 93 ff 41 	sts	0x41FF, r24

}
    466a:	08 95       	ret

0000466c <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    466c:	89 e4       	ldi	r24, 0x49	; 73
    466e:	9f e0       	ldi	r25, 0x0F	; 15
    4670:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4674:	80 93 ff 41 	sts	0x41FF, r24
}
    4678:	08 95       	ret

0000467a <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    467a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <_nrk_setup_timer>
  nrk_int_enable();  
    467e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nrk_int_enable>
	
}
    4682:	08 95       	ret

00004684 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    4684:	a0 91 2a 07 	lds	r26, 0x072A
	lds r27,nrk_high_ready_TCB+1
    4688:	b0 91 2b 07 	lds	r27, 0x072B

    	;x points to &OSTCB[x]
    
	ld r28,x+
    468c:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    468e:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    4690:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    4692:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    4694:	ff 91       	pop	r31
	pop r30
    4696:	ef 91       	pop	r30
	pop r29
    4698:	df 91       	pop	r29
	pop r28
    469a:	cf 91       	pop	r28
	pop r27
    469c:	bf 91       	pop	r27
	pop r26
    469e:	af 91       	pop	r26
	pop r25
    46a0:	9f 91       	pop	r25
	pop r24			
    46a2:	8f 91       	pop	r24
	pop r23
    46a4:	7f 91       	pop	r23
	pop r22
    46a6:	6f 91       	pop	r22
	pop r21
    46a8:	5f 91       	pop	r21
	pop r20	
    46aa:	4f 91       	pop	r20
	pop r19
    46ac:	3f 91       	pop	r19
	pop r18	
    46ae:	2f 91       	pop	r18
	pop r17
    46b0:	1f 91       	pop	r17
	pop r16
    46b2:	0f 91       	pop	r16
	pop r15
    46b4:	ff 90       	pop	r15
	pop r14
    46b6:	ef 90       	pop	r14
	pop r13
    46b8:	df 90       	pop	r13
	pop r12
    46ba:	cf 90       	pop	r12
	pop r11
    46bc:	bf 90       	pop	r11
	pop r10
    46be:	af 90       	pop	r10
	pop r9
    46c0:	9f 90       	pop	r9
	pop r8
    46c2:	8f 90       	pop	r8
	pop r7
    46c4:	7f 90       	pop	r7
	pop r6
    46c6:	6f 90       	pop	r6
	pop r5
    46c8:	5f 90       	pop	r5
	pop r4
    46ca:	4f 90       	pop	r4
	pop r3
    46cc:	3f 90       	pop	r3
	pop r2
    46ce:	2f 90       	pop	r2
	pop r1
    46d0:	1f 90       	pop	r1
	pop r0
    46d2:	0f 90       	pop	r0
	out __SREG__, r0
    46d4:	0f be       	out	0x3f, r0	; 63
	pop r0	
    46d6:	0f 90       	pop	r0
	   
    	reti 
    46d8:	18 95       	reti

000046da <__udivdi3>:
    46da:	a8 e3       	ldi	r26, 0x38	; 56
    46dc:	b0 e0       	ldi	r27, 0x00	; 0
    46de:	e3 e7       	ldi	r30, 0x73	; 115
    46e0:	f3 e2       	ldi	r31, 0x23	; 35
    46e2:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <__prologue_saves__>
    46e6:	29 83       	std	Y+1, r18	; 0x01
    46e8:	3a 83       	std	Y+2, r19	; 0x02
    46ea:	4b 83       	std	Y+3, r20	; 0x03
    46ec:	5c 83       	std	Y+4, r21	; 0x04
    46ee:	6d 83       	std	Y+5, r22	; 0x05
    46f0:	7e 83       	std	Y+6, r23	; 0x06
    46f2:	8f 83       	std	Y+7, r24	; 0x07
    46f4:	98 87       	std	Y+8, r25	; 0x08
    46f6:	a9 86       	std	Y+9, r10	; 0x09
    46f8:	ba 86       	std	Y+10, r11	; 0x0a
    46fa:	cb 86       	std	Y+11, r12	; 0x0b
    46fc:	dc 86       	std	Y+12, r13	; 0x0c
    46fe:	ed 86       	std	Y+13, r14	; 0x0d
    4700:	fe 86       	std	Y+14, r15	; 0x0e
    4702:	0f 87       	std	Y+15, r16	; 0x0f
    4704:	18 8b       	std	Y+16, r17	; 0x10
    4706:	e9 84       	ldd	r14, Y+9	; 0x09
    4708:	fa 84       	ldd	r15, Y+10	; 0x0a
    470a:	0b 85       	ldd	r16, Y+11	; 0x0b
    470c:	1c 85       	ldd	r17, Y+12	; 0x0c
    470e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4710:	3e 85       	ldd	r19, Y+14	; 0x0e
    4712:	4f 85       	ldd	r20, Y+15	; 0x0f
    4714:	58 89       	ldd	r21, Y+16	; 0x10
    4716:	29 80       	ldd	r2, Y+1	; 0x01
    4718:	3a 80       	ldd	r3, Y+2	; 0x02
    471a:	4b 80       	ldd	r4, Y+3	; 0x03
    471c:	5c 80       	ldd	r5, Y+4	; 0x04
    471e:	2d a2       	std	Y+37, r2	; 0x25
    4720:	3e a2       	std	Y+38, r3	; 0x26
    4722:	4f a2       	std	Y+39, r4	; 0x27
    4724:	58 a6       	std	Y+40, r5	; 0x28
    4726:	ad 80       	ldd	r10, Y+5	; 0x05
    4728:	be 80       	ldd	r11, Y+6	; 0x06
    472a:	cf 80       	ldd	r12, Y+7	; 0x07
    472c:	d8 84       	ldd	r13, Y+8	; 0x08
    472e:	21 15       	cp	r18, r1
    4730:	31 05       	cpc	r19, r1
    4732:	41 05       	cpc	r20, r1
    4734:	51 05       	cpc	r21, r1
    4736:	09 f0       	breq	.+2      	; 0x473a <__udivdi3+0x60>
    4738:	be c3       	rjmp	.+1916   	; 0x4eb6 <__udivdi3+0x7dc>
    473a:	ae 14       	cp	r10, r14
    473c:	bf 04       	cpc	r11, r15
    473e:	c0 06       	cpc	r12, r16
    4740:	d1 06       	cpc	r13, r17
    4742:	08 f0       	brcs	.+2      	; 0x4746 <__udivdi3+0x6c>
    4744:	4f c1       	rjmp	.+670    	; 0x49e4 <__udivdi3+0x30a>
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	e2 16       	cp	r14, r18
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	f2 06       	cpc	r15, r18
    474e:	21 e0       	ldi	r18, 0x01	; 1
    4750:	02 07       	cpc	r16, r18
    4752:	20 e0       	ldi	r18, 0x00	; 0
    4754:	12 07       	cpc	r17, r18
    4756:	58 f4       	brcc	.+22     	; 0x476e <__udivdi3+0x94>
    4758:	3f ef       	ldi	r19, 0xFF	; 255
    475a:	e3 16       	cp	r14, r19
    475c:	f1 04       	cpc	r15, r1
    475e:	01 05       	cpc	r16, r1
    4760:	11 05       	cpc	r17, r1
    4762:	09 f0       	breq	.+2      	; 0x4766 <__udivdi3+0x8c>
    4764:	90 f4       	brcc	.+36     	; 0x478a <__udivdi3+0xb0>
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	a9 01       	movw	r20, r18
    476c:	17 c0       	rjmp	.+46     	; 0x479c <__udivdi3+0xc2>
    476e:	40 e0       	ldi	r20, 0x00	; 0
    4770:	e4 16       	cp	r14, r20
    4772:	40 e0       	ldi	r20, 0x00	; 0
    4774:	f4 06       	cpc	r15, r20
    4776:	40 e0       	ldi	r20, 0x00	; 0
    4778:	04 07       	cpc	r16, r20
    477a:	41 e0       	ldi	r20, 0x01	; 1
    477c:	14 07       	cpc	r17, r20
    477e:	50 f4       	brcc	.+20     	; 0x4794 <__udivdi3+0xba>
    4780:	20 e1       	ldi	r18, 0x10	; 16
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	40 e0       	ldi	r20, 0x00	; 0
    4786:	50 e0       	ldi	r21, 0x00	; 0
    4788:	09 c0       	rjmp	.+18     	; 0x479c <__udivdi3+0xc2>
    478a:	28 e0       	ldi	r18, 0x08	; 8
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	50 e0       	ldi	r21, 0x00	; 0
    4792:	04 c0       	rjmp	.+8      	; 0x479c <__udivdi3+0xc2>
    4794:	28 e1       	ldi	r18, 0x18	; 24
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	40 e0       	ldi	r20, 0x00	; 0
    479a:	50 e0       	ldi	r21, 0x00	; 0
    479c:	d8 01       	movw	r26, r16
    479e:	c7 01       	movw	r24, r14
    47a0:	02 2e       	mov	r0, r18
    47a2:	04 c0       	rjmp	.+8      	; 0x47ac <__udivdi3+0xd2>
    47a4:	b6 95       	lsr	r27
    47a6:	a7 95       	ror	r26
    47a8:	97 95       	ror	r25
    47aa:	87 95       	ror	r24
    47ac:	0a 94       	dec	r0
    47ae:	d2 f7       	brpl	.-12     	; 0x47a4 <__udivdi3+0xca>
    47b0:	81 57       	subi	r24, 0x71	; 113
    47b2:	9c 4f       	sbci	r25, 0xFC	; 252
    47b4:	dc 01       	movw	r26, r24
    47b6:	6c 91       	ld	r22, X
    47b8:	80 e2       	ldi	r24, 0x20	; 32
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	a0 e0       	ldi	r26, 0x00	; 0
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	82 1b       	sub	r24, r18
    47c2:	93 0b       	sbc	r25, r19
    47c4:	a4 0b       	sbc	r26, r20
    47c6:	b5 0b       	sbc	r27, r21
    47c8:	86 1b       	sub	r24, r22
    47ca:	91 09       	sbc	r25, r1
    47cc:	a1 09       	sbc	r26, r1
    47ce:	b1 09       	sbc	r27, r1
    47d0:	00 97       	sbiw	r24, 0x00	; 0
    47d2:	a1 05       	cpc	r26, r1
    47d4:	b1 05       	cpc	r27, r1
    47d6:	a1 f1       	breq	.+104    	; 0x4840 <__udivdi3+0x166>
    47d8:	08 2e       	mov	r0, r24
    47da:	04 c0       	rjmp	.+8      	; 0x47e4 <__udivdi3+0x10a>
    47dc:	ee 0c       	add	r14, r14
    47de:	ff 1c       	adc	r15, r15
    47e0:	00 1f       	adc	r16, r16
    47e2:	11 1f       	adc	r17, r17
    47e4:	0a 94       	dec	r0
    47e6:	d2 f7       	brpl	.-12     	; 0x47dc <__udivdi3+0x102>
    47e8:	a6 01       	movw	r20, r12
    47ea:	95 01       	movw	r18, r10
    47ec:	08 2e       	mov	r0, r24
    47ee:	04 c0       	rjmp	.+8      	; 0x47f8 <__udivdi3+0x11e>
    47f0:	22 0f       	add	r18, r18
    47f2:	33 1f       	adc	r19, r19
    47f4:	44 1f       	adc	r20, r20
    47f6:	55 1f       	adc	r21, r21
    47f8:	0a 94       	dec	r0
    47fa:	d2 f7       	brpl	.-12     	; 0x47f0 <__udivdi3+0x116>
    47fc:	60 e2       	ldi	r22, 0x20	; 32
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	68 1b       	sub	r22, r24
    4802:	79 0b       	sbc	r23, r25
    4804:	ad a0       	ldd	r10, Y+37	; 0x25
    4806:	be a0       	ldd	r11, Y+38	; 0x26
    4808:	cf a0       	ldd	r12, Y+39	; 0x27
    480a:	d8 a4       	ldd	r13, Y+40	; 0x28
    480c:	04 c0       	rjmp	.+8      	; 0x4816 <__udivdi3+0x13c>
    480e:	d6 94       	lsr	r13
    4810:	c7 94       	ror	r12
    4812:	b7 94       	ror	r11
    4814:	a7 94       	ror	r10
    4816:	6a 95       	dec	r22
    4818:	d2 f7       	brpl	.-12     	; 0x480e <__udivdi3+0x134>
    481a:	a2 2a       	or	r10, r18
    481c:	b3 2a       	or	r11, r19
    481e:	c4 2a       	or	r12, r20
    4820:	d5 2a       	or	r13, r21
    4822:	2d a0       	ldd	r2, Y+37	; 0x25
    4824:	3e a0       	ldd	r3, Y+38	; 0x26
    4826:	4f a0       	ldd	r4, Y+39	; 0x27
    4828:	58 a4       	ldd	r5, Y+40	; 0x28
    482a:	04 c0       	rjmp	.+8      	; 0x4834 <__udivdi3+0x15a>
    482c:	22 0c       	add	r2, r2
    482e:	33 1c       	adc	r3, r3
    4830:	44 1c       	adc	r4, r4
    4832:	55 1c       	adc	r5, r5
    4834:	8a 95       	dec	r24
    4836:	d2 f7       	brpl	.-12     	; 0x482c <__udivdi3+0x152>
    4838:	2d a2       	std	Y+37, r2	; 0x25
    483a:	3e a2       	std	Y+38, r3	; 0x26
    483c:	4f a2       	std	Y+39, r4	; 0x27
    483e:	58 a6       	std	Y+40, r5	; 0x28
    4840:	38 01       	movw	r6, r16
    4842:	88 24       	eor	r8, r8
    4844:	99 24       	eor	r9, r9
    4846:	a8 01       	movw	r20, r16
    4848:	97 01       	movw	r18, r14
    484a:	40 70       	andi	r20, 0x00	; 0
    484c:	50 70       	andi	r21, 0x00	; 0
    484e:	2d 8f       	std	Y+29, r18	; 0x1d
    4850:	3e 8f       	std	Y+30, r19	; 0x1e
    4852:	4f 8f       	std	Y+31, r20	; 0x1f
    4854:	58 a3       	std	Y+32, r21	; 0x20
    4856:	c6 01       	movw	r24, r12
    4858:	b5 01       	movw	r22, r10
    485a:	a4 01       	movw	r20, r8
    485c:	93 01       	movw	r18, r6
    485e:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4862:	22 2e       	mov	r2, r18
    4864:	53 2e       	mov	r5, r19
    4866:	44 2e       	mov	r4, r20
    4868:	35 2e       	mov	r3, r21
    486a:	69 a3       	std	Y+33, r22	; 0x21
    486c:	7a a3       	std	Y+34, r23	; 0x22
    486e:	8b a3       	std	Y+35, r24	; 0x23
    4870:	9c a3       	std	Y+36, r25	; 0x24
    4872:	c6 01       	movw	r24, r12
    4874:	b5 01       	movw	r22, r10
    4876:	a4 01       	movw	r20, r8
    4878:	93 01       	movw	r18, r6
    487a:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    487e:	82 2d       	mov	r24, r2
    4880:	95 2d       	mov	r25, r5
    4882:	a4 2d       	mov	r26, r4
    4884:	b3 2d       	mov	r27, r3
    4886:	89 8f       	std	Y+25, r24	; 0x19
    4888:	9a 8f       	std	Y+26, r25	; 0x1a
    488a:	ab 8f       	std	Y+27, r26	; 0x1b
    488c:	bc 8f       	std	Y+28, r27	; 0x1c
    488e:	bc 01       	movw	r22, r24
    4890:	cd 01       	movw	r24, r26
    4892:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4894:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4896:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4898:	58 a1       	ldd	r21, Y+32	; 0x20
    489a:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    489e:	5b 01       	movw	r10, r22
    48a0:	6c 01       	movw	r12, r24
    48a2:	49 a1       	ldd	r20, Y+33	; 0x21
    48a4:	5a a1       	ldd	r21, Y+34	; 0x22
    48a6:	6b a1       	ldd	r22, Y+35	; 0x23
    48a8:	7c a1       	ldd	r23, Y+36	; 0x24
    48aa:	da 01       	movw	r26, r20
    48ac:	99 27       	eor	r25, r25
    48ae:	88 27       	eor	r24, r24
    48b0:	2d a0       	ldd	r2, Y+37	; 0x25
    48b2:	3e a0       	ldd	r3, Y+38	; 0x26
    48b4:	4f a0       	ldd	r4, Y+39	; 0x27
    48b6:	58 a4       	ldd	r5, Y+40	; 0x28
    48b8:	92 01       	movw	r18, r4
    48ba:	44 27       	eor	r20, r20
    48bc:	55 27       	eor	r21, r21
    48be:	82 2b       	or	r24, r18
    48c0:	93 2b       	or	r25, r19
    48c2:	a4 2b       	or	r26, r20
    48c4:	b5 2b       	or	r27, r21
    48c6:	8a 15       	cp	r24, r10
    48c8:	9b 05       	cpc	r25, r11
    48ca:	ac 05       	cpc	r26, r12
    48cc:	bd 05       	cpc	r27, r13
    48ce:	30 f5       	brcc	.+76     	; 0x491c <__udivdi3+0x242>
    48d0:	29 8d       	ldd	r18, Y+25	; 0x19
    48d2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    48d4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    48d6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    48d8:	21 50       	subi	r18, 0x01	; 1
    48da:	30 40       	sbci	r19, 0x00	; 0
    48dc:	40 40       	sbci	r20, 0x00	; 0
    48de:	50 40       	sbci	r21, 0x00	; 0
    48e0:	29 8f       	std	Y+25, r18	; 0x19
    48e2:	3a 8f       	std	Y+26, r19	; 0x1a
    48e4:	4b 8f       	std	Y+27, r20	; 0x1b
    48e6:	5c 8f       	std	Y+28, r21	; 0x1c
    48e8:	8e 0d       	add	r24, r14
    48ea:	9f 1d       	adc	r25, r15
    48ec:	a0 1f       	adc	r26, r16
    48ee:	b1 1f       	adc	r27, r17
    48f0:	8e 15       	cp	r24, r14
    48f2:	9f 05       	cpc	r25, r15
    48f4:	a0 07       	cpc	r26, r16
    48f6:	b1 07       	cpc	r27, r17
    48f8:	88 f0       	brcs	.+34     	; 0x491c <__udivdi3+0x242>
    48fa:	8a 15       	cp	r24, r10
    48fc:	9b 05       	cpc	r25, r11
    48fe:	ac 05       	cpc	r26, r12
    4900:	bd 05       	cpc	r27, r13
    4902:	60 f4       	brcc	.+24     	; 0x491c <__udivdi3+0x242>
    4904:	21 50       	subi	r18, 0x01	; 1
    4906:	30 40       	sbci	r19, 0x00	; 0
    4908:	40 40       	sbci	r20, 0x00	; 0
    490a:	50 40       	sbci	r21, 0x00	; 0
    490c:	29 8f       	std	Y+25, r18	; 0x19
    490e:	3a 8f       	std	Y+26, r19	; 0x1a
    4910:	4b 8f       	std	Y+27, r20	; 0x1b
    4912:	5c 8f       	std	Y+28, r21	; 0x1c
    4914:	8e 0d       	add	r24, r14
    4916:	9f 1d       	adc	r25, r15
    4918:	a0 1f       	adc	r26, r16
    491a:	b1 1f       	adc	r27, r17
    491c:	ac 01       	movw	r20, r24
    491e:	bd 01       	movw	r22, r26
    4920:	4a 19       	sub	r20, r10
    4922:	5b 09       	sbc	r21, r11
    4924:	6c 09       	sbc	r22, r12
    4926:	7d 09       	sbc	r23, r13
    4928:	5a 01       	movw	r10, r20
    492a:	6b 01       	movw	r12, r22
    492c:	cb 01       	movw	r24, r22
    492e:	ba 01       	movw	r22, r20
    4930:	a4 01       	movw	r20, r8
    4932:	93 01       	movw	r18, r6
    4934:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4938:	22 2e       	mov	r2, r18
    493a:	53 2e       	mov	r5, r19
    493c:	44 2e       	mov	r4, r20
    493e:	35 2e       	mov	r3, r21
    4940:	69 a3       	std	Y+33, r22	; 0x21
    4942:	7a a3       	std	Y+34, r23	; 0x22
    4944:	8b a3       	std	Y+35, r24	; 0x23
    4946:	9c a3       	std	Y+36, r25	; 0x24
    4948:	c6 01       	movw	r24, r12
    494a:	b5 01       	movw	r22, r10
    494c:	a4 01       	movw	r20, r8
    494e:	93 01       	movw	r18, r6
    4950:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4954:	a2 2c       	mov	r10, r2
    4956:	b5 2c       	mov	r11, r5
    4958:	c4 2c       	mov	r12, r4
    495a:	d3 2c       	mov	r13, r3
    495c:	c6 01       	movw	r24, r12
    495e:	b5 01       	movw	r22, r10
    4960:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4962:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4964:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4966:	58 a1       	ldd	r21, Y+32	; 0x20
    4968:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    496c:	3b 01       	movw	r6, r22
    496e:	4c 01       	movw	r8, r24
    4970:	69 a1       	ldd	r22, Y+33	; 0x21
    4972:	7a a1       	ldd	r23, Y+34	; 0x22
    4974:	8b a1       	ldd	r24, Y+35	; 0x23
    4976:	9c a1       	ldd	r25, Y+36	; 0x24
    4978:	ab 01       	movw	r20, r22
    497a:	33 27       	eor	r19, r19
    497c:	22 27       	eor	r18, r18
    497e:	8d a1       	ldd	r24, Y+37	; 0x25
    4980:	9e a1       	ldd	r25, Y+38	; 0x26
    4982:	af a1       	ldd	r26, Y+39	; 0x27
    4984:	b8 a5       	ldd	r27, Y+40	; 0x28
    4986:	a0 70       	andi	r26, 0x00	; 0
    4988:	b0 70       	andi	r27, 0x00	; 0
    498a:	28 2b       	or	r18, r24
    498c:	39 2b       	or	r19, r25
    498e:	4a 2b       	or	r20, r26
    4990:	5b 2b       	or	r21, r27
    4992:	26 15       	cp	r18, r6
    4994:	37 05       	cpc	r19, r7
    4996:	48 05       	cpc	r20, r8
    4998:	59 05       	cpc	r21, r9
    499a:	c0 f4       	brcc	.+48     	; 0x49cc <__udivdi3+0x2f2>
    499c:	08 94       	sec
    499e:	a1 08       	sbc	r10, r1
    49a0:	b1 08       	sbc	r11, r1
    49a2:	c1 08       	sbc	r12, r1
    49a4:	d1 08       	sbc	r13, r1
    49a6:	2e 0d       	add	r18, r14
    49a8:	3f 1d       	adc	r19, r15
    49aa:	40 1f       	adc	r20, r16
    49ac:	51 1f       	adc	r21, r17
    49ae:	2e 15       	cp	r18, r14
    49b0:	3f 05       	cpc	r19, r15
    49b2:	40 07       	cpc	r20, r16
    49b4:	51 07       	cpc	r21, r17
    49b6:	50 f0       	brcs	.+20     	; 0x49cc <__udivdi3+0x2f2>
    49b8:	26 15       	cp	r18, r6
    49ba:	37 05       	cpc	r19, r7
    49bc:	48 05       	cpc	r20, r8
    49be:	59 05       	cpc	r21, r9
    49c0:	28 f4       	brcc	.+10     	; 0x49cc <__udivdi3+0x2f2>
    49c2:	08 94       	sec
    49c4:	a1 08       	sbc	r10, r1
    49c6:	b1 08       	sbc	r11, r1
    49c8:	c1 08       	sbc	r12, r1
    49ca:	d1 08       	sbc	r13, r1
    49cc:	89 8d       	ldd	r24, Y+25	; 0x19
    49ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    49d0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    49d2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    49d4:	8c 01       	movw	r16, r24
    49d6:	ff 24       	eor	r15, r15
    49d8:	ee 24       	eor	r14, r14
    49da:	ea 28       	or	r14, r10
    49dc:	fb 28       	or	r15, r11
    49de:	0c 29       	or	r16, r12
    49e0:	1d 29       	or	r17, r13
    49e2:	b3 c4       	rjmp	.+2406   	; 0x534a <__udivdi3+0xc70>
    49e4:	e1 14       	cp	r14, r1
    49e6:	f1 04       	cpc	r15, r1
    49e8:	01 05       	cpc	r16, r1
    49ea:	11 05       	cpc	r17, r1
    49ec:	59 f4       	brne	.+22     	; 0x4a04 <__udivdi3+0x32a>
    49ee:	61 e0       	ldi	r22, 0x01	; 1
    49f0:	70 e0       	ldi	r23, 0x00	; 0
    49f2:	80 e0       	ldi	r24, 0x00	; 0
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	a8 01       	movw	r20, r16
    49f8:	97 01       	movw	r18, r14
    49fa:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    49fe:	79 01       	movw	r14, r18
    4a00:	8a 01       	movw	r16, r20
    4a02:	10 c0       	rjmp	.+32     	; 0x4a24 <__udivdi3+0x34a>
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	e9 16       	cp	r14, r25
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	f9 06       	cpc	r15, r25
    4a0c:	91 e0       	ldi	r25, 0x01	; 1
    4a0e:	09 07       	cpc	r16, r25
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	19 07       	cpc	r17, r25
    4a14:	58 f4       	brcc	.+22     	; 0x4a2c <__udivdi3+0x352>
    4a16:	af ef       	ldi	r26, 0xFF	; 255
    4a18:	ea 16       	cp	r14, r26
    4a1a:	f1 04       	cpc	r15, r1
    4a1c:	01 05       	cpc	r16, r1
    4a1e:	11 05       	cpc	r17, r1
    4a20:	09 f0       	breq	.+2      	; 0x4a24 <__udivdi3+0x34a>
    4a22:	90 f4       	brcc	.+36     	; 0x4a48 <__udivdi3+0x36e>
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	a9 01       	movw	r20, r18
    4a2a:	17 c0       	rjmp	.+46     	; 0x4a5a <__udivdi3+0x380>
    4a2c:	b0 e0       	ldi	r27, 0x00	; 0
    4a2e:	eb 16       	cp	r14, r27
    4a30:	b0 e0       	ldi	r27, 0x00	; 0
    4a32:	fb 06       	cpc	r15, r27
    4a34:	b0 e0       	ldi	r27, 0x00	; 0
    4a36:	0b 07       	cpc	r16, r27
    4a38:	b1 e0       	ldi	r27, 0x01	; 1
    4a3a:	1b 07       	cpc	r17, r27
    4a3c:	50 f4       	brcc	.+20     	; 0x4a52 <__udivdi3+0x378>
    4a3e:	20 e1       	ldi	r18, 0x10	; 16
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	40 e0       	ldi	r20, 0x00	; 0
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	09 c0       	rjmp	.+18     	; 0x4a5a <__udivdi3+0x380>
    4a48:	28 e0       	ldi	r18, 0x08	; 8
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	40 e0       	ldi	r20, 0x00	; 0
    4a4e:	50 e0       	ldi	r21, 0x00	; 0
    4a50:	04 c0       	rjmp	.+8      	; 0x4a5a <__udivdi3+0x380>
    4a52:	28 e1       	ldi	r18, 0x18	; 24
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	40 e0       	ldi	r20, 0x00	; 0
    4a58:	50 e0       	ldi	r21, 0x00	; 0
    4a5a:	d8 01       	movw	r26, r16
    4a5c:	c7 01       	movw	r24, r14
    4a5e:	02 2e       	mov	r0, r18
    4a60:	04 c0       	rjmp	.+8      	; 0x4a6a <__udivdi3+0x390>
    4a62:	b6 95       	lsr	r27
    4a64:	a7 95       	ror	r26
    4a66:	97 95       	ror	r25
    4a68:	87 95       	ror	r24
    4a6a:	0a 94       	dec	r0
    4a6c:	d2 f7       	brpl	.-12     	; 0x4a62 <__udivdi3+0x388>
    4a6e:	81 57       	subi	r24, 0x71	; 113
    4a70:	9c 4f       	sbci	r25, 0xFC	; 252
    4a72:	fc 01       	movw	r30, r24
    4a74:	80 81       	ld	r24, Z
    4a76:	28 0f       	add	r18, r24
    4a78:	31 1d       	adc	r19, r1
    4a7a:	41 1d       	adc	r20, r1
    4a7c:	51 1d       	adc	r21, r1
    4a7e:	80 e2       	ldi	r24, 0x20	; 32
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	a0 e0       	ldi	r26, 0x00	; 0
    4a84:	b0 e0       	ldi	r27, 0x00	; 0
    4a86:	82 1b       	sub	r24, r18
    4a88:	93 0b       	sbc	r25, r19
    4a8a:	a4 0b       	sbc	r26, r20
    4a8c:	b5 0b       	sbc	r27, r21
    4a8e:	61 f4       	brne	.+24     	; 0x4aa8 <__udivdi3+0x3ce>
    4a90:	15 01       	movw	r2, r10
    4a92:	26 01       	movw	r4, r12
    4a94:	2e 18       	sub	r2, r14
    4a96:	3f 08       	sbc	r3, r15
    4a98:	40 0a       	sbc	r4, r16
    4a9a:	51 0a       	sbc	r5, r17
    4a9c:	81 e0       	ldi	r24, 0x01	; 1
    4a9e:	a8 2e       	mov	r10, r24
    4aa0:	b1 2c       	mov	r11, r1
    4aa2:	c1 2c       	mov	r12, r1
    4aa4:	d1 2c       	mov	r13, r1
    4aa6:	29 c1       	rjmp	.+594    	; 0x4cfa <__udivdi3+0x620>
    4aa8:	08 2e       	mov	r0, r24
    4aaa:	04 c0       	rjmp	.+8      	; 0x4ab4 <__udivdi3+0x3da>
    4aac:	ee 0c       	add	r14, r14
    4aae:	ff 1c       	adc	r15, r15
    4ab0:	00 1f       	adc	r16, r16
    4ab2:	11 1f       	adc	r17, r17
    4ab4:	0a 94       	dec	r0
    4ab6:	d2 f7       	brpl	.-12     	; 0x4aac <__udivdi3+0x3d2>
    4ab8:	15 01       	movw	r2, r10
    4aba:	26 01       	movw	r4, r12
    4abc:	02 2e       	mov	r0, r18
    4abe:	04 c0       	rjmp	.+8      	; 0x4ac8 <__udivdi3+0x3ee>
    4ac0:	56 94       	lsr	r5
    4ac2:	47 94       	ror	r4
    4ac4:	37 94       	ror	r3
    4ac6:	27 94       	ror	r2
    4ac8:	0a 94       	dec	r0
    4aca:	d2 f7       	brpl	.-12     	; 0x4ac0 <__udivdi3+0x3e6>
    4acc:	29 8e       	std	Y+25, r2	; 0x19
    4ace:	3a 8e       	std	Y+26, r3	; 0x1a
    4ad0:	4b 8e       	std	Y+27, r4	; 0x1b
    4ad2:	5c 8e       	std	Y+28, r5	; 0x1c
    4ad4:	b6 01       	movw	r22, r12
    4ad6:	a5 01       	movw	r20, r10
    4ad8:	08 2e       	mov	r0, r24
    4ada:	04 c0       	rjmp	.+8      	; 0x4ae4 <__udivdi3+0x40a>
    4adc:	44 0f       	add	r20, r20
    4ade:	55 1f       	adc	r21, r21
    4ae0:	66 1f       	adc	r22, r22
    4ae2:	77 1f       	adc	r23, r23
    4ae4:	0a 94       	dec	r0
    4ae6:	d2 f7       	brpl	.-12     	; 0x4adc <__udivdi3+0x402>
    4ae8:	4d 8f       	std	Y+29, r20	; 0x1d
    4aea:	5e 8f       	std	Y+30, r21	; 0x1e
    4aec:	6f 8f       	std	Y+31, r22	; 0x1f
    4aee:	78 a3       	std	Y+32, r23	; 0x20
    4af0:	2d a0       	ldd	r2, Y+37	; 0x25
    4af2:	3e a0       	ldd	r3, Y+38	; 0x26
    4af4:	4f a0       	ldd	r4, Y+39	; 0x27
    4af6:	58 a4       	ldd	r5, Y+40	; 0x28
    4af8:	04 c0       	rjmp	.+8      	; 0x4b02 <__udivdi3+0x428>
    4afa:	56 94       	lsr	r5
    4afc:	47 94       	ror	r4
    4afe:	37 94       	ror	r3
    4b00:	27 94       	ror	r2
    4b02:	2a 95       	dec	r18
    4b04:	d2 f7       	brpl	.-12     	; 0x4afa <__udivdi3+0x420>
    4b06:	ad 8c       	ldd	r10, Y+29	; 0x1d
    4b08:	be 8c       	ldd	r11, Y+30	; 0x1e
    4b0a:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4b0c:	d8 a0       	ldd	r13, Y+32	; 0x20
    4b0e:	a2 28       	or	r10, r2
    4b10:	b3 28       	or	r11, r3
    4b12:	c4 28       	or	r12, r4
    4b14:	d5 28       	or	r13, r5
    4b16:	ad 8e       	std	Y+29, r10	; 0x1d
    4b18:	be 8e       	std	Y+30, r11	; 0x1e
    4b1a:	cf 8e       	std	Y+31, r12	; 0x1f
    4b1c:	d8 a2       	std	Y+32, r13	; 0x20
    4b1e:	2d a1       	ldd	r18, Y+37	; 0x25
    4b20:	3e a1       	ldd	r19, Y+38	; 0x26
    4b22:	4f a1       	ldd	r20, Y+39	; 0x27
    4b24:	58 a5       	ldd	r21, Y+40	; 0x28
    4b26:	04 c0       	rjmp	.+8      	; 0x4b30 <__udivdi3+0x456>
    4b28:	22 0f       	add	r18, r18
    4b2a:	33 1f       	adc	r19, r19
    4b2c:	44 1f       	adc	r20, r20
    4b2e:	55 1f       	adc	r21, r21
    4b30:	8a 95       	dec	r24
    4b32:	d2 f7       	brpl	.-12     	; 0x4b28 <__udivdi3+0x44e>
    4b34:	2d a3       	std	Y+37, r18	; 0x25
    4b36:	3e a3       	std	Y+38, r19	; 0x26
    4b38:	4f a3       	std	Y+39, r20	; 0x27
    4b3a:	58 a7       	std	Y+40, r21	; 0x28
    4b3c:	38 01       	movw	r6, r16
    4b3e:	88 24       	eor	r8, r8
    4b40:	99 24       	eor	r9, r9
    4b42:	b8 01       	movw	r22, r16
    4b44:	a7 01       	movw	r20, r14
    4b46:	60 70       	andi	r22, 0x00	; 0
    4b48:	70 70       	andi	r23, 0x00	; 0
    4b4a:	49 a3       	std	Y+33, r20	; 0x21
    4b4c:	5a a3       	std	Y+34, r21	; 0x22
    4b4e:	6b a3       	std	Y+35, r22	; 0x23
    4b50:	7c a3       	std	Y+36, r23	; 0x24
    4b52:	69 8d       	ldd	r22, Y+25	; 0x19
    4b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b5a:	a4 01       	movw	r20, r8
    4b5c:	93 01       	movw	r18, r6
    4b5e:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4b62:	22 2e       	mov	r2, r18
    4b64:	53 2e       	mov	r5, r19
    4b66:	44 2e       	mov	r4, r20
    4b68:	35 2e       	mov	r3, r21
    4b6a:	69 a7       	std	Y+41, r22	; 0x29
    4b6c:	7a a7       	std	Y+42, r23	; 0x2a
    4b6e:	8b a7       	std	Y+43, r24	; 0x2b
    4b70:	9c a7       	std	Y+44, r25	; 0x2c
    4b72:	69 8d       	ldd	r22, Y+25	; 0x19
    4b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b7a:	a4 01       	movw	r20, r8
    4b7c:	93 01       	movw	r18, r6
    4b7e:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4b82:	a2 2c       	mov	r10, r2
    4b84:	b5 2c       	mov	r11, r5
    4b86:	c4 2c       	mov	r12, r4
    4b88:	d3 2c       	mov	r13, r3
    4b8a:	a9 8e       	std	Y+25, r10	; 0x19
    4b8c:	ba 8e       	std	Y+26, r11	; 0x1a
    4b8e:	cb 8e       	std	Y+27, r12	; 0x1b
    4b90:	dc 8e       	std	Y+28, r13	; 0x1c
    4b92:	c6 01       	movw	r24, r12
    4b94:	b5 01       	movw	r22, r10
    4b96:	29 a1       	ldd	r18, Y+33	; 0x21
    4b98:	3a a1       	ldd	r19, Y+34	; 0x22
    4b9a:	4b a1       	ldd	r20, Y+35	; 0x23
    4b9c:	5c a1       	ldd	r21, Y+36	; 0x24
    4b9e:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    4ba2:	5b 01       	movw	r10, r22
    4ba4:	6c 01       	movw	r12, r24
    4ba6:	29 a4       	ldd	r2, Y+41	; 0x29
    4ba8:	3a a4       	ldd	r3, Y+42	; 0x2a
    4baa:	4b a4       	ldd	r4, Y+43	; 0x2b
    4bac:	5c a4       	ldd	r5, Y+44	; 0x2c
    4bae:	d1 01       	movw	r26, r2
    4bb0:	99 27       	eor	r25, r25
    4bb2:	88 27       	eor	r24, r24
    4bb4:	2d 8c       	ldd	r2, Y+29	; 0x1d
    4bb6:	3e 8c       	ldd	r3, Y+30	; 0x1e
    4bb8:	4f 8c       	ldd	r4, Y+31	; 0x1f
    4bba:	58 a0       	ldd	r5, Y+32	; 0x20
    4bbc:	92 01       	movw	r18, r4
    4bbe:	44 27       	eor	r20, r20
    4bc0:	55 27       	eor	r21, r21
    4bc2:	82 2b       	or	r24, r18
    4bc4:	93 2b       	or	r25, r19
    4bc6:	a4 2b       	or	r26, r20
    4bc8:	b5 2b       	or	r27, r21
    4bca:	8a 15       	cp	r24, r10
    4bcc:	9b 05       	cpc	r25, r11
    4bce:	ac 05       	cpc	r26, r12
    4bd0:	bd 05       	cpc	r27, r13
    4bd2:	30 f5       	brcc	.+76     	; 0x4c20 <__udivdi3+0x546>
    4bd4:	29 8d       	ldd	r18, Y+25	; 0x19
    4bd6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4bd8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4bda:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4bdc:	21 50       	subi	r18, 0x01	; 1
    4bde:	30 40       	sbci	r19, 0x00	; 0
    4be0:	40 40       	sbci	r20, 0x00	; 0
    4be2:	50 40       	sbci	r21, 0x00	; 0
    4be4:	29 8f       	std	Y+25, r18	; 0x19
    4be6:	3a 8f       	std	Y+26, r19	; 0x1a
    4be8:	4b 8f       	std	Y+27, r20	; 0x1b
    4bea:	5c 8f       	std	Y+28, r21	; 0x1c
    4bec:	8e 0d       	add	r24, r14
    4bee:	9f 1d       	adc	r25, r15
    4bf0:	a0 1f       	adc	r26, r16
    4bf2:	b1 1f       	adc	r27, r17
    4bf4:	8e 15       	cp	r24, r14
    4bf6:	9f 05       	cpc	r25, r15
    4bf8:	a0 07       	cpc	r26, r16
    4bfa:	b1 07       	cpc	r27, r17
    4bfc:	88 f0       	brcs	.+34     	; 0x4c20 <__udivdi3+0x546>
    4bfe:	8a 15       	cp	r24, r10
    4c00:	9b 05       	cpc	r25, r11
    4c02:	ac 05       	cpc	r26, r12
    4c04:	bd 05       	cpc	r27, r13
    4c06:	60 f4       	brcc	.+24     	; 0x4c20 <__udivdi3+0x546>
    4c08:	21 50       	subi	r18, 0x01	; 1
    4c0a:	30 40       	sbci	r19, 0x00	; 0
    4c0c:	40 40       	sbci	r20, 0x00	; 0
    4c0e:	50 40       	sbci	r21, 0x00	; 0
    4c10:	29 8f       	std	Y+25, r18	; 0x19
    4c12:	3a 8f       	std	Y+26, r19	; 0x1a
    4c14:	4b 8f       	std	Y+27, r20	; 0x1b
    4c16:	5c 8f       	std	Y+28, r21	; 0x1c
    4c18:	8e 0d       	add	r24, r14
    4c1a:	9f 1d       	adc	r25, r15
    4c1c:	a0 1f       	adc	r26, r16
    4c1e:	b1 1f       	adc	r27, r17
    4c20:	ac 01       	movw	r20, r24
    4c22:	bd 01       	movw	r22, r26
    4c24:	4a 19       	sub	r20, r10
    4c26:	5b 09       	sbc	r21, r11
    4c28:	6c 09       	sbc	r22, r12
    4c2a:	7d 09       	sbc	r23, r13
    4c2c:	5a 01       	movw	r10, r20
    4c2e:	6b 01       	movw	r12, r22
    4c30:	cb 01       	movw	r24, r22
    4c32:	ba 01       	movw	r22, r20
    4c34:	a4 01       	movw	r20, r8
    4c36:	93 01       	movw	r18, r6
    4c38:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4c3c:	22 2e       	mov	r2, r18
    4c3e:	53 2e       	mov	r5, r19
    4c40:	44 2e       	mov	r4, r20
    4c42:	35 2e       	mov	r3, r21
    4c44:	69 a7       	std	Y+41, r22	; 0x29
    4c46:	7a a7       	std	Y+42, r23	; 0x2a
    4c48:	8b a7       	std	Y+43, r24	; 0x2b
    4c4a:	9c a7       	std	Y+44, r25	; 0x2c
    4c4c:	c6 01       	movw	r24, r12
    4c4e:	b5 01       	movw	r22, r10
    4c50:	a4 01       	movw	r20, r8
    4c52:	93 01       	movw	r18, r6
    4c54:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4c58:	62 2c       	mov	r6, r2
    4c5a:	75 2c       	mov	r7, r5
    4c5c:	84 2c       	mov	r8, r4
    4c5e:	93 2c       	mov	r9, r3
    4c60:	c4 01       	movw	r24, r8
    4c62:	b3 01       	movw	r22, r6
    4c64:	29 a1       	ldd	r18, Y+33	; 0x21
    4c66:	3a a1       	ldd	r19, Y+34	; 0x22
    4c68:	4b a1       	ldd	r20, Y+35	; 0x23
    4c6a:	5c a1       	ldd	r21, Y+36	; 0x24
    4c6c:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    4c70:	9b 01       	movw	r18, r22
    4c72:	ac 01       	movw	r20, r24
    4c74:	69 a5       	ldd	r22, Y+41	; 0x29
    4c76:	7a a5       	ldd	r23, Y+42	; 0x2a
    4c78:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c7c:	6b 01       	movw	r12, r22
    4c7e:	bb 24       	eor	r11, r11
    4c80:	aa 24       	eor	r10, r10
    4c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c86:	af 8d       	ldd	r26, Y+31	; 0x1f
    4c88:	b8 a1       	ldd	r27, Y+32	; 0x20
    4c8a:	a0 70       	andi	r26, 0x00	; 0
    4c8c:	b0 70       	andi	r27, 0x00	; 0
    4c8e:	a8 2a       	or	r10, r24
    4c90:	b9 2a       	or	r11, r25
    4c92:	ca 2a       	or	r12, r26
    4c94:	db 2a       	or	r13, r27
    4c96:	a2 16       	cp	r10, r18
    4c98:	b3 06       	cpc	r11, r19
    4c9a:	c4 06       	cpc	r12, r20
    4c9c:	d5 06       	cpc	r13, r21
    4c9e:	e0 f4       	brcc	.+56     	; 0x4cd8 <__udivdi3+0x5fe>
    4ca0:	08 94       	sec
    4ca2:	61 08       	sbc	r6, r1
    4ca4:	71 08       	sbc	r7, r1
    4ca6:	81 08       	sbc	r8, r1
    4ca8:	91 08       	sbc	r9, r1
    4caa:	ae 0c       	add	r10, r14
    4cac:	bf 1c       	adc	r11, r15
    4cae:	c0 1e       	adc	r12, r16
    4cb0:	d1 1e       	adc	r13, r17
    4cb2:	ae 14       	cp	r10, r14
    4cb4:	bf 04       	cpc	r11, r15
    4cb6:	c0 06       	cpc	r12, r16
    4cb8:	d1 06       	cpc	r13, r17
    4cba:	70 f0       	brcs	.+28     	; 0x4cd8 <__udivdi3+0x5fe>
    4cbc:	a2 16       	cp	r10, r18
    4cbe:	b3 06       	cpc	r11, r19
    4cc0:	c4 06       	cpc	r12, r20
    4cc2:	d5 06       	cpc	r13, r21
    4cc4:	48 f4       	brcc	.+18     	; 0x4cd8 <__udivdi3+0x5fe>
    4cc6:	08 94       	sec
    4cc8:	61 08       	sbc	r6, r1
    4cca:	71 08       	sbc	r7, r1
    4ccc:	81 08       	sbc	r8, r1
    4cce:	91 08       	sbc	r9, r1
    4cd0:	ae 0c       	add	r10, r14
    4cd2:	bf 1c       	adc	r11, r15
    4cd4:	c0 1e       	adc	r12, r16
    4cd6:	d1 1e       	adc	r13, r17
    4cd8:	15 01       	movw	r2, r10
    4cda:	26 01       	movw	r4, r12
    4cdc:	22 1a       	sub	r2, r18
    4cde:	33 0a       	sbc	r3, r19
    4ce0:	44 0a       	sbc	r4, r20
    4ce2:	55 0a       	sbc	r5, r21
    4ce4:	89 8d       	ldd	r24, Y+25	; 0x19
    4ce6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ce8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4cea:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4cec:	6c 01       	movw	r12, r24
    4cee:	bb 24       	eor	r11, r11
    4cf0:	aa 24       	eor	r10, r10
    4cf2:	a6 28       	or	r10, r6
    4cf4:	b7 28       	or	r11, r7
    4cf6:	c8 28       	or	r12, r8
    4cf8:	d9 28       	or	r13, r9
    4cfa:	98 01       	movw	r18, r16
    4cfc:	44 27       	eor	r20, r20
    4cfe:	55 27       	eor	r21, r21
    4d00:	2d 8f       	std	Y+29, r18	; 0x1d
    4d02:	3e 8f       	std	Y+30, r19	; 0x1e
    4d04:	4f 8f       	std	Y+31, r20	; 0x1f
    4d06:	58 a3       	std	Y+32, r21	; 0x20
    4d08:	b8 01       	movw	r22, r16
    4d0a:	a7 01       	movw	r20, r14
    4d0c:	60 70       	andi	r22, 0x00	; 0
    4d0e:	70 70       	andi	r23, 0x00	; 0
    4d10:	49 a3       	std	Y+33, r20	; 0x21
    4d12:	5a a3       	std	Y+34, r21	; 0x22
    4d14:	6b a3       	std	Y+35, r22	; 0x23
    4d16:	7c a3       	std	Y+36, r23	; 0x24
    4d18:	c2 01       	movw	r24, r4
    4d1a:	b1 01       	movw	r22, r2
    4d1c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4d1e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4d20:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4d22:	58 a1       	ldd	r21, Y+32	; 0x20
    4d24:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4d28:	62 2e       	mov	r6, r18
    4d2a:	93 2e       	mov	r9, r19
    4d2c:	84 2e       	mov	r8, r20
    4d2e:	75 2e       	mov	r7, r21
    4d30:	69 a7       	std	Y+41, r22	; 0x29
    4d32:	7a a7       	std	Y+42, r23	; 0x2a
    4d34:	8b a7       	std	Y+43, r24	; 0x2b
    4d36:	9c a7       	std	Y+44, r25	; 0x2c
    4d38:	c2 01       	movw	r24, r4
    4d3a:	b1 01       	movw	r22, r2
    4d3c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4d3e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4d40:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4d42:	58 a1       	ldd	r21, Y+32	; 0x20
    4d44:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4d48:	86 2d       	mov	r24, r6
    4d4a:	99 2d       	mov	r25, r9
    4d4c:	a8 2d       	mov	r26, r8
    4d4e:	b7 2d       	mov	r27, r7
    4d50:	89 8f       	std	Y+25, r24	; 0x19
    4d52:	9a 8f       	std	Y+26, r25	; 0x1a
    4d54:	ab 8f       	std	Y+27, r26	; 0x1b
    4d56:	bc 8f       	std	Y+28, r27	; 0x1c
    4d58:	bc 01       	movw	r22, r24
    4d5a:	cd 01       	movw	r24, r26
    4d5c:	29 a1       	ldd	r18, Y+33	; 0x21
    4d5e:	3a a1       	ldd	r19, Y+34	; 0x22
    4d60:	4b a1       	ldd	r20, Y+35	; 0x23
    4d62:	5c a1       	ldd	r21, Y+36	; 0x24
    4d64:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    4d68:	3b 01       	movw	r6, r22
    4d6a:	4c 01       	movw	r8, r24
    4d6c:	29 a4       	ldd	r2, Y+41	; 0x29
    4d6e:	3a a4       	ldd	r3, Y+42	; 0x2a
    4d70:	4b a4       	ldd	r4, Y+43	; 0x2b
    4d72:	5c a4       	ldd	r5, Y+44	; 0x2c
    4d74:	d1 01       	movw	r26, r2
    4d76:	99 27       	eor	r25, r25
    4d78:	88 27       	eor	r24, r24
    4d7a:	2d a0       	ldd	r2, Y+37	; 0x25
    4d7c:	3e a0       	ldd	r3, Y+38	; 0x26
    4d7e:	4f a0       	ldd	r4, Y+39	; 0x27
    4d80:	58 a4       	ldd	r5, Y+40	; 0x28
    4d82:	92 01       	movw	r18, r4
    4d84:	44 27       	eor	r20, r20
    4d86:	55 27       	eor	r21, r21
    4d88:	82 2b       	or	r24, r18
    4d8a:	93 2b       	or	r25, r19
    4d8c:	a4 2b       	or	r26, r20
    4d8e:	b5 2b       	or	r27, r21
    4d90:	86 15       	cp	r24, r6
    4d92:	97 05       	cpc	r25, r7
    4d94:	a8 05       	cpc	r26, r8
    4d96:	b9 05       	cpc	r27, r9
    4d98:	30 f5       	brcc	.+76     	; 0x4de6 <__udivdi3+0x70c>
    4d9a:	29 8d       	ldd	r18, Y+25	; 0x19
    4d9c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4d9e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4da0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4da2:	21 50       	subi	r18, 0x01	; 1
    4da4:	30 40       	sbci	r19, 0x00	; 0
    4da6:	40 40       	sbci	r20, 0x00	; 0
    4da8:	50 40       	sbci	r21, 0x00	; 0
    4daa:	29 8f       	std	Y+25, r18	; 0x19
    4dac:	3a 8f       	std	Y+26, r19	; 0x1a
    4dae:	4b 8f       	std	Y+27, r20	; 0x1b
    4db0:	5c 8f       	std	Y+28, r21	; 0x1c
    4db2:	8e 0d       	add	r24, r14
    4db4:	9f 1d       	adc	r25, r15
    4db6:	a0 1f       	adc	r26, r16
    4db8:	b1 1f       	adc	r27, r17
    4dba:	8e 15       	cp	r24, r14
    4dbc:	9f 05       	cpc	r25, r15
    4dbe:	a0 07       	cpc	r26, r16
    4dc0:	b1 07       	cpc	r27, r17
    4dc2:	88 f0       	brcs	.+34     	; 0x4de6 <__udivdi3+0x70c>
    4dc4:	86 15       	cp	r24, r6
    4dc6:	97 05       	cpc	r25, r7
    4dc8:	a8 05       	cpc	r26, r8
    4dca:	b9 05       	cpc	r27, r9
    4dcc:	60 f4       	brcc	.+24     	; 0x4de6 <__udivdi3+0x70c>
    4dce:	21 50       	subi	r18, 0x01	; 1
    4dd0:	30 40       	sbci	r19, 0x00	; 0
    4dd2:	40 40       	sbci	r20, 0x00	; 0
    4dd4:	50 40       	sbci	r21, 0x00	; 0
    4dd6:	29 8f       	std	Y+25, r18	; 0x19
    4dd8:	3a 8f       	std	Y+26, r19	; 0x1a
    4dda:	4b 8f       	std	Y+27, r20	; 0x1b
    4ddc:	5c 8f       	std	Y+28, r21	; 0x1c
    4dde:	8e 0d       	add	r24, r14
    4de0:	9f 1d       	adc	r25, r15
    4de2:	a0 1f       	adc	r26, r16
    4de4:	b1 1f       	adc	r27, r17
    4de6:	ac 01       	movw	r20, r24
    4de8:	bd 01       	movw	r22, r26
    4dea:	46 19       	sub	r20, r6
    4dec:	57 09       	sbc	r21, r7
    4dee:	68 09       	sbc	r22, r8
    4df0:	79 09       	sbc	r23, r9
    4df2:	3a 01       	movw	r6, r20
    4df4:	4b 01       	movw	r8, r22
    4df6:	cb 01       	movw	r24, r22
    4df8:	ba 01       	movw	r22, r20
    4dfa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4dfc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4dfe:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4e00:	58 a1       	ldd	r21, Y+32	; 0x20
    4e02:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4e06:	52 2e       	mov	r5, r18
    4e08:	43 2e       	mov	r4, r19
    4e0a:	34 2e       	mov	r3, r20
    4e0c:	25 2e       	mov	r2, r21
    4e0e:	69 a7       	std	Y+41, r22	; 0x29
    4e10:	7a a7       	std	Y+42, r23	; 0x2a
    4e12:	8b a7       	std	Y+43, r24	; 0x2b
    4e14:	9c a7       	std	Y+44, r25	; 0x2c
    4e16:	c4 01       	movw	r24, r8
    4e18:	b3 01       	movw	r22, r6
    4e1a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4e1c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4e1e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4e20:	58 a1       	ldd	r21, Y+32	; 0x20
    4e22:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    4e26:	65 2c       	mov	r6, r5
    4e28:	74 2c       	mov	r7, r4
    4e2a:	83 2c       	mov	r8, r3
    4e2c:	92 2c       	mov	r9, r2
    4e2e:	c4 01       	movw	r24, r8
    4e30:	b3 01       	movw	r22, r6
    4e32:	29 a1       	ldd	r18, Y+33	; 0x21
    4e34:	3a a1       	ldd	r19, Y+34	; 0x22
    4e36:	4b a1       	ldd	r20, Y+35	; 0x23
    4e38:	5c a1       	ldd	r21, Y+36	; 0x24
    4e3a:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    4e3e:	1b 01       	movw	r2, r22
    4e40:	2c 01       	movw	r4, r24
    4e42:	69 a5       	ldd	r22, Y+41	; 0x29
    4e44:	7a a5       	ldd	r23, Y+42	; 0x2a
    4e46:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e48:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e4a:	ab 01       	movw	r20, r22
    4e4c:	33 27       	eor	r19, r19
    4e4e:	22 27       	eor	r18, r18
    4e50:	8d a1       	ldd	r24, Y+37	; 0x25
    4e52:	9e a1       	ldd	r25, Y+38	; 0x26
    4e54:	af a1       	ldd	r26, Y+39	; 0x27
    4e56:	b8 a5       	ldd	r27, Y+40	; 0x28
    4e58:	a0 70       	andi	r26, 0x00	; 0
    4e5a:	b0 70       	andi	r27, 0x00	; 0
    4e5c:	28 2b       	or	r18, r24
    4e5e:	39 2b       	or	r19, r25
    4e60:	4a 2b       	or	r20, r26
    4e62:	5b 2b       	or	r21, r27
    4e64:	22 15       	cp	r18, r2
    4e66:	33 05       	cpc	r19, r3
    4e68:	44 05       	cpc	r20, r4
    4e6a:	55 05       	cpc	r21, r5
    4e6c:	c0 f4       	brcc	.+48     	; 0x4e9e <__udivdi3+0x7c4>
    4e6e:	08 94       	sec
    4e70:	61 08       	sbc	r6, r1
    4e72:	71 08       	sbc	r7, r1
    4e74:	81 08       	sbc	r8, r1
    4e76:	91 08       	sbc	r9, r1
    4e78:	2e 0d       	add	r18, r14
    4e7a:	3f 1d       	adc	r19, r15
    4e7c:	40 1f       	adc	r20, r16
    4e7e:	51 1f       	adc	r21, r17
    4e80:	2e 15       	cp	r18, r14
    4e82:	3f 05       	cpc	r19, r15
    4e84:	40 07       	cpc	r20, r16
    4e86:	51 07       	cpc	r21, r17
    4e88:	50 f0       	brcs	.+20     	; 0x4e9e <__udivdi3+0x7c4>
    4e8a:	22 15       	cp	r18, r2
    4e8c:	33 05       	cpc	r19, r3
    4e8e:	44 05       	cpc	r20, r4
    4e90:	55 05       	cpc	r21, r5
    4e92:	28 f4       	brcc	.+10     	; 0x4e9e <__udivdi3+0x7c4>
    4e94:	08 94       	sec
    4e96:	61 08       	sbc	r6, r1
    4e98:	71 08       	sbc	r7, r1
    4e9a:	81 08       	sbc	r8, r1
    4e9c:	91 08       	sbc	r9, r1
    4e9e:	89 8d       	ldd	r24, Y+25	; 0x19
    4ea0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ea2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4ea4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4ea6:	8c 01       	movw	r16, r24
    4ea8:	ff 24       	eor	r15, r15
    4eaa:	ee 24       	eor	r14, r14
    4eac:	e6 28       	or	r14, r6
    4eae:	f7 28       	or	r15, r7
    4eb0:	08 29       	or	r16, r8
    4eb2:	19 29       	or	r17, r9
    4eb4:	4d c2       	rjmp	.+1178   	; 0x5350 <__udivdi3+0xc76>
    4eb6:	a2 16       	cp	r10, r18
    4eb8:	b3 06       	cpc	r11, r19
    4eba:	c4 06       	cpc	r12, r20
    4ebc:	d5 06       	cpc	r13, r21
    4ebe:	08 f4       	brcc	.+2      	; 0x4ec2 <__udivdi3+0x7e8>
    4ec0:	34 c2       	rjmp	.+1128   	; 0x532a <__udivdi3+0xc50>
    4ec2:	20 30       	cpi	r18, 0x00	; 0
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	39 07       	cpc	r19, r25
    4ec8:	91 e0       	ldi	r25, 0x01	; 1
    4eca:	49 07       	cpc	r20, r25
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	59 07       	cpc	r21, r25
    4ed0:	50 f4       	brcc	.+20     	; 0x4ee6 <__udivdi3+0x80c>
    4ed2:	2f 3f       	cpi	r18, 0xFF	; 255
    4ed4:	31 05       	cpc	r19, r1
    4ed6:	41 05       	cpc	r20, r1
    4ed8:	51 05       	cpc	r21, r1
    4eda:	09 f0       	breq	.+2      	; 0x4ede <__udivdi3+0x804>
    4edc:	90 f4       	brcc	.+36     	; 0x4f02 <__udivdi3+0x828>
    4ede:	66 24       	eor	r6, r6
    4ee0:	77 24       	eor	r7, r7
    4ee2:	43 01       	movw	r8, r6
    4ee4:	19 c0       	rjmp	.+50     	; 0x4f18 <__udivdi3+0x83e>
    4ee6:	20 30       	cpi	r18, 0x00	; 0
    4ee8:	a0 e0       	ldi	r26, 0x00	; 0
    4eea:	3a 07       	cpc	r19, r26
    4eec:	a0 e0       	ldi	r26, 0x00	; 0
    4eee:	4a 07       	cpc	r20, r26
    4ef0:	a1 e0       	ldi	r26, 0x01	; 1
    4ef2:	5a 07       	cpc	r21, r26
    4ef4:	60 f4       	brcc	.+24     	; 0x4f0e <__udivdi3+0x834>
    4ef6:	90 e1       	ldi	r25, 0x10	; 16
    4ef8:	69 2e       	mov	r6, r25
    4efa:	71 2c       	mov	r7, r1
    4efc:	81 2c       	mov	r8, r1
    4efe:	91 2c       	mov	r9, r1
    4f00:	0b c0       	rjmp	.+22     	; 0x4f18 <__udivdi3+0x83e>
    4f02:	88 e0       	ldi	r24, 0x08	; 8
    4f04:	68 2e       	mov	r6, r24
    4f06:	71 2c       	mov	r7, r1
    4f08:	81 2c       	mov	r8, r1
    4f0a:	91 2c       	mov	r9, r1
    4f0c:	05 c0       	rjmp	.+10     	; 0x4f18 <__udivdi3+0x83e>
    4f0e:	b8 e1       	ldi	r27, 0x18	; 24
    4f10:	6b 2e       	mov	r6, r27
    4f12:	71 2c       	mov	r7, r1
    4f14:	81 2c       	mov	r8, r1
    4f16:	91 2c       	mov	r9, r1
    4f18:	da 01       	movw	r26, r20
    4f1a:	c9 01       	movw	r24, r18
    4f1c:	06 2c       	mov	r0, r6
    4f1e:	04 c0       	rjmp	.+8      	; 0x4f28 <__udivdi3+0x84e>
    4f20:	b6 95       	lsr	r27
    4f22:	a7 95       	ror	r26
    4f24:	97 95       	ror	r25
    4f26:	87 95       	ror	r24
    4f28:	0a 94       	dec	r0
    4f2a:	d2 f7       	brpl	.-12     	; 0x4f20 <__udivdi3+0x846>
    4f2c:	81 57       	subi	r24, 0x71	; 113
    4f2e:	9c 4f       	sbci	r25, 0xFC	; 252
    4f30:	fc 01       	movw	r30, r24
    4f32:	80 81       	ld	r24, Z
    4f34:	68 0e       	add	r6, r24
    4f36:	71 1c       	adc	r7, r1
    4f38:	81 1c       	adc	r8, r1
    4f3a:	91 1c       	adc	r9, r1
    4f3c:	80 e2       	ldi	r24, 0x20	; 32
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	a0 e0       	ldi	r26, 0x00	; 0
    4f42:	b0 e0       	ldi	r27, 0x00	; 0
    4f44:	86 19       	sub	r24, r6
    4f46:	97 09       	sbc	r25, r7
    4f48:	a8 09       	sbc	r26, r8
    4f4a:	b9 09       	sbc	r27, r9
    4f4c:	89 f4       	brne	.+34     	; 0x4f70 <__udivdi3+0x896>
    4f4e:	2a 15       	cp	r18, r10
    4f50:	3b 05       	cpc	r19, r11
    4f52:	4c 05       	cpc	r20, r12
    4f54:	5d 05       	cpc	r21, r13
    4f56:	08 f4       	brcc	.+2      	; 0x4f5a <__udivdi3+0x880>
    4f58:	ef c1       	rjmp	.+990    	; 0x5338 <__udivdi3+0xc5e>
    4f5a:	2d a0       	ldd	r2, Y+37	; 0x25
    4f5c:	3e a0       	ldd	r3, Y+38	; 0x26
    4f5e:	4f a0       	ldd	r4, Y+39	; 0x27
    4f60:	58 a4       	ldd	r5, Y+40	; 0x28
    4f62:	2e 14       	cp	r2, r14
    4f64:	3f 04       	cpc	r3, r15
    4f66:	40 06       	cpc	r4, r16
    4f68:	51 06       	cpc	r5, r17
    4f6a:	08 f0       	brcs	.+2      	; 0x4f6e <__udivdi3+0x894>
    4f6c:	e5 c1       	rjmp	.+970    	; 0x5338 <__udivdi3+0xc5e>
    4f6e:	dd c1       	rjmp	.+954    	; 0x532a <__udivdi3+0xc50>
    4f70:	89 a7       	std	Y+41, r24	; 0x29
    4f72:	19 01       	movw	r2, r18
    4f74:	2a 01       	movw	r4, r20
    4f76:	04 c0       	rjmp	.+8      	; 0x4f80 <__udivdi3+0x8a6>
    4f78:	22 0c       	add	r2, r2
    4f7a:	33 1c       	adc	r3, r3
    4f7c:	44 1c       	adc	r4, r4
    4f7e:	55 1c       	adc	r5, r5
    4f80:	8a 95       	dec	r24
    4f82:	d2 f7       	brpl	.-12     	; 0x4f78 <__udivdi3+0x89e>
    4f84:	d8 01       	movw	r26, r16
    4f86:	c7 01       	movw	r24, r14
    4f88:	06 2c       	mov	r0, r6
    4f8a:	04 c0       	rjmp	.+8      	; 0x4f94 <__udivdi3+0x8ba>
    4f8c:	b6 95       	lsr	r27
    4f8e:	a7 95       	ror	r26
    4f90:	97 95       	ror	r25
    4f92:	87 95       	ror	r24
    4f94:	0a 94       	dec	r0
    4f96:	d2 f7       	brpl	.-12     	; 0x4f8c <__udivdi3+0x8b2>
    4f98:	28 2a       	or	r2, r24
    4f9a:	39 2a       	or	r3, r25
    4f9c:	4a 2a       	or	r4, r26
    4f9e:	5b 2a       	or	r5, r27
    4fa0:	a8 01       	movw	r20, r16
    4fa2:	97 01       	movw	r18, r14
    4fa4:	09 a4       	ldd	r0, Y+41	; 0x29
    4fa6:	04 c0       	rjmp	.+8      	; 0x4fb0 <__udivdi3+0x8d6>
    4fa8:	22 0f       	add	r18, r18
    4faa:	33 1f       	adc	r19, r19
    4fac:	44 1f       	adc	r20, r20
    4fae:	55 1f       	adc	r21, r21
    4fb0:	0a 94       	dec	r0
    4fb2:	d2 f7       	brpl	.-12     	; 0x4fa8 <__udivdi3+0x8ce>
    4fb4:	29 ab       	std	Y+49, r18	; 0x31
    4fb6:	3a ab       	std	Y+50, r19	; 0x32
    4fb8:	4b ab       	std	Y+51, r20	; 0x33
    4fba:	5c ab       	std	Y+52, r21	; 0x34
    4fbc:	86 01       	movw	r16, r12
    4fbe:	75 01       	movw	r14, r10
    4fc0:	06 2c       	mov	r0, r6
    4fc2:	04 c0       	rjmp	.+8      	; 0x4fcc <__udivdi3+0x8f2>
    4fc4:	16 95       	lsr	r17
    4fc6:	07 95       	ror	r16
    4fc8:	f7 94       	ror	r15
    4fca:	e7 94       	ror	r14
    4fcc:	0a 94       	dec	r0
    4fce:	d2 f7       	brpl	.-12     	; 0x4fc4 <__udivdi3+0x8ea>
    4fd0:	b6 01       	movw	r22, r12
    4fd2:	a5 01       	movw	r20, r10
    4fd4:	09 a4       	ldd	r0, Y+41	; 0x29
    4fd6:	04 c0       	rjmp	.+8      	; 0x4fe0 <__udivdi3+0x906>
    4fd8:	44 0f       	add	r20, r20
    4fda:	55 1f       	adc	r21, r21
    4fdc:	66 1f       	adc	r22, r22
    4fde:	77 1f       	adc	r23, r23
    4fe0:	0a 94       	dec	r0
    4fe2:	d2 f7       	brpl	.-12     	; 0x4fd8 <__udivdi3+0x8fe>
    4fe4:	4d 8f       	std	Y+29, r20	; 0x1d
    4fe6:	5e 8f       	std	Y+30, r21	; 0x1e
    4fe8:	6f 8f       	std	Y+31, r22	; 0x1f
    4fea:	78 a3       	std	Y+32, r23	; 0x20
    4fec:	6d a1       	ldd	r22, Y+37	; 0x25
    4fee:	7e a1       	ldd	r23, Y+38	; 0x26
    4ff0:	8f a1       	ldd	r24, Y+39	; 0x27
    4ff2:	98 a5       	ldd	r25, Y+40	; 0x28
    4ff4:	04 c0       	rjmp	.+8      	; 0x4ffe <__udivdi3+0x924>
    4ff6:	96 95       	lsr	r25
    4ff8:	87 95       	ror	r24
    4ffa:	77 95       	ror	r23
    4ffc:	67 95       	ror	r22
    4ffe:	6a 94       	dec	r6
    5000:	d2 f7       	brpl	.-12     	; 0x4ff6 <__udivdi3+0x91c>
    5002:	3b 01       	movw	r6, r22
    5004:	4c 01       	movw	r8, r24
    5006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5008:	9e 8d       	ldd	r25, Y+30	; 0x1e
    500a:	af 8d       	ldd	r26, Y+31	; 0x1f
    500c:	b8 a1       	ldd	r27, Y+32	; 0x20
    500e:	86 29       	or	r24, r6
    5010:	97 29       	or	r25, r7
    5012:	a8 29       	or	r26, r8
    5014:	b9 29       	or	r27, r9
    5016:	8d 8f       	std	Y+29, r24	; 0x1d
    5018:	9e 8f       	std	Y+30, r25	; 0x1e
    501a:	af 8f       	std	Y+31, r26	; 0x1f
    501c:	b8 a3       	std	Y+32, r27	; 0x20
    501e:	52 01       	movw	r10, r4
    5020:	cc 24       	eor	r12, r12
    5022:	dd 24       	eor	r13, r13
    5024:	a9 a2       	std	Y+33, r10	; 0x21
    5026:	ba a2       	std	Y+34, r11	; 0x22
    5028:	cb a2       	std	Y+35, r12	; 0x23
    502a:	dc a2       	std	Y+36, r13	; 0x24
    502c:	a2 01       	movw	r20, r4
    502e:	91 01       	movw	r18, r2
    5030:	40 70       	andi	r20, 0x00	; 0
    5032:	50 70       	andi	r21, 0x00	; 0
    5034:	2d ab       	std	Y+53, r18	; 0x35
    5036:	3e ab       	std	Y+54, r19	; 0x36
    5038:	4f ab       	std	Y+55, r20	; 0x37
    503a:	58 af       	std	Y+56, r21	; 0x38
    503c:	c8 01       	movw	r24, r16
    503e:	b7 01       	movw	r22, r14
    5040:	a6 01       	movw	r20, r12
    5042:	95 01       	movw	r18, r10
    5044:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    5048:	62 2e       	mov	r6, r18
    504a:	a3 2e       	mov	r10, r19
    504c:	d4 2e       	mov	r13, r20
    504e:	c5 2e       	mov	r12, r21
    5050:	6d a7       	std	Y+45, r22	; 0x2d
    5052:	7e a7       	std	Y+46, r23	; 0x2e
    5054:	8f a7       	std	Y+47, r24	; 0x2f
    5056:	98 ab       	std	Y+48, r25	; 0x30
    5058:	c8 01       	movw	r24, r16
    505a:	b7 01       	movw	r22, r14
    505c:	29 a1       	ldd	r18, Y+33	; 0x21
    505e:	3a a1       	ldd	r19, Y+34	; 0x22
    5060:	4b a1       	ldd	r20, Y+35	; 0x23
    5062:	5c a1       	ldd	r21, Y+36	; 0x24
    5064:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    5068:	e6 2c       	mov	r14, r6
    506a:	fa 2c       	mov	r15, r10
    506c:	0d 2d       	mov	r16, r13
    506e:	1c 2d       	mov	r17, r12
    5070:	e9 8e       	std	Y+25, r14	; 0x19
    5072:	fa 8e       	std	Y+26, r15	; 0x1a
    5074:	0b 8f       	std	Y+27, r16	; 0x1b
    5076:	1c 8f       	std	Y+28, r17	; 0x1c
    5078:	c8 01       	movw	r24, r16
    507a:	b7 01       	movw	r22, r14
    507c:	2d a9       	ldd	r18, Y+53	; 0x35
    507e:	3e a9       	ldd	r19, Y+54	; 0x36
    5080:	4f a9       	ldd	r20, Y+55	; 0x37
    5082:	58 ad       	ldd	r21, Y+56	; 0x38
    5084:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    5088:	ad a4       	ldd	r10, Y+45	; 0x2d
    508a:	be a4       	ldd	r11, Y+46	; 0x2e
    508c:	cf a4       	ldd	r12, Y+47	; 0x2f
    508e:	d8 a8       	ldd	r13, Y+48	; 0x30
    5090:	85 01       	movw	r16, r10
    5092:	ff 24       	eor	r15, r15
    5094:	ee 24       	eor	r14, r14
    5096:	ad 8c       	ldd	r10, Y+29	; 0x1d
    5098:	be 8c       	ldd	r11, Y+30	; 0x1e
    509a:	cf 8c       	ldd	r12, Y+31	; 0x1f
    509c:	d8 a0       	ldd	r13, Y+32	; 0x20
    509e:	96 01       	movw	r18, r12
    50a0:	44 27       	eor	r20, r20
    50a2:	55 27       	eor	r21, r21
    50a4:	e2 2a       	or	r14, r18
    50a6:	f3 2a       	or	r15, r19
    50a8:	04 2b       	or	r16, r20
    50aa:	15 2b       	or	r17, r21
    50ac:	e6 16       	cp	r14, r22
    50ae:	f7 06       	cpc	r15, r23
    50b0:	08 07       	cpc	r16, r24
    50b2:	19 07       	cpc	r17, r25
    50b4:	30 f5       	brcc	.+76     	; 0x5102 <__udivdi3+0xa28>
    50b6:	29 8d       	ldd	r18, Y+25	; 0x19
    50b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    50ba:	4b 8d       	ldd	r20, Y+27	; 0x1b
    50bc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    50be:	21 50       	subi	r18, 0x01	; 1
    50c0:	30 40       	sbci	r19, 0x00	; 0
    50c2:	40 40       	sbci	r20, 0x00	; 0
    50c4:	50 40       	sbci	r21, 0x00	; 0
    50c6:	29 8f       	std	Y+25, r18	; 0x19
    50c8:	3a 8f       	std	Y+26, r19	; 0x1a
    50ca:	4b 8f       	std	Y+27, r20	; 0x1b
    50cc:	5c 8f       	std	Y+28, r21	; 0x1c
    50ce:	e2 0c       	add	r14, r2
    50d0:	f3 1c       	adc	r15, r3
    50d2:	04 1d       	adc	r16, r4
    50d4:	15 1d       	adc	r17, r5
    50d6:	e2 14       	cp	r14, r2
    50d8:	f3 04       	cpc	r15, r3
    50da:	04 05       	cpc	r16, r4
    50dc:	15 05       	cpc	r17, r5
    50de:	88 f0       	brcs	.+34     	; 0x5102 <__udivdi3+0xa28>
    50e0:	e6 16       	cp	r14, r22
    50e2:	f7 06       	cpc	r15, r23
    50e4:	08 07       	cpc	r16, r24
    50e6:	19 07       	cpc	r17, r25
    50e8:	60 f4       	brcc	.+24     	; 0x5102 <__udivdi3+0xa28>
    50ea:	21 50       	subi	r18, 0x01	; 1
    50ec:	30 40       	sbci	r19, 0x00	; 0
    50ee:	40 40       	sbci	r20, 0x00	; 0
    50f0:	50 40       	sbci	r21, 0x00	; 0
    50f2:	29 8f       	std	Y+25, r18	; 0x19
    50f4:	3a 8f       	std	Y+26, r19	; 0x1a
    50f6:	4b 8f       	std	Y+27, r20	; 0x1b
    50f8:	5c 8f       	std	Y+28, r21	; 0x1c
    50fa:	e2 0c       	add	r14, r2
    50fc:	f3 1c       	adc	r15, r3
    50fe:	04 1d       	adc	r16, r4
    5100:	15 1d       	adc	r17, r5
    5102:	e6 1a       	sub	r14, r22
    5104:	f7 0a       	sbc	r15, r23
    5106:	08 0b       	sbc	r16, r24
    5108:	19 0b       	sbc	r17, r25
    510a:	c8 01       	movw	r24, r16
    510c:	b7 01       	movw	r22, r14
    510e:	29 a1       	ldd	r18, Y+33	; 0x21
    5110:	3a a1       	ldd	r19, Y+34	; 0x22
    5112:	4b a1       	ldd	r20, Y+35	; 0x23
    5114:	5c a1       	ldd	r21, Y+36	; 0x24
    5116:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    511a:	a2 2e       	mov	r10, r18
    511c:	d3 2e       	mov	r13, r19
    511e:	c4 2e       	mov	r12, r20
    5120:	b5 2e       	mov	r11, r21
    5122:	6d a7       	std	Y+45, r22	; 0x2d
    5124:	7e a7       	std	Y+46, r23	; 0x2e
    5126:	8f a7       	std	Y+47, r24	; 0x2f
    5128:	98 ab       	std	Y+48, r25	; 0x30
    512a:	c8 01       	movw	r24, r16
    512c:	b7 01       	movw	r22, r14
    512e:	29 a1       	ldd	r18, Y+33	; 0x21
    5130:	3a a1       	ldd	r19, Y+34	; 0x22
    5132:	4b a1       	ldd	r20, Y+35	; 0x23
    5134:	5c a1       	ldd	r21, Y+36	; 0x24
    5136:	0e 94 38 2b 	call	0x5670	; 0x5670 <__udivmodsi4>
    513a:	6a 2c       	mov	r6, r10
    513c:	7d 2c       	mov	r7, r13
    513e:	8c 2c       	mov	r8, r12
    5140:	9b 2c       	mov	r9, r11
    5142:	c4 01       	movw	r24, r8
    5144:	b3 01       	movw	r22, r6
    5146:	2d a9       	ldd	r18, Y+53	; 0x35
    5148:	3e a9       	ldd	r19, Y+54	; 0x36
    514a:	4f a9       	ldd	r20, Y+55	; 0x37
    514c:	58 ad       	ldd	r21, Y+56	; 0x38
    514e:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    5152:	9b 01       	movw	r18, r22
    5154:	ac 01       	movw	r20, r24
    5156:	ad a4       	ldd	r10, Y+45	; 0x2d
    5158:	be a4       	ldd	r11, Y+46	; 0x2e
    515a:	cf a4       	ldd	r12, Y+47	; 0x2f
    515c:	d8 a8       	ldd	r13, Y+48	; 0x30
    515e:	d5 01       	movw	r26, r10
    5160:	99 27       	eor	r25, r25
    5162:	88 27       	eor	r24, r24
    5164:	ad 8c       	ldd	r10, Y+29	; 0x1d
    5166:	be 8c       	ldd	r11, Y+30	; 0x1e
    5168:	cf 8c       	ldd	r12, Y+31	; 0x1f
    516a:	d8 a0       	ldd	r13, Y+32	; 0x20
    516c:	6f ef       	ldi	r22, 0xFF	; 255
    516e:	e6 2e       	mov	r14, r22
    5170:	6f ef       	ldi	r22, 0xFF	; 255
    5172:	f6 2e       	mov	r15, r22
    5174:	01 2d       	mov	r16, r1
    5176:	11 2d       	mov	r17, r1
    5178:	ae 20       	and	r10, r14
    517a:	bf 20       	and	r11, r15
    517c:	c0 22       	and	r12, r16
    517e:	d1 22       	and	r13, r17
    5180:	8a 29       	or	r24, r10
    5182:	9b 29       	or	r25, r11
    5184:	ac 29       	or	r26, r12
    5186:	bd 29       	or	r27, r13
    5188:	82 17       	cp	r24, r18
    518a:	93 07       	cpc	r25, r19
    518c:	a4 07       	cpc	r26, r20
    518e:	b5 07       	cpc	r27, r21
    5190:	e0 f4       	brcc	.+56     	; 0x51ca <__udivdi3+0xaf0>
    5192:	08 94       	sec
    5194:	61 08       	sbc	r6, r1
    5196:	71 08       	sbc	r7, r1
    5198:	81 08       	sbc	r8, r1
    519a:	91 08       	sbc	r9, r1
    519c:	82 0d       	add	r24, r2
    519e:	93 1d       	adc	r25, r3
    51a0:	a4 1d       	adc	r26, r4
    51a2:	b5 1d       	adc	r27, r5
    51a4:	82 15       	cp	r24, r2
    51a6:	93 05       	cpc	r25, r3
    51a8:	a4 05       	cpc	r26, r4
    51aa:	b5 05       	cpc	r27, r5
    51ac:	70 f0       	brcs	.+28     	; 0x51ca <__udivdi3+0xaf0>
    51ae:	82 17       	cp	r24, r18
    51b0:	93 07       	cpc	r25, r19
    51b2:	a4 07       	cpc	r26, r20
    51b4:	b5 07       	cpc	r27, r21
    51b6:	48 f4       	brcc	.+18     	; 0x51ca <__udivdi3+0xaf0>
    51b8:	08 94       	sec
    51ba:	61 08       	sbc	r6, r1
    51bc:	71 08       	sbc	r7, r1
    51be:	81 08       	sbc	r8, r1
    51c0:	91 08       	sbc	r9, r1
    51c2:	82 0d       	add	r24, r2
    51c4:	93 1d       	adc	r25, r3
    51c6:	a4 1d       	adc	r26, r4
    51c8:	b5 1d       	adc	r27, r5
    51ca:	1c 01       	movw	r2, r24
    51cc:	2d 01       	movw	r4, r26
    51ce:	22 1a       	sub	r2, r18
    51d0:	33 0a       	sbc	r3, r19
    51d2:	44 0a       	sbc	r4, r20
    51d4:	55 0a       	sbc	r5, r21
    51d6:	2d 8e       	std	Y+29, r2	; 0x1d
    51d8:	3e 8e       	std	Y+30, r3	; 0x1e
    51da:	4f 8e       	std	Y+31, r4	; 0x1f
    51dc:	58 a2       	std	Y+32, r5	; 0x20
    51de:	a9 8c       	ldd	r10, Y+25	; 0x19
    51e0:	ba 8c       	ldd	r11, Y+26	; 0x1a
    51e2:	cb 8c       	ldd	r12, Y+27	; 0x1b
    51e4:	dc 8c       	ldd	r13, Y+28	; 0x1c
    51e6:	85 01       	movw	r16, r10
    51e8:	ff 24       	eor	r15, r15
    51ea:	ee 24       	eor	r14, r14
    51ec:	e6 28       	or	r14, r6
    51ee:	f7 28       	or	r15, r7
    51f0:	08 29       	or	r16, r8
    51f2:	19 29       	or	r17, r9
    51f4:	af ef       	ldi	r26, 0xFF	; 255
    51f6:	aa 2e       	mov	r10, r26
    51f8:	af ef       	ldi	r26, 0xFF	; 255
    51fa:	ba 2e       	mov	r11, r26
    51fc:	c1 2c       	mov	r12, r1
    51fe:	d1 2c       	mov	r13, r1
    5200:	ae 20       	and	r10, r14
    5202:	bf 20       	and	r11, r15
    5204:	c0 22       	and	r12, r16
    5206:	d1 22       	and	r13, r17
    5208:	18 01       	movw	r2, r16
    520a:	44 24       	eor	r4, r4
    520c:	55 24       	eor	r5, r5
    520e:	69 a8       	ldd	r6, Y+49	; 0x31
    5210:	7a a8       	ldd	r7, Y+50	; 0x32
    5212:	8b a8       	ldd	r8, Y+51	; 0x33
    5214:	9c a8       	ldd	r9, Y+52	; 0x34
    5216:	2f ef       	ldi	r18, 0xFF	; 255
    5218:	3f ef       	ldi	r19, 0xFF	; 255
    521a:	40 e0       	ldi	r20, 0x00	; 0
    521c:	50 e0       	ldi	r21, 0x00	; 0
    521e:	62 22       	and	r6, r18
    5220:	73 22       	and	r7, r19
    5222:	84 22       	and	r8, r20
    5224:	95 22       	and	r9, r21
    5226:	69 a9       	ldd	r22, Y+49	; 0x31
    5228:	7a a9       	ldd	r23, Y+50	; 0x32
    522a:	8b a9       	ldd	r24, Y+51	; 0x33
    522c:	9c a9       	ldd	r25, Y+52	; 0x34
    522e:	ac 01       	movw	r20, r24
    5230:	66 27       	eor	r22, r22
    5232:	77 27       	eor	r23, r23
    5234:	49 8f       	std	Y+25, r20	; 0x19
    5236:	5a 8f       	std	Y+26, r21	; 0x1a
    5238:	6b 8f       	std	Y+27, r22	; 0x1b
    523a:	7c 8f       	std	Y+28, r23	; 0x1c
    523c:	c6 01       	movw	r24, r12
    523e:	b5 01       	movw	r22, r10
    5240:	a4 01       	movw	r20, r8
    5242:	93 01       	movw	r18, r6
    5244:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    5248:	69 a3       	std	Y+33, r22	; 0x21
    524a:	7a a3       	std	Y+34, r23	; 0x22
    524c:	8b a3       	std	Y+35, r24	; 0x23
    524e:	9c a3       	std	Y+36, r25	; 0x24
    5250:	c6 01       	movw	r24, r12
    5252:	b5 01       	movw	r22, r10
    5254:	29 8d       	ldd	r18, Y+25	; 0x19
    5256:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5258:	4b 8d       	ldd	r20, Y+27	; 0x1b
    525a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    525c:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    5260:	5b 01       	movw	r10, r22
    5262:	6c 01       	movw	r12, r24
    5264:	c2 01       	movw	r24, r4
    5266:	b1 01       	movw	r22, r2
    5268:	a4 01       	movw	r20, r8
    526a:	93 01       	movw	r18, r6
    526c:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    5270:	3b 01       	movw	r6, r22
    5272:	4c 01       	movw	r8, r24
    5274:	c2 01       	movw	r24, r4
    5276:	b1 01       	movw	r22, r2
    5278:	29 8d       	ldd	r18, Y+25	; 0x19
    527a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    527c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    527e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5280:	0e 94 19 2b 	call	0x5632	; 0x5632 <__mulsi3>
    5284:	9b 01       	movw	r18, r22
    5286:	ac 01       	movw	r20, r24
    5288:	a6 0c       	add	r10, r6
    528a:	b7 1c       	adc	r11, r7
    528c:	c8 1c       	adc	r12, r8
    528e:	d9 1c       	adc	r13, r9
    5290:	29 a0       	ldd	r2, Y+33	; 0x21
    5292:	3a a0       	ldd	r3, Y+34	; 0x22
    5294:	4b a0       	ldd	r4, Y+35	; 0x23
    5296:	5c a0       	ldd	r5, Y+36	; 0x24
    5298:	c2 01       	movw	r24, r4
    529a:	aa 27       	eor	r26, r26
    529c:	bb 27       	eor	r27, r27
    529e:	a8 0e       	add	r10, r24
    52a0:	b9 1e       	adc	r11, r25
    52a2:	ca 1e       	adc	r12, r26
    52a4:	db 1e       	adc	r13, r27
    52a6:	a6 14       	cp	r10, r6
    52a8:	b7 04       	cpc	r11, r7
    52aa:	c8 04       	cpc	r12, r8
    52ac:	d9 04       	cpc	r13, r9
    52ae:	20 f4       	brcc	.+8      	; 0x52b8 <__udivdi3+0xbde>
    52b0:	20 50       	subi	r18, 0x00	; 0
    52b2:	30 40       	sbci	r19, 0x00	; 0
    52b4:	4f 4f       	sbci	r20, 0xFF	; 255
    52b6:	5f 4f       	sbci	r21, 0xFF	; 255
    52b8:	c6 01       	movw	r24, r12
    52ba:	aa 27       	eor	r26, r26
    52bc:	bb 27       	eor	r27, r27
    52be:	82 0f       	add	r24, r18
    52c0:	93 1f       	adc	r25, r19
    52c2:	a4 1f       	adc	r26, r20
    52c4:	b5 1f       	adc	r27, r21
    52c6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    52c8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    52ca:	4f 8d       	ldd	r20, Y+31	; 0x1f
    52cc:	58 a1       	ldd	r21, Y+32	; 0x20
    52ce:	28 17       	cp	r18, r24
    52d0:	39 07       	cpc	r19, r25
    52d2:	4a 07       	cpc	r20, r26
    52d4:	5b 07       	cpc	r21, r27
    52d6:	18 f1       	brcs	.+70     	; 0x531e <__udivdi3+0xc44>
    52d8:	82 17       	cp	r24, r18
    52da:	93 07       	cpc	r25, r19
    52dc:	a4 07       	cpc	r26, r20
    52de:	b5 07       	cpc	r27, r21
    52e0:	a1 f5       	brne	.+104    	; 0x534a <__udivdi3+0xc70>
    52e2:	65 01       	movw	r12, r10
    52e4:	bb 24       	eor	r11, r11
    52e6:	aa 24       	eor	r10, r10
    52e8:	89 a1       	ldd	r24, Y+33	; 0x21
    52ea:	9a a1       	ldd	r25, Y+34	; 0x22
    52ec:	ab a1       	ldd	r26, Y+35	; 0x23
    52ee:	bc a1       	ldd	r27, Y+36	; 0x24
    52f0:	a0 70       	andi	r26, 0x00	; 0
    52f2:	b0 70       	andi	r27, 0x00	; 0
    52f4:	a8 0e       	add	r10, r24
    52f6:	b9 1e       	adc	r11, r25
    52f8:	ca 1e       	adc	r12, r26
    52fa:	db 1e       	adc	r13, r27
    52fc:	8d a1       	ldd	r24, Y+37	; 0x25
    52fe:	9e a1       	ldd	r25, Y+38	; 0x26
    5300:	af a1       	ldd	r26, Y+39	; 0x27
    5302:	b8 a5       	ldd	r27, Y+40	; 0x28
    5304:	09 a4       	ldd	r0, Y+41	; 0x29
    5306:	04 c0       	rjmp	.+8      	; 0x5310 <__udivdi3+0xc36>
    5308:	88 0f       	add	r24, r24
    530a:	99 1f       	adc	r25, r25
    530c:	aa 1f       	adc	r26, r26
    530e:	bb 1f       	adc	r27, r27
    5310:	0a 94       	dec	r0
    5312:	d2 f7       	brpl	.-12     	; 0x5308 <__udivdi3+0xc2e>
    5314:	8a 15       	cp	r24, r10
    5316:	9b 05       	cpc	r25, r11
    5318:	ac 05       	cpc	r26, r12
    531a:	bd 05       	cpc	r27, r13
    531c:	b0 f4       	brcc	.+44     	; 0x534a <__udivdi3+0xc70>
    531e:	08 94       	sec
    5320:	e1 08       	sbc	r14, r1
    5322:	f1 08       	sbc	r15, r1
    5324:	01 09       	sbc	r16, r1
    5326:	11 09       	sbc	r17, r1
    5328:	10 c0       	rjmp	.+32     	; 0x534a <__udivdi3+0xc70>
    532a:	aa 24       	eor	r10, r10
    532c:	bb 24       	eor	r11, r11
    532e:	65 01       	movw	r12, r10
    5330:	ee 24       	eor	r14, r14
    5332:	ff 24       	eor	r15, r15
    5334:	87 01       	movw	r16, r14
    5336:	0c c0       	rjmp	.+24     	; 0x5350 <__udivdi3+0xc76>
    5338:	aa 24       	eor	r10, r10
    533a:	bb 24       	eor	r11, r11
    533c:	65 01       	movw	r12, r10
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	e8 2e       	mov	r14, r24
    5342:	f1 2c       	mov	r15, r1
    5344:	01 2d       	mov	r16, r1
    5346:	11 2d       	mov	r17, r1
    5348:	03 c0       	rjmp	.+6      	; 0x5350 <__udivdi3+0xc76>
    534a:	aa 24       	eor	r10, r10
    534c:	bb 24       	eor	r11, r11
    534e:	65 01       	movw	r12, r10
    5350:	fe 01       	movw	r30, r28
    5352:	71 96       	adiw	r30, 0x11	; 17
    5354:	88 e0       	ldi	r24, 0x08	; 8
    5356:	df 01       	movw	r26, r30
    5358:	1d 92       	st	X+, r1
    535a:	8a 95       	dec	r24
    535c:	e9 f7       	brne	.-6      	; 0x5358 <__udivdi3+0xc7e>
    535e:	e9 8a       	std	Y+17, r14	; 0x11
    5360:	fa 8a       	std	Y+18, r15	; 0x12
    5362:	0b 8b       	std	Y+19, r16	; 0x13
    5364:	1c 8b       	std	Y+20, r17	; 0x14
    5366:	ad 8a       	std	Y+21, r10	; 0x15
    5368:	be 8a       	std	Y+22, r11	; 0x16
    536a:	cf 8a       	std	Y+23, r12	; 0x17
    536c:	d8 8e       	std	Y+24, r13	; 0x18
    536e:	2e 2d       	mov	r18, r14
    5370:	3a 89       	ldd	r19, Y+18	; 0x12
    5372:	4b 89       	ldd	r20, Y+19	; 0x13
    5374:	5c 89       	ldd	r21, Y+20	; 0x14
    5376:	6a 2d       	mov	r22, r10
    5378:	7e 89       	ldd	r23, Y+22	; 0x16
    537a:	8f 89       	ldd	r24, Y+23	; 0x17
    537c:	98 8d       	ldd	r25, Y+24	; 0x18
    537e:	e8 96       	adiw	r28, 0x38	; 56
    5380:	e2 e1       	ldi	r30, 0x12	; 18
    5382:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <__epilogue_restores__>

00005386 <vfprintf>:
    5386:	6f 92       	push	r6
    5388:	7f 92       	push	r7
    538a:	8f 92       	push	r8
    538c:	9f 92       	push	r9
    538e:	af 92       	push	r10
    5390:	bf 92       	push	r11
    5392:	cf 92       	push	r12
    5394:	df 92       	push	r13
    5396:	ef 92       	push	r14
    5398:	ff 92       	push	r15
    539a:	0f 93       	push	r16
    539c:	1f 93       	push	r17
    539e:	df 93       	push	r29
    53a0:	cf 93       	push	r28
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
    53a6:	2c 97       	sbiw	r28, 0x0c	; 12
    53a8:	0f b6       	in	r0, 0x3f	; 63
    53aa:	f8 94       	cli
    53ac:	de bf       	out	0x3e, r29	; 62
    53ae:	0f be       	out	0x3f, r0	; 63
    53b0:	cd bf       	out	0x3d, r28	; 61
    53b2:	6c 01       	movw	r12, r24
    53b4:	3b 01       	movw	r6, r22
    53b6:	8a 01       	movw	r16, r20
    53b8:	fc 01       	movw	r30, r24
    53ba:	17 82       	std	Z+7, r1	; 0x07
    53bc:	16 82       	std	Z+6, r1	; 0x06
    53be:	83 81       	ldd	r24, Z+3	; 0x03
    53c0:	81 fd       	sbrc	r24, 1
    53c2:	03 c0       	rjmp	.+6      	; 0x53ca <vfprintf+0x44>
    53c4:	1e c1       	rjmp	.+572    	; 0x5602 <vfprintf+0x27c>
    53c6:	85 01       	movw	r16, r10
    53c8:	04 c0       	rjmp	.+8      	; 0x53d2 <vfprintf+0x4c>
    53ca:	4e 01       	movw	r8, r28
    53cc:	08 94       	sec
    53ce:	81 1c       	adc	r8, r1
    53d0:	91 1c       	adc	r9, r1
    53d2:	f6 01       	movw	r30, r12
    53d4:	e3 80       	ldd	r14, Z+3	; 0x03
    53d6:	f3 01       	movw	r30, r6
    53d8:	e3 fc       	sbrc	r14, 3
    53da:	85 91       	lpm	r24, Z+
    53dc:	e3 fe       	sbrs	r14, 3
    53de:	81 91       	ld	r24, Z+
    53e0:	3f 01       	movw	r6, r30
    53e2:	88 23       	and	r24, r24
    53e4:	09 f4       	brne	.+2      	; 0x53e8 <vfprintf+0x62>
    53e6:	09 c1       	rjmp	.+530    	; 0x55fa <vfprintf+0x274>
    53e8:	85 32       	cpi	r24, 0x25	; 37
    53ea:	51 f4       	brne	.+20     	; 0x5400 <vfprintf+0x7a>
    53ec:	e3 fc       	sbrc	r14, 3
    53ee:	25 91       	lpm	r18, Z+
    53f0:	e3 fe       	sbrs	r14, 3
    53f2:	21 91       	ld	r18, Z+
    53f4:	3f 01       	movw	r6, r30
    53f6:	25 32       	cpi	r18, 0x25	; 37
    53f8:	11 f0       	breq	.+4      	; 0x53fe <vfprintf+0x78>
    53fa:	ff 24       	eor	r15, r15
    53fc:	23 c0       	rjmp	.+70     	; 0x5444 <vfprintf+0xbe>
    53fe:	85 e2       	ldi	r24, 0x25	; 37
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	b6 01       	movw	r22, r12
    5404:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    5408:	58 01       	movw	r10, r16
    540a:	dd cf       	rjmp	.-70     	; 0x53c6 <vfprintf+0x40>
    540c:	22 23       	and	r18, r18
    540e:	09 f4       	brne	.+2      	; 0x5412 <vfprintf+0x8c>
    5410:	89 c0       	rjmp	.+274    	; 0x5524 <vfprintf+0x19e>
    5412:	8a e9       	ldi	r24, 0x9A	; 154
    5414:	93 e0       	ldi	r25, 0x03	; 3
    5416:	62 2f       	mov	r22, r18
    5418:	70 e0       	ldi	r23, 0x00	; 0
    541a:	2c 87       	std	Y+12, r18	; 0x0c
    541c:	0e 94 91 2b 	call	0x5722	; 0x5722 <strchr_P>
    5420:	2c 85       	ldd	r18, Y+12	; 0x0c
    5422:	00 97       	sbiw	r24, 0x00	; 0
    5424:	49 f4       	brne	.+18     	; 0x5438 <vfprintf+0xb2>
    5426:	23 32       	cpi	r18, 0x23	; 35
    5428:	19 f4       	brne	.+6      	; 0x5430 <vfprintf+0xaa>
    542a:	f0 e1       	ldi	r31, 0x10	; 16
    542c:	ff 2a       	or	r15, r31
    542e:	04 c0       	rjmp	.+8      	; 0x5438 <vfprintf+0xb2>
    5430:	2c 36       	cpi	r18, 0x6C	; 108
    5432:	69 f4       	brne	.+26     	; 0x544e <vfprintf+0xc8>
    5434:	20 e8       	ldi	r18, 0x80	; 128
    5436:	f2 2a       	or	r15, r18
    5438:	f3 01       	movw	r30, r6
    543a:	e3 fc       	sbrc	r14, 3
    543c:	25 91       	lpm	r18, Z+
    543e:	e3 fe       	sbrs	r14, 3
    5440:	21 91       	ld	r18, Z+
    5442:	3f 01       	movw	r6, r30
    5444:	f7 fe       	sbrs	r15, 7
    5446:	e2 cf       	rjmp	.-60     	; 0x540c <vfprintf+0x86>
    5448:	22 23       	and	r18, r18
    544a:	09 f4       	brne	.+2      	; 0x544e <vfprintf+0xc8>
    544c:	3f c0       	rjmp	.+126    	; 0x54cc <vfprintf+0x146>
    544e:	83 e9       	ldi	r24, 0x93	; 147
    5450:	93 e0       	ldi	r25, 0x03	; 3
    5452:	62 2f       	mov	r22, r18
    5454:	70 e0       	ldi	r23, 0x00	; 0
    5456:	2c 87       	std	Y+12, r18	; 0x0c
    5458:	0e 94 91 2b 	call	0x5722	; 0x5722 <strchr_P>
    545c:	2c 85       	ldd	r18, Y+12	; 0x0c
    545e:	00 97       	sbiw	r24, 0x00	; 0
    5460:	41 f0       	breq	.+16     	; 0x5472 <vfprintf+0xec>
    5462:	64 e0       	ldi	r22, 0x04	; 4
    5464:	a6 2e       	mov	r10, r22
    5466:	b1 2c       	mov	r11, r1
    5468:	a0 0e       	add	r10, r16
    546a:	b1 1e       	adc	r11, r17
    546c:	8f e3       	ldi	r24, 0x3F	; 63
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	0f c0       	rjmp	.+30     	; 0x5490 <vfprintf+0x10a>
    5472:	23 36       	cpi	r18, 0x63	; 99
    5474:	29 f0       	breq	.+10     	; 0x5480 <vfprintf+0xfa>
    5476:	23 37       	cpi	r18, 0x73	; 115
    5478:	89 f0       	breq	.+34     	; 0x549c <vfprintf+0x116>
    547a:	23 35       	cpi	r18, 0x53	; 83
    547c:	29 f5       	brne	.+74     	; 0x54c8 <vfprintf+0x142>
    547e:	0c c0       	rjmp	.+24     	; 0x5498 <vfprintf+0x112>
    5480:	52 e0       	ldi	r21, 0x02	; 2
    5482:	a5 2e       	mov	r10, r21
    5484:	b1 2c       	mov	r11, r1
    5486:	a0 0e       	add	r10, r16
    5488:	b1 1e       	adc	r11, r17
    548a:	f8 01       	movw	r30, r16
    548c:	80 81       	ld	r24, Z
    548e:	91 81       	ldd	r25, Z+1	; 0x01
    5490:	b6 01       	movw	r22, r12
    5492:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    5496:	97 cf       	rjmp	.-210    	; 0x53c6 <vfprintf+0x40>
    5498:	f1 e0       	ldi	r31, 0x01	; 1
    549a:	ff 2a       	or	r15, r31
    549c:	42 e0       	ldi	r20, 0x02	; 2
    549e:	a4 2e       	mov	r10, r20
    54a0:	b1 2c       	mov	r11, r1
    54a2:	a0 0e       	add	r10, r16
    54a4:	b1 1e       	adc	r11, r17
    54a6:	f8 01       	movw	r30, r16
    54a8:	00 81       	ld	r16, Z
    54aa:	11 81       	ldd	r17, Z+1	; 0x01
    54ac:	04 c0       	rjmp	.+8      	; 0x54b6 <vfprintf+0x130>
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	b6 01       	movw	r22, r12
    54b2:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    54b6:	f8 01       	movw	r30, r16
    54b8:	f0 fc       	sbrc	r15, 0
    54ba:	85 91       	lpm	r24, Z+
    54bc:	f0 fe       	sbrs	r15, 0
    54be:	81 91       	ld	r24, Z+
    54c0:	8f 01       	movw	r16, r30
    54c2:	88 23       	and	r24, r24
    54c4:	a1 f7       	brne	.-24     	; 0x54ae <vfprintf+0x128>
    54c6:	7f cf       	rjmp	.-258    	; 0x53c6 <vfprintf+0x40>
    54c8:	24 36       	cpi	r18, 0x64	; 100
    54ca:	11 f0       	breq	.+4      	; 0x54d0 <vfprintf+0x14a>
    54cc:	29 36       	cpi	r18, 0x69	; 105
    54ce:	51 f5       	brne	.+84     	; 0x5524 <vfprintf+0x19e>
    54d0:	f7 fe       	sbrs	r15, 7
    54d2:	0b c0       	rjmp	.+22     	; 0x54ea <vfprintf+0x164>
    54d4:	34 e0       	ldi	r19, 0x04	; 4
    54d6:	a3 2e       	mov	r10, r19
    54d8:	b1 2c       	mov	r11, r1
    54da:	a0 0e       	add	r10, r16
    54dc:	b1 1e       	adc	r11, r17
    54de:	f8 01       	movw	r30, r16
    54e0:	60 81       	ld	r22, Z
    54e2:	71 81       	ldd	r23, Z+1	; 0x01
    54e4:	82 81       	ldd	r24, Z+2	; 0x02
    54e6:	93 81       	ldd	r25, Z+3	; 0x03
    54e8:	0c c0       	rjmp	.+24     	; 0x5502 <vfprintf+0x17c>
    54ea:	22 e0       	ldi	r18, 0x02	; 2
    54ec:	a2 2e       	mov	r10, r18
    54ee:	b1 2c       	mov	r11, r1
    54f0:	a0 0e       	add	r10, r16
    54f2:	b1 1e       	adc	r11, r17
    54f4:	f8 01       	movw	r30, r16
    54f6:	60 81       	ld	r22, Z
    54f8:	71 81       	ldd	r23, Z+1	; 0x01
    54fa:	88 27       	eor	r24, r24
    54fc:	77 fd       	sbrc	r23, 7
    54fe:	80 95       	com	r24
    5500:	98 2f       	mov	r25, r24
    5502:	ff ee       	ldi	r31, 0xEF	; 239
    5504:	ff 22       	and	r15, r31
    5506:	97 ff       	sbrs	r25, 7
    5508:	09 c0       	rjmp	.+18     	; 0x551c <vfprintf+0x196>
    550a:	90 95       	com	r25
    550c:	80 95       	com	r24
    550e:	70 95       	com	r23
    5510:	61 95       	neg	r22
    5512:	7f 4f       	sbci	r23, 0xFF	; 255
    5514:	8f 4f       	sbci	r24, 0xFF	; 255
    5516:	9f 4f       	sbci	r25, 0xFF	; 255
    5518:	20 e4       	ldi	r18, 0x40	; 64
    551a:	f2 2a       	or	r15, r18
    551c:	a4 01       	movw	r20, r8
    551e:	2a e0       	ldi	r18, 0x0A	; 10
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	3b c0       	rjmp	.+118    	; 0x559a <vfprintf+0x214>
    5524:	20 37       	cpi	r18, 0x70	; 112
    5526:	99 f0       	breq	.+38     	; 0x554e <vfprintf+0x1c8>
    5528:	21 37       	cpi	r18, 0x71	; 113
    552a:	30 f4       	brcc	.+12     	; 0x5538 <vfprintf+0x1b2>
    552c:	28 35       	cpi	r18, 0x58	; 88
    552e:	b1 f0       	breq	.+44     	; 0x555c <vfprintf+0x1d6>
    5530:	2f 36       	cpi	r18, 0x6F	; 111
    5532:	09 f0       	breq	.+2      	; 0x5536 <vfprintf+0x1b0>
    5534:	62 c0       	rjmp	.+196    	; 0x55fa <vfprintf+0x274>
    5536:	17 c0       	rjmp	.+46     	; 0x5566 <vfprintf+0x1e0>
    5538:	25 37       	cpi	r18, 0x75	; 117
    553a:	21 f0       	breq	.+8      	; 0x5544 <vfprintf+0x1be>
    553c:	28 37       	cpi	r18, 0x78	; 120
    553e:	09 f0       	breq	.+2      	; 0x5542 <vfprintf+0x1bc>
    5540:	5c c0       	rjmp	.+184    	; 0x55fa <vfprintf+0x274>
    5542:	07 c0       	rjmp	.+14     	; 0x5552 <vfprintf+0x1cc>
    5544:	8f ee       	ldi	r24, 0xEF	; 239
    5546:	f8 22       	and	r15, r24
    5548:	2a e0       	ldi	r18, 0x0A	; 10
    554a:	30 e0       	ldi	r19, 0x00	; 0
    554c:	0e c0       	rjmp	.+28     	; 0x556a <vfprintf+0x1e4>
    554e:	e0 e1       	ldi	r30, 0x10	; 16
    5550:	fe 2a       	or	r15, r30
    5552:	f4 e2       	ldi	r31, 0x24	; 36
    5554:	ff 2a       	or	r15, r31
    5556:	20 e1       	ldi	r18, 0x10	; 16
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	07 c0       	rjmp	.+14     	; 0x556a <vfprintf+0x1e4>
    555c:	24 e0       	ldi	r18, 0x04	; 4
    555e:	f2 2a       	or	r15, r18
    5560:	20 e1       	ldi	r18, 0x10	; 16
    5562:	32 e0       	ldi	r19, 0x02	; 2
    5564:	02 c0       	rjmp	.+4      	; 0x556a <vfprintf+0x1e4>
    5566:	28 e0       	ldi	r18, 0x08	; 8
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	f7 fe       	sbrs	r15, 7
    556c:	0b c0       	rjmp	.+22     	; 0x5584 <vfprintf+0x1fe>
    556e:	94 e0       	ldi	r25, 0x04	; 4
    5570:	a9 2e       	mov	r10, r25
    5572:	b1 2c       	mov	r11, r1
    5574:	a0 0e       	add	r10, r16
    5576:	b1 1e       	adc	r11, r17
    5578:	f8 01       	movw	r30, r16
    557a:	60 81       	ld	r22, Z
    557c:	71 81       	ldd	r23, Z+1	; 0x01
    557e:	82 81       	ldd	r24, Z+2	; 0x02
    5580:	93 81       	ldd	r25, Z+3	; 0x03
    5582:	0a c0       	rjmp	.+20     	; 0x5598 <vfprintf+0x212>
    5584:	82 e0       	ldi	r24, 0x02	; 2
    5586:	a8 2e       	mov	r10, r24
    5588:	b1 2c       	mov	r11, r1
    558a:	a0 0e       	add	r10, r16
    558c:	b1 1e       	adc	r11, r17
    558e:	f8 01       	movw	r30, r16
    5590:	60 81       	ld	r22, Z
    5592:	71 81       	ldd	r23, Z+1	; 0x01
    5594:	80 e0       	ldi	r24, 0x00	; 0
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	a4 01       	movw	r20, r8
    559a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__ultoa_invert>
    559e:	e8 2e       	mov	r14, r24
    55a0:	e8 18       	sub	r14, r8
    55a2:	0f 2d       	mov	r16, r15
    55a4:	10 e0       	ldi	r17, 0x00	; 0
    55a6:	f6 fe       	sbrs	r15, 6
    55a8:	05 c0       	rjmp	.+10     	; 0x55b4 <vfprintf+0x22e>
    55aa:	8d e2       	ldi	r24, 0x2D	; 45
    55ac:	90 e0       	ldi	r25, 0x00	; 0
    55ae:	b6 01       	movw	r22, r12
    55b0:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    55b4:	04 ff       	sbrs	r16, 4
    55b6:	15 c0       	rjmp	.+42     	; 0x55e2 <vfprintf+0x25c>
    55b8:	fe 01       	movw	r30, r28
    55ba:	ee 0d       	add	r30, r14
    55bc:	f1 1d       	adc	r31, r1
    55be:	80 81       	ld	r24, Z
    55c0:	80 33       	cpi	r24, 0x30	; 48
    55c2:	79 f0       	breq	.+30     	; 0x55e2 <vfprintf+0x25c>
    55c4:	80 e3       	ldi	r24, 0x30	; 48
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	b6 01       	movw	r22, r12
    55ca:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    55ce:	02 ff       	sbrs	r16, 2
    55d0:	08 c0       	rjmp	.+16     	; 0x55e2 <vfprintf+0x25c>
    55d2:	c8 01       	movw	r24, r16
    55d4:	80 72       	andi	r24, 0x20	; 32
    55d6:	90 70       	andi	r25, 0x00	; 0
    55d8:	88 5a       	subi	r24, 0xA8	; 168
    55da:	9f 4f       	sbci	r25, 0xFF	; 255
    55dc:	b6 01       	movw	r22, r12
    55de:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    55e2:	ea 94       	dec	r14
    55e4:	f4 01       	movw	r30, r8
    55e6:	ee 0d       	add	r30, r14
    55e8:	f1 1d       	adc	r31, r1
    55ea:	80 81       	ld	r24, Z
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	b6 01       	movw	r22, r12
    55f0:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    55f4:	ee 20       	and	r14, r14
    55f6:	a9 f7       	brne	.-22     	; 0x55e2 <vfprintf+0x25c>
    55f8:	e6 ce       	rjmp	.-564    	; 0x53c6 <vfprintf+0x40>
    55fa:	f6 01       	movw	r30, r12
    55fc:	26 81       	ldd	r18, Z+6	; 0x06
    55fe:	37 81       	ldd	r19, Z+7	; 0x07
    5600:	02 c0       	rjmp	.+4      	; 0x5606 <vfprintf+0x280>
    5602:	2f ef       	ldi	r18, 0xFF	; 255
    5604:	3f ef       	ldi	r19, 0xFF	; 255
    5606:	c9 01       	movw	r24, r18
    5608:	2c 96       	adiw	r28, 0x0c	; 12
    560a:	0f b6       	in	r0, 0x3f	; 63
    560c:	f8 94       	cli
    560e:	de bf       	out	0x3e, r29	; 62
    5610:	0f be       	out	0x3f, r0	; 63
    5612:	cd bf       	out	0x3d, r28	; 61
    5614:	cf 91       	pop	r28
    5616:	df 91       	pop	r29
    5618:	1f 91       	pop	r17
    561a:	0f 91       	pop	r16
    561c:	ff 90       	pop	r15
    561e:	ef 90       	pop	r14
    5620:	df 90       	pop	r13
    5622:	cf 90       	pop	r12
    5624:	bf 90       	pop	r11
    5626:	af 90       	pop	r10
    5628:	9f 90       	pop	r9
    562a:	8f 90       	pop	r8
    562c:	7f 90       	pop	r7
    562e:	6f 90       	pop	r6
    5630:	08 95       	ret

00005632 <__mulsi3>:
    5632:	62 9f       	mul	r22, r18
    5634:	d0 01       	movw	r26, r0
    5636:	73 9f       	mul	r23, r19
    5638:	f0 01       	movw	r30, r0
    563a:	82 9f       	mul	r24, r18
    563c:	e0 0d       	add	r30, r0
    563e:	f1 1d       	adc	r31, r1
    5640:	64 9f       	mul	r22, r20
    5642:	e0 0d       	add	r30, r0
    5644:	f1 1d       	adc	r31, r1
    5646:	92 9f       	mul	r25, r18
    5648:	f0 0d       	add	r31, r0
    564a:	83 9f       	mul	r24, r19
    564c:	f0 0d       	add	r31, r0
    564e:	74 9f       	mul	r23, r20
    5650:	f0 0d       	add	r31, r0
    5652:	65 9f       	mul	r22, r21
    5654:	f0 0d       	add	r31, r0
    5656:	99 27       	eor	r25, r25
    5658:	72 9f       	mul	r23, r18
    565a:	b0 0d       	add	r27, r0
    565c:	e1 1d       	adc	r30, r1
    565e:	f9 1f       	adc	r31, r25
    5660:	63 9f       	mul	r22, r19
    5662:	b0 0d       	add	r27, r0
    5664:	e1 1d       	adc	r30, r1
    5666:	f9 1f       	adc	r31, r25
    5668:	bd 01       	movw	r22, r26
    566a:	cf 01       	movw	r24, r30
    566c:	11 24       	eor	r1, r1
    566e:	08 95       	ret

00005670 <__udivmodsi4>:
    5670:	a1 e2       	ldi	r26, 0x21	; 33
    5672:	1a 2e       	mov	r1, r26
    5674:	aa 1b       	sub	r26, r26
    5676:	bb 1b       	sub	r27, r27
    5678:	fd 01       	movw	r30, r26
    567a:	0d c0       	rjmp	.+26     	; 0x5696 <__udivmodsi4_ep>

0000567c <__udivmodsi4_loop>:
    567c:	aa 1f       	adc	r26, r26
    567e:	bb 1f       	adc	r27, r27
    5680:	ee 1f       	adc	r30, r30
    5682:	ff 1f       	adc	r31, r31
    5684:	a2 17       	cp	r26, r18
    5686:	b3 07       	cpc	r27, r19
    5688:	e4 07       	cpc	r30, r20
    568a:	f5 07       	cpc	r31, r21
    568c:	20 f0       	brcs	.+8      	; 0x5696 <__udivmodsi4_ep>
    568e:	a2 1b       	sub	r26, r18
    5690:	b3 0b       	sbc	r27, r19
    5692:	e4 0b       	sbc	r30, r20
    5694:	f5 0b       	sbc	r31, r21

00005696 <__udivmodsi4_ep>:
    5696:	66 1f       	adc	r22, r22
    5698:	77 1f       	adc	r23, r23
    569a:	88 1f       	adc	r24, r24
    569c:	99 1f       	adc	r25, r25
    569e:	1a 94       	dec	r1
    56a0:	69 f7       	brne	.-38     	; 0x567c <__udivmodsi4_loop>
    56a2:	60 95       	com	r22
    56a4:	70 95       	com	r23
    56a6:	80 95       	com	r24
    56a8:	90 95       	com	r25
    56aa:	9b 01       	movw	r18, r22
    56ac:	ac 01       	movw	r20, r24
    56ae:	bd 01       	movw	r22, r26
    56b0:	cf 01       	movw	r24, r30
    56b2:	08 95       	ret

000056b4 <__prologue_saves__>:
    56b4:	2f 92       	push	r2
    56b6:	3f 92       	push	r3
    56b8:	4f 92       	push	r4
    56ba:	5f 92       	push	r5
    56bc:	6f 92       	push	r6
    56be:	7f 92       	push	r7
    56c0:	8f 92       	push	r8
    56c2:	9f 92       	push	r9
    56c4:	af 92       	push	r10
    56c6:	bf 92       	push	r11
    56c8:	cf 92       	push	r12
    56ca:	df 92       	push	r13
    56cc:	ef 92       	push	r14
    56ce:	ff 92       	push	r15
    56d0:	0f 93       	push	r16
    56d2:	1f 93       	push	r17
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	cd b7       	in	r28, 0x3d	; 61
    56da:	de b7       	in	r29, 0x3e	; 62
    56dc:	ca 1b       	sub	r28, r26
    56de:	db 0b       	sbc	r29, r27
    56e0:	0f b6       	in	r0, 0x3f	; 63
    56e2:	f8 94       	cli
    56e4:	de bf       	out	0x3e, r29	; 62
    56e6:	0f be       	out	0x3f, r0	; 63
    56e8:	cd bf       	out	0x3d, r28	; 61
    56ea:	09 94       	ijmp

000056ec <__epilogue_restores__>:
    56ec:	2a 88       	ldd	r2, Y+18	; 0x12
    56ee:	39 88       	ldd	r3, Y+17	; 0x11
    56f0:	48 88       	ldd	r4, Y+16	; 0x10
    56f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    56f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    56f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    56f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    56fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    56fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    56fe:	b9 84       	ldd	r11, Y+9	; 0x09
    5700:	c8 84       	ldd	r12, Y+8	; 0x08
    5702:	df 80       	ldd	r13, Y+7	; 0x07
    5704:	ee 80       	ldd	r14, Y+6	; 0x06
    5706:	fd 80       	ldd	r15, Y+5	; 0x05
    5708:	0c 81       	ldd	r16, Y+4	; 0x04
    570a:	1b 81       	ldd	r17, Y+3	; 0x03
    570c:	aa 81       	ldd	r26, Y+2	; 0x02
    570e:	b9 81       	ldd	r27, Y+1	; 0x01
    5710:	ce 0f       	add	r28, r30
    5712:	d1 1d       	adc	r29, r1
    5714:	0f b6       	in	r0, 0x3f	; 63
    5716:	f8 94       	cli
    5718:	de bf       	out	0x3e, r29	; 62
    571a:	0f be       	out	0x3f, r0	; 63
    571c:	cd bf       	out	0x3d, r28	; 61
    571e:	ed 01       	movw	r28, r26
    5720:	08 95       	ret

00005722 <strchr_P>:
    5722:	fc 01       	movw	r30, r24
    5724:	05 90       	lpm	r0, Z+
    5726:	06 16       	cp	r0, r22
    5728:	21 f0       	breq	.+8      	; 0x5732 <strchr_P+0x10>
    572a:	00 20       	and	r0, r0
    572c:	d9 f7       	brne	.-10     	; 0x5724 <strchr_P+0x2>
    572e:	c0 01       	movw	r24, r0
    5730:	08 95       	ret
    5732:	31 97       	sbiw	r30, 0x01	; 1
    5734:	cf 01       	movw	r24, r30
    5736:	08 95       	ret

00005738 <memcpy>:
    5738:	fb 01       	movw	r30, r22
    573a:	dc 01       	movw	r26, r24
    573c:	02 c0       	rjmp	.+4      	; 0x5742 <memcpy+0xa>
    573e:	01 90       	ld	r0, Z+
    5740:	0d 92       	st	X+, r0
    5742:	41 50       	subi	r20, 0x01	; 1
    5744:	50 40       	sbci	r21, 0x00	; 0
    5746:	d8 f7       	brcc	.-10     	; 0x573e <memcpy+0x6>
    5748:	08 95       	ret

0000574a <fdevopen>:
    574a:	0f 93       	push	r16
    574c:	1f 93       	push	r17
    574e:	cf 93       	push	r28
    5750:	df 93       	push	r29
    5752:	8c 01       	movw	r16, r24
    5754:	eb 01       	movw	r28, r22
    5756:	00 97       	sbiw	r24, 0x00	; 0
    5758:	11 f4       	brne	.+4      	; 0x575e <fdevopen+0x14>
    575a:	20 97       	sbiw	r28, 0x00	; 0
    575c:	c9 f1       	breq	.+114    	; 0x57d0 <fdevopen+0x86>
    575e:	81 e0       	ldi	r24, 0x01	; 1
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	6e e0       	ldi	r22, 0x0E	; 14
    5764:	70 e0       	ldi	r23, 0x00	; 0
    5766:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <calloc>
    576a:	fc 01       	movw	r30, r24
    576c:	9c 01       	movw	r18, r24
    576e:	00 97       	sbiw	r24, 0x00	; 0
    5770:	89 f1       	breq	.+98     	; 0x57d4 <fdevopen+0x8a>
    5772:	80 e8       	ldi	r24, 0x80	; 128
    5774:	83 83       	std	Z+3, r24	; 0x03
    5776:	20 97       	sbiw	r28, 0x00	; 0
    5778:	71 f0       	breq	.+28     	; 0x5796 <fdevopen+0x4c>
    577a:	d3 87       	std	Z+11, r29	; 0x0b
    577c:	c2 87       	std	Z+10, r28	; 0x0a
    577e:	81 e8       	ldi	r24, 0x81	; 129
    5780:	83 83       	std	Z+3, r24	; 0x03
    5782:	80 91 5e 07 	lds	r24, 0x075E
    5786:	90 91 5f 07 	lds	r25, 0x075F
    578a:	00 97       	sbiw	r24, 0x00	; 0
    578c:	21 f4       	brne	.+8      	; 0x5796 <fdevopen+0x4c>
    578e:	f0 93 5f 07 	sts	0x075F, r31
    5792:	e0 93 5e 07 	sts	0x075E, r30
    5796:	01 15       	cp	r16, r1
    5798:	11 05       	cpc	r17, r1
    579a:	e1 f0       	breq	.+56     	; 0x57d4 <fdevopen+0x8a>
    579c:	11 87       	std	Z+9, r17	; 0x09
    579e:	00 87       	std	Z+8, r16	; 0x08
    57a0:	83 81       	ldd	r24, Z+3	; 0x03
    57a2:	82 60       	ori	r24, 0x02	; 2
    57a4:	83 83       	std	Z+3, r24	; 0x03
    57a6:	80 91 60 07 	lds	r24, 0x0760
    57aa:	90 91 61 07 	lds	r25, 0x0761
    57ae:	00 97       	sbiw	r24, 0x00	; 0
    57b0:	89 f4       	brne	.+34     	; 0x57d4 <fdevopen+0x8a>
    57b2:	f0 93 61 07 	sts	0x0761, r31
    57b6:	e0 93 60 07 	sts	0x0760, r30
    57ba:	80 91 62 07 	lds	r24, 0x0762
    57be:	90 91 63 07 	lds	r25, 0x0763
    57c2:	00 97       	sbiw	r24, 0x00	; 0
    57c4:	39 f4       	brne	.+14     	; 0x57d4 <fdevopen+0x8a>
    57c6:	f0 93 63 07 	sts	0x0763, r31
    57ca:	e0 93 62 07 	sts	0x0762, r30
    57ce:	02 c0       	rjmp	.+4      	; 0x57d4 <fdevopen+0x8a>
    57d0:	20 e0       	ldi	r18, 0x00	; 0
    57d2:	30 e0       	ldi	r19, 0x00	; 0
    57d4:	c9 01       	movw	r24, r18
    57d6:	df 91       	pop	r29
    57d8:	cf 91       	pop	r28
    57da:	1f 91       	pop	r17
    57dc:	0f 91       	pop	r16
    57de:	08 95       	ret

000057e0 <fputc>:
    57e0:	0f 93       	push	r16
    57e2:	1f 93       	push	r17
    57e4:	cf 93       	push	r28
    57e6:	df 93       	push	r29
    57e8:	8c 01       	movw	r16, r24
    57ea:	eb 01       	movw	r28, r22
    57ec:	8b 81       	ldd	r24, Y+3	; 0x03
    57ee:	81 ff       	sbrs	r24, 1
    57f0:	1b c0       	rjmp	.+54     	; 0x5828 <fputc+0x48>
    57f2:	82 ff       	sbrs	r24, 2
    57f4:	0d c0       	rjmp	.+26     	; 0x5810 <fputc+0x30>
    57f6:	2e 81       	ldd	r18, Y+6	; 0x06
    57f8:	3f 81       	ldd	r19, Y+7	; 0x07
    57fa:	8c 81       	ldd	r24, Y+4	; 0x04
    57fc:	9d 81       	ldd	r25, Y+5	; 0x05
    57fe:	28 17       	cp	r18, r24
    5800:	39 07       	cpc	r19, r25
    5802:	64 f4       	brge	.+24     	; 0x581c <fputc+0x3c>
    5804:	e8 81       	ld	r30, Y
    5806:	f9 81       	ldd	r31, Y+1	; 0x01
    5808:	01 93       	st	Z+, r16
    580a:	f9 83       	std	Y+1, r31	; 0x01
    580c:	e8 83       	st	Y, r30
    580e:	06 c0       	rjmp	.+12     	; 0x581c <fputc+0x3c>
    5810:	e8 85       	ldd	r30, Y+8	; 0x08
    5812:	f9 85       	ldd	r31, Y+9	; 0x09
    5814:	80 2f       	mov	r24, r16
    5816:	09 95       	icall
    5818:	00 97       	sbiw	r24, 0x00	; 0
    581a:	31 f4       	brne	.+12     	; 0x5828 <fputc+0x48>
    581c:	8e 81       	ldd	r24, Y+6	; 0x06
    581e:	9f 81       	ldd	r25, Y+7	; 0x07
    5820:	01 96       	adiw	r24, 0x01	; 1
    5822:	9f 83       	std	Y+7, r25	; 0x07
    5824:	8e 83       	std	Y+6, r24	; 0x06
    5826:	02 c0       	rjmp	.+4      	; 0x582c <fputc+0x4c>
    5828:	0f ef       	ldi	r16, 0xFF	; 255
    582a:	1f ef       	ldi	r17, 0xFF	; 255
    582c:	c8 01       	movw	r24, r16
    582e:	df 91       	pop	r29
    5830:	cf 91       	pop	r28
    5832:	1f 91       	pop	r17
    5834:	0f 91       	pop	r16
    5836:	08 95       	ret

00005838 <printf>:
    5838:	df 93       	push	r29
    583a:	cf 93       	push	r28
    583c:	cd b7       	in	r28, 0x3d	; 61
    583e:	de b7       	in	r29, 0x3e	; 62
    5840:	fe 01       	movw	r30, r28
    5842:	35 96       	adiw	r30, 0x05	; 5
    5844:	61 91       	ld	r22, Z+
    5846:	71 91       	ld	r23, Z+
    5848:	80 91 60 07 	lds	r24, 0x0760
    584c:	90 91 61 07 	lds	r25, 0x0761
    5850:	af 01       	movw	r20, r30
    5852:	0e 94 c3 29 	call	0x5386	; 0x5386 <vfprintf>
    5856:	cf 91       	pop	r28
    5858:	df 91       	pop	r29
    585a:	08 95       	ret

0000585c <putchar>:
    585c:	60 91 60 07 	lds	r22, 0x0760
    5860:	70 91 61 07 	lds	r23, 0x0761
    5864:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <fputc>
    5868:	08 95       	ret

0000586a <puts>:
    586a:	ef 92       	push	r14
    586c:	ff 92       	push	r15
    586e:	0f 93       	push	r16
    5870:	1f 93       	push	r17
    5872:	cf 93       	push	r28
    5874:	df 93       	push	r29
    5876:	8c 01       	movw	r16, r24
    5878:	e0 91 60 07 	lds	r30, 0x0760
    587c:	f0 91 61 07 	lds	r31, 0x0761
    5880:	83 81       	ldd	r24, Z+3	; 0x03
    5882:	81 ff       	sbrs	r24, 1
    5884:	1f c0       	rjmp	.+62     	; 0x58c4 <puts+0x5a>
    5886:	c0 e0       	ldi	r28, 0x00	; 0
    5888:	d0 e0       	ldi	r29, 0x00	; 0
    588a:	0a c0       	rjmp	.+20     	; 0x58a0 <puts+0x36>
    588c:	db 01       	movw	r26, r22
    588e:	18 96       	adiw	r26, 0x08	; 8
    5890:	ed 91       	ld	r30, X+
    5892:	fc 91       	ld	r31, X
    5894:	19 97       	sbiw	r26, 0x09	; 9
    5896:	09 95       	icall
    5898:	00 97       	sbiw	r24, 0x00	; 0
    589a:	11 f0       	breq	.+4      	; 0x58a0 <puts+0x36>
    589c:	cf ef       	ldi	r28, 0xFF	; 255
    589e:	df ef       	ldi	r29, 0xFF	; 255
    58a0:	f8 01       	movw	r30, r16
    58a2:	81 91       	ld	r24, Z+
    58a4:	8f 01       	movw	r16, r30
    58a6:	60 91 60 07 	lds	r22, 0x0760
    58aa:	70 91 61 07 	lds	r23, 0x0761
    58ae:	88 23       	and	r24, r24
    58b0:	69 f7       	brne	.-38     	; 0x588c <puts+0x22>
    58b2:	db 01       	movw	r26, r22
    58b4:	18 96       	adiw	r26, 0x08	; 8
    58b6:	ed 91       	ld	r30, X+
    58b8:	fc 91       	ld	r31, X
    58ba:	19 97       	sbiw	r26, 0x09	; 9
    58bc:	8a e0       	ldi	r24, 0x0A	; 10
    58be:	09 95       	icall
    58c0:	00 97       	sbiw	r24, 0x00	; 0
    58c2:	11 f0       	breq	.+4      	; 0x58c8 <puts+0x5e>
    58c4:	cf ef       	ldi	r28, 0xFF	; 255
    58c6:	df ef       	ldi	r29, 0xFF	; 255
    58c8:	ce 01       	movw	r24, r28
    58ca:	df 91       	pop	r29
    58cc:	cf 91       	pop	r28
    58ce:	1f 91       	pop	r17
    58d0:	0f 91       	pop	r16
    58d2:	ff 90       	pop	r15
    58d4:	ef 90       	pop	r14
    58d6:	08 95       	ret

000058d8 <sprintf>:
    58d8:	0f 93       	push	r16
    58da:	1f 93       	push	r17
    58dc:	df 93       	push	r29
    58de:	cf 93       	push	r28
    58e0:	cd b7       	in	r28, 0x3d	; 61
    58e2:	de b7       	in	r29, 0x3e	; 62
    58e4:	2e 97       	sbiw	r28, 0x0e	; 14
    58e6:	0f b6       	in	r0, 0x3f	; 63
    58e8:	f8 94       	cli
    58ea:	de bf       	out	0x3e, r29	; 62
    58ec:	0f be       	out	0x3f, r0	; 63
    58ee:	cd bf       	out	0x3d, r28	; 61
    58f0:	0d 89       	ldd	r16, Y+21	; 0x15
    58f2:	1e 89       	ldd	r17, Y+22	; 0x16
    58f4:	86 e0       	ldi	r24, 0x06	; 6
    58f6:	8c 83       	std	Y+4, r24	; 0x04
    58f8:	1a 83       	std	Y+2, r17	; 0x02
    58fa:	09 83       	std	Y+1, r16	; 0x01
    58fc:	8f ef       	ldi	r24, 0xFF	; 255
    58fe:	9f e7       	ldi	r25, 0x7F	; 127
    5900:	9e 83       	std	Y+6, r25	; 0x06
    5902:	8d 83       	std	Y+5, r24	; 0x05
    5904:	9e 01       	movw	r18, r28
    5906:	27 5e       	subi	r18, 0xE7	; 231
    5908:	3f 4f       	sbci	r19, 0xFF	; 255
    590a:	ce 01       	movw	r24, r28
    590c:	01 96       	adiw	r24, 0x01	; 1
    590e:	6f 89       	ldd	r22, Y+23	; 0x17
    5910:	78 8d       	ldd	r23, Y+24	; 0x18
    5912:	a9 01       	movw	r20, r18
    5914:	0e 94 c3 29 	call	0x5386	; 0x5386 <vfprintf>
    5918:	ef 81       	ldd	r30, Y+7	; 0x07
    591a:	f8 85       	ldd	r31, Y+8	; 0x08
    591c:	e0 0f       	add	r30, r16
    591e:	f1 1f       	adc	r31, r17
    5920:	10 82       	st	Z, r1
    5922:	2e 96       	adiw	r28, 0x0e	; 14
    5924:	0f b6       	in	r0, 0x3f	; 63
    5926:	f8 94       	cli
    5928:	de bf       	out	0x3e, r29	; 62
    592a:	0f be       	out	0x3f, r0	; 63
    592c:	cd bf       	out	0x3d, r28	; 61
    592e:	cf 91       	pop	r28
    5930:	df 91       	pop	r29
    5932:	1f 91       	pop	r17
    5934:	0f 91       	pop	r16
    5936:	08 95       	ret

00005938 <__ultoa_invert>:
    5938:	fa 01       	movw	r30, r20
    593a:	aa 27       	eor	r26, r26
    593c:	28 30       	cpi	r18, 0x08	; 8
    593e:	51 f1       	breq	.+84     	; 0x5994 <__ultoa_invert+0x5c>
    5940:	20 31       	cpi	r18, 0x10	; 16
    5942:	81 f1       	breq	.+96     	; 0x59a4 <__ultoa_invert+0x6c>
    5944:	e8 94       	clt
    5946:	6f 93       	push	r22
    5948:	6e 7f       	andi	r22, 0xFE	; 254
    594a:	6e 5f       	subi	r22, 0xFE	; 254
    594c:	7f 4f       	sbci	r23, 0xFF	; 255
    594e:	8f 4f       	sbci	r24, 0xFF	; 255
    5950:	9f 4f       	sbci	r25, 0xFF	; 255
    5952:	af 4f       	sbci	r26, 0xFF	; 255
    5954:	b1 e0       	ldi	r27, 0x01	; 1
    5956:	3e d0       	rcall	.+124    	; 0x59d4 <__ultoa_invert+0x9c>
    5958:	b4 e0       	ldi	r27, 0x04	; 4
    595a:	3c d0       	rcall	.+120    	; 0x59d4 <__ultoa_invert+0x9c>
    595c:	67 0f       	add	r22, r23
    595e:	78 1f       	adc	r23, r24
    5960:	89 1f       	adc	r24, r25
    5962:	9a 1f       	adc	r25, r26
    5964:	a1 1d       	adc	r26, r1
    5966:	68 0f       	add	r22, r24
    5968:	79 1f       	adc	r23, r25
    596a:	8a 1f       	adc	r24, r26
    596c:	91 1d       	adc	r25, r1
    596e:	a1 1d       	adc	r26, r1
    5970:	6a 0f       	add	r22, r26
    5972:	71 1d       	adc	r23, r1
    5974:	81 1d       	adc	r24, r1
    5976:	91 1d       	adc	r25, r1
    5978:	a1 1d       	adc	r26, r1
    597a:	20 d0       	rcall	.+64     	; 0x59bc <__ultoa_invert+0x84>
    597c:	09 f4       	brne	.+2      	; 0x5980 <__ultoa_invert+0x48>
    597e:	68 94       	set
    5980:	3f 91       	pop	r19
    5982:	2a e0       	ldi	r18, 0x0A	; 10
    5984:	26 9f       	mul	r18, r22
    5986:	11 24       	eor	r1, r1
    5988:	30 19       	sub	r19, r0
    598a:	30 5d       	subi	r19, 0xD0	; 208
    598c:	31 93       	st	Z+, r19
    598e:	de f6       	brtc	.-74     	; 0x5946 <__ultoa_invert+0xe>
    5990:	cf 01       	movw	r24, r30
    5992:	08 95       	ret
    5994:	46 2f       	mov	r20, r22
    5996:	47 70       	andi	r20, 0x07	; 7
    5998:	40 5d       	subi	r20, 0xD0	; 208
    599a:	41 93       	st	Z+, r20
    599c:	b3 e0       	ldi	r27, 0x03	; 3
    599e:	0f d0       	rcall	.+30     	; 0x59be <__ultoa_invert+0x86>
    59a0:	c9 f7       	brne	.-14     	; 0x5994 <__ultoa_invert+0x5c>
    59a2:	f6 cf       	rjmp	.-20     	; 0x5990 <__ultoa_invert+0x58>
    59a4:	46 2f       	mov	r20, r22
    59a6:	4f 70       	andi	r20, 0x0F	; 15
    59a8:	40 5d       	subi	r20, 0xD0	; 208
    59aa:	4a 33       	cpi	r20, 0x3A	; 58
    59ac:	18 f0       	brcs	.+6      	; 0x59b4 <__ultoa_invert+0x7c>
    59ae:	49 5d       	subi	r20, 0xD9	; 217
    59b0:	31 fd       	sbrc	r19, 1
    59b2:	40 52       	subi	r20, 0x20	; 32
    59b4:	41 93       	st	Z+, r20
    59b6:	02 d0       	rcall	.+4      	; 0x59bc <__ultoa_invert+0x84>
    59b8:	a9 f7       	brne	.-22     	; 0x59a4 <__ultoa_invert+0x6c>
    59ba:	ea cf       	rjmp	.-44     	; 0x5990 <__ultoa_invert+0x58>
    59bc:	b4 e0       	ldi	r27, 0x04	; 4
    59be:	a6 95       	lsr	r26
    59c0:	97 95       	ror	r25
    59c2:	87 95       	ror	r24
    59c4:	77 95       	ror	r23
    59c6:	67 95       	ror	r22
    59c8:	ba 95       	dec	r27
    59ca:	c9 f7       	brne	.-14     	; 0x59be <__ultoa_invert+0x86>
    59cc:	00 97       	sbiw	r24, 0x00	; 0
    59ce:	61 05       	cpc	r22, r1
    59d0:	71 05       	cpc	r23, r1
    59d2:	08 95       	ret
    59d4:	9b 01       	movw	r18, r22
    59d6:	ac 01       	movw	r20, r24
    59d8:	0a 2e       	mov	r0, r26
    59da:	06 94       	lsr	r0
    59dc:	57 95       	ror	r21
    59de:	47 95       	ror	r20
    59e0:	37 95       	ror	r19
    59e2:	27 95       	ror	r18
    59e4:	ba 95       	dec	r27
    59e6:	c9 f7       	brne	.-14     	; 0x59da <__ultoa_invert+0xa2>
    59e8:	62 0f       	add	r22, r18
    59ea:	73 1f       	adc	r23, r19
    59ec:	84 1f       	adc	r24, r20
    59ee:	95 1f       	adc	r25, r21
    59f0:	a0 1d       	adc	r26, r0
    59f2:	08 95       	ret

000059f4 <__eerd_byte_m128rfa1>:
    59f4:	f9 99       	sbic	0x1f, 1	; 31
    59f6:	fe cf       	rjmp	.-4      	; 0x59f4 <__eerd_byte_m128rfa1>
    59f8:	92 bd       	out	0x22, r25	; 34
    59fa:	81 bd       	out	0x21, r24	; 33
    59fc:	f8 9a       	sbi	0x1f, 0	; 31
    59fe:	99 27       	eor	r25, r25
    5a00:	80 b5       	in	r24, 0x20	; 32
    5a02:	08 95       	ret

00005a04 <__eewr_byte_m128rfa1>:
    5a04:	26 2f       	mov	r18, r22

00005a06 <__eewr_r18_m128rfa1>:
    5a06:	f9 99       	sbic	0x1f, 1	; 31
    5a08:	fe cf       	rjmp	.-4      	; 0x5a06 <__eewr_r18_m128rfa1>
    5a0a:	1f ba       	out	0x1f, r1	; 31
    5a0c:	92 bd       	out	0x22, r25	; 34
    5a0e:	81 bd       	out	0x21, r24	; 33
    5a10:	20 bd       	out	0x20, r18	; 32
    5a12:	0f b6       	in	r0, 0x3f	; 63
    5a14:	f8 94       	cli
    5a16:	fa 9a       	sbi	0x1f, 2	; 31
    5a18:	f9 9a       	sbi	0x1f, 1	; 31
    5a1a:	0f be       	out	0x3f, r0	; 63
    5a1c:	01 96       	adiw	r24, 0x01	; 1
    5a1e:	08 95       	ret

00005a20 <calloc>:
    5a20:	ef 92       	push	r14
    5a22:	ff 92       	push	r15
    5a24:	0f 93       	push	r16
    5a26:	1f 93       	push	r17
    5a28:	cf 93       	push	r28
    5a2a:	df 93       	push	r29
    5a2c:	68 9f       	mul	r22, r24
    5a2e:	80 01       	movw	r16, r0
    5a30:	69 9f       	mul	r22, r25
    5a32:	10 0d       	add	r17, r0
    5a34:	78 9f       	mul	r23, r24
    5a36:	10 0d       	add	r17, r0
    5a38:	11 24       	eor	r1, r1
    5a3a:	c8 01       	movw	r24, r16
    5a3c:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <malloc>
    5a40:	e8 2e       	mov	r14, r24
    5a42:	e7 01       	movw	r28, r14
    5a44:	7e 01       	movw	r14, r28
    5a46:	f9 2e       	mov	r15, r25
    5a48:	e7 01       	movw	r28, r14
    5a4a:	20 97       	sbiw	r28, 0x00	; 0
    5a4c:	31 f0       	breq	.+12     	; 0x5a5a <calloc+0x3a>
    5a4e:	8e 2d       	mov	r24, r14
    5a50:	60 e0       	ldi	r22, 0x00	; 0
    5a52:	70 e0       	ldi	r23, 0x00	; 0
    5a54:	a8 01       	movw	r20, r16
    5a56:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <memset>
    5a5a:	ce 01       	movw	r24, r28
    5a5c:	df 91       	pop	r29
    5a5e:	cf 91       	pop	r28
    5a60:	1f 91       	pop	r17
    5a62:	0f 91       	pop	r16
    5a64:	ff 90       	pop	r15
    5a66:	ef 90       	pop	r14
    5a68:	08 95       	ret

00005a6a <malloc>:
    5a6a:	cf 93       	push	r28
    5a6c:	df 93       	push	r29
    5a6e:	82 30       	cpi	r24, 0x02	; 2
    5a70:	91 05       	cpc	r25, r1
    5a72:	10 f4       	brcc	.+4      	; 0x5a78 <malloc+0xe>
    5a74:	82 e0       	ldi	r24, 0x02	; 2
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	e0 91 66 07 	lds	r30, 0x0766
    5a7c:	f0 91 67 07 	lds	r31, 0x0767
    5a80:	40 e0       	ldi	r20, 0x00	; 0
    5a82:	50 e0       	ldi	r21, 0x00	; 0
    5a84:	20 e0       	ldi	r18, 0x00	; 0
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	26 c0       	rjmp	.+76     	; 0x5ad6 <malloc+0x6c>
    5a8a:	60 81       	ld	r22, Z
    5a8c:	71 81       	ldd	r23, Z+1	; 0x01
    5a8e:	68 17       	cp	r22, r24
    5a90:	79 07       	cpc	r23, r25
    5a92:	e0 f0       	brcs	.+56     	; 0x5acc <malloc+0x62>
    5a94:	68 17       	cp	r22, r24
    5a96:	79 07       	cpc	r23, r25
    5a98:	81 f4       	brne	.+32     	; 0x5aba <malloc+0x50>
    5a9a:	82 81       	ldd	r24, Z+2	; 0x02
    5a9c:	93 81       	ldd	r25, Z+3	; 0x03
    5a9e:	21 15       	cp	r18, r1
    5aa0:	31 05       	cpc	r19, r1
    5aa2:	31 f0       	breq	.+12     	; 0x5ab0 <malloc+0x46>
    5aa4:	d9 01       	movw	r26, r18
    5aa6:	13 96       	adiw	r26, 0x03	; 3
    5aa8:	9c 93       	st	X, r25
    5aaa:	8e 93       	st	-X, r24
    5aac:	12 97       	sbiw	r26, 0x02	; 2
    5aae:	2b c0       	rjmp	.+86     	; 0x5b06 <malloc+0x9c>
    5ab0:	90 93 67 07 	sts	0x0767, r25
    5ab4:	80 93 66 07 	sts	0x0766, r24
    5ab8:	26 c0       	rjmp	.+76     	; 0x5b06 <malloc+0x9c>
    5aba:	41 15       	cp	r20, r1
    5abc:	51 05       	cpc	r21, r1
    5abe:	19 f0       	breq	.+6      	; 0x5ac6 <malloc+0x5c>
    5ac0:	64 17       	cp	r22, r20
    5ac2:	75 07       	cpc	r23, r21
    5ac4:	18 f4       	brcc	.+6      	; 0x5acc <malloc+0x62>
    5ac6:	ab 01       	movw	r20, r22
    5ac8:	e9 01       	movw	r28, r18
    5aca:	df 01       	movw	r26, r30
    5acc:	9f 01       	movw	r18, r30
    5ace:	72 81       	ldd	r23, Z+2	; 0x02
    5ad0:	63 81       	ldd	r22, Z+3	; 0x03
    5ad2:	e7 2f       	mov	r30, r23
    5ad4:	f6 2f       	mov	r31, r22
    5ad6:	30 97       	sbiw	r30, 0x00	; 0
    5ad8:	c1 f6       	brne	.-80     	; 0x5a8a <malloc+0x20>
    5ada:	41 15       	cp	r20, r1
    5adc:	51 05       	cpc	r21, r1
    5ade:	01 f1       	breq	.+64     	; 0x5b20 <malloc+0xb6>
    5ae0:	48 1b       	sub	r20, r24
    5ae2:	59 0b       	sbc	r21, r25
    5ae4:	44 30       	cpi	r20, 0x04	; 4
    5ae6:	51 05       	cpc	r21, r1
    5ae8:	80 f4       	brcc	.+32     	; 0x5b0a <malloc+0xa0>
    5aea:	12 96       	adiw	r26, 0x02	; 2
    5aec:	8d 91       	ld	r24, X+
    5aee:	9c 91       	ld	r25, X
    5af0:	13 97       	sbiw	r26, 0x03	; 3
    5af2:	20 97       	sbiw	r28, 0x00	; 0
    5af4:	19 f0       	breq	.+6      	; 0x5afc <malloc+0x92>
    5af6:	9b 83       	std	Y+3, r25	; 0x03
    5af8:	8a 83       	std	Y+2, r24	; 0x02
    5afa:	04 c0       	rjmp	.+8      	; 0x5b04 <malloc+0x9a>
    5afc:	90 93 67 07 	sts	0x0767, r25
    5b00:	80 93 66 07 	sts	0x0766, r24
    5b04:	fd 01       	movw	r30, r26
    5b06:	32 96       	adiw	r30, 0x02	; 2
    5b08:	46 c0       	rjmp	.+140    	; 0x5b96 <malloc+0x12c>
    5b0a:	fd 01       	movw	r30, r26
    5b0c:	e4 0f       	add	r30, r20
    5b0e:	f5 1f       	adc	r31, r21
    5b10:	81 93       	st	Z+, r24
    5b12:	91 93       	st	Z+, r25
    5b14:	42 50       	subi	r20, 0x02	; 2
    5b16:	50 40       	sbci	r21, 0x00	; 0
    5b18:	11 96       	adiw	r26, 0x01	; 1
    5b1a:	5c 93       	st	X, r21
    5b1c:	4e 93       	st	-X, r20
    5b1e:	3b c0       	rjmp	.+118    	; 0x5b96 <malloc+0x12c>
    5b20:	20 91 64 07 	lds	r18, 0x0764
    5b24:	30 91 65 07 	lds	r19, 0x0765
    5b28:	21 15       	cp	r18, r1
    5b2a:	31 05       	cpc	r19, r1
    5b2c:	41 f4       	brne	.+16     	; 0x5b3e <malloc+0xd4>
    5b2e:	20 91 91 04 	lds	r18, 0x0491
    5b32:	30 91 92 04 	lds	r19, 0x0492
    5b36:	30 93 65 07 	sts	0x0765, r19
    5b3a:	20 93 64 07 	sts	0x0764, r18
    5b3e:	20 91 93 04 	lds	r18, 0x0493
    5b42:	30 91 94 04 	lds	r19, 0x0494
    5b46:	21 15       	cp	r18, r1
    5b48:	31 05       	cpc	r19, r1
    5b4a:	41 f4       	brne	.+16     	; 0x5b5c <malloc+0xf2>
    5b4c:	2d b7       	in	r18, 0x3d	; 61
    5b4e:	3e b7       	in	r19, 0x3e	; 62
    5b50:	40 91 8f 04 	lds	r20, 0x048F
    5b54:	50 91 90 04 	lds	r21, 0x0490
    5b58:	24 1b       	sub	r18, r20
    5b5a:	35 0b       	sbc	r19, r21
    5b5c:	e0 91 64 07 	lds	r30, 0x0764
    5b60:	f0 91 65 07 	lds	r31, 0x0765
    5b64:	e2 17       	cp	r30, r18
    5b66:	f3 07       	cpc	r31, r19
    5b68:	a0 f4       	brcc	.+40     	; 0x5b92 <malloc+0x128>
    5b6a:	2e 1b       	sub	r18, r30
    5b6c:	3f 0b       	sbc	r19, r31
    5b6e:	28 17       	cp	r18, r24
    5b70:	39 07       	cpc	r19, r25
    5b72:	78 f0       	brcs	.+30     	; 0x5b92 <malloc+0x128>
    5b74:	ac 01       	movw	r20, r24
    5b76:	4e 5f       	subi	r20, 0xFE	; 254
    5b78:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7a:	24 17       	cp	r18, r20
    5b7c:	35 07       	cpc	r19, r21
    5b7e:	48 f0       	brcs	.+18     	; 0x5b92 <malloc+0x128>
    5b80:	4e 0f       	add	r20, r30
    5b82:	5f 1f       	adc	r21, r31
    5b84:	50 93 65 07 	sts	0x0765, r21
    5b88:	40 93 64 07 	sts	0x0764, r20
    5b8c:	81 93       	st	Z+, r24
    5b8e:	91 93       	st	Z+, r25
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <malloc+0x12c>
    5b92:	e0 e0       	ldi	r30, 0x00	; 0
    5b94:	f0 e0       	ldi	r31, 0x00	; 0
    5b96:	cf 01       	movw	r24, r30
    5b98:	df 91       	pop	r29
    5b9a:	cf 91       	pop	r28
    5b9c:	08 95       	ret

00005b9e <free>:
    5b9e:	cf 93       	push	r28
    5ba0:	df 93       	push	r29
    5ba2:	00 97       	sbiw	r24, 0x00	; 0
    5ba4:	09 f4       	brne	.+2      	; 0x5ba8 <free+0xa>
    5ba6:	91 c0       	rjmp	.+290    	; 0x5cca <free+0x12c>
    5ba8:	fc 01       	movw	r30, r24
    5baa:	32 97       	sbiw	r30, 0x02	; 2
    5bac:	13 82       	std	Z+3, r1	; 0x03
    5bae:	12 82       	std	Z+2, r1	; 0x02
    5bb0:	60 91 66 07 	lds	r22, 0x0766
    5bb4:	70 91 67 07 	lds	r23, 0x0767
    5bb8:	61 15       	cp	r22, r1
    5bba:	71 05       	cpc	r23, r1
    5bbc:	81 f4       	brne	.+32     	; 0x5bde <free+0x40>
    5bbe:	20 81       	ld	r18, Z
    5bc0:	31 81       	ldd	r19, Z+1	; 0x01
    5bc2:	28 0f       	add	r18, r24
    5bc4:	39 1f       	adc	r19, r25
    5bc6:	80 91 64 07 	lds	r24, 0x0764
    5bca:	90 91 65 07 	lds	r25, 0x0765
    5bce:	82 17       	cp	r24, r18
    5bd0:	93 07       	cpc	r25, r19
    5bd2:	99 f5       	brne	.+102    	; 0x5c3a <free+0x9c>
    5bd4:	f0 93 65 07 	sts	0x0765, r31
    5bd8:	e0 93 64 07 	sts	0x0764, r30
    5bdc:	76 c0       	rjmp	.+236    	; 0x5cca <free+0x12c>
    5bde:	db 01       	movw	r26, r22
    5be0:	80 e0       	ldi	r24, 0x00	; 0
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	02 c0       	rjmp	.+4      	; 0x5bea <free+0x4c>
    5be6:	cd 01       	movw	r24, r26
    5be8:	d9 01       	movw	r26, r18
    5bea:	ae 17       	cp	r26, r30
    5bec:	bf 07       	cpc	r27, r31
    5bee:	48 f4       	brcc	.+18     	; 0x5c02 <free+0x64>
    5bf0:	12 96       	adiw	r26, 0x02	; 2
    5bf2:	2d 91       	ld	r18, X+
    5bf4:	3c 91       	ld	r19, X
    5bf6:	13 97       	sbiw	r26, 0x03	; 3
    5bf8:	21 15       	cp	r18, r1
    5bfa:	31 05       	cpc	r19, r1
    5bfc:	a1 f7       	brne	.-24     	; 0x5be6 <free+0x48>
    5bfe:	cd 01       	movw	r24, r26
    5c00:	21 c0       	rjmp	.+66     	; 0x5c44 <free+0xa6>
    5c02:	b3 83       	std	Z+3, r27	; 0x03
    5c04:	a2 83       	std	Z+2, r26	; 0x02
    5c06:	ef 01       	movw	r28, r30
    5c08:	49 91       	ld	r20, Y+
    5c0a:	59 91       	ld	r21, Y+
    5c0c:	9e 01       	movw	r18, r28
    5c0e:	24 0f       	add	r18, r20
    5c10:	35 1f       	adc	r19, r21
    5c12:	a2 17       	cp	r26, r18
    5c14:	b3 07       	cpc	r27, r19
    5c16:	79 f4       	brne	.+30     	; 0x5c36 <free+0x98>
    5c18:	2d 91       	ld	r18, X+
    5c1a:	3c 91       	ld	r19, X
    5c1c:	11 97       	sbiw	r26, 0x01	; 1
    5c1e:	24 0f       	add	r18, r20
    5c20:	35 1f       	adc	r19, r21
    5c22:	2e 5f       	subi	r18, 0xFE	; 254
    5c24:	3f 4f       	sbci	r19, 0xFF	; 255
    5c26:	31 83       	std	Z+1, r19	; 0x01
    5c28:	20 83       	st	Z, r18
    5c2a:	12 96       	adiw	r26, 0x02	; 2
    5c2c:	2d 91       	ld	r18, X+
    5c2e:	3c 91       	ld	r19, X
    5c30:	13 97       	sbiw	r26, 0x03	; 3
    5c32:	33 83       	std	Z+3, r19	; 0x03
    5c34:	22 83       	std	Z+2, r18	; 0x02
    5c36:	00 97       	sbiw	r24, 0x00	; 0
    5c38:	29 f4       	brne	.+10     	; 0x5c44 <free+0xa6>
    5c3a:	f0 93 67 07 	sts	0x0767, r31
    5c3e:	e0 93 66 07 	sts	0x0766, r30
    5c42:	43 c0       	rjmp	.+134    	; 0x5cca <free+0x12c>
    5c44:	dc 01       	movw	r26, r24
    5c46:	13 96       	adiw	r26, 0x03	; 3
    5c48:	fc 93       	st	X, r31
    5c4a:	ee 93       	st	-X, r30
    5c4c:	12 97       	sbiw	r26, 0x02	; 2
    5c4e:	4d 91       	ld	r20, X+
    5c50:	5d 91       	ld	r21, X+
    5c52:	a4 0f       	add	r26, r20
    5c54:	b5 1f       	adc	r27, r21
    5c56:	ea 17       	cp	r30, r26
    5c58:	fb 07       	cpc	r31, r27
    5c5a:	69 f4       	brne	.+26     	; 0x5c76 <free+0xd8>
    5c5c:	20 81       	ld	r18, Z
    5c5e:	31 81       	ldd	r19, Z+1	; 0x01
    5c60:	24 0f       	add	r18, r20
    5c62:	35 1f       	adc	r19, r21
    5c64:	2e 5f       	subi	r18, 0xFE	; 254
    5c66:	3f 4f       	sbci	r19, 0xFF	; 255
    5c68:	ec 01       	movw	r28, r24
    5c6a:	39 83       	std	Y+1, r19	; 0x01
    5c6c:	28 83       	st	Y, r18
    5c6e:	22 81       	ldd	r18, Z+2	; 0x02
    5c70:	33 81       	ldd	r19, Z+3	; 0x03
    5c72:	3b 83       	std	Y+3, r19	; 0x03
    5c74:	2a 83       	std	Y+2, r18	; 0x02
    5c76:	e0 e0       	ldi	r30, 0x00	; 0
    5c78:	f0 e0       	ldi	r31, 0x00	; 0
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <free+0xe2>
    5c7c:	fb 01       	movw	r30, r22
    5c7e:	bc 01       	movw	r22, r24
    5c80:	db 01       	movw	r26, r22
    5c82:	12 96       	adiw	r26, 0x02	; 2
    5c84:	8d 91       	ld	r24, X+
    5c86:	9c 91       	ld	r25, X
    5c88:	13 97       	sbiw	r26, 0x03	; 3
    5c8a:	00 97       	sbiw	r24, 0x00	; 0
    5c8c:	b9 f7       	brne	.-18     	; 0x5c7c <free+0xde>
    5c8e:	9b 01       	movw	r18, r22
    5c90:	2e 5f       	subi	r18, 0xFE	; 254
    5c92:	3f 4f       	sbci	r19, 0xFF	; 255
    5c94:	8d 91       	ld	r24, X+
    5c96:	9c 91       	ld	r25, X
    5c98:	11 97       	sbiw	r26, 0x01	; 1
    5c9a:	82 0f       	add	r24, r18
    5c9c:	93 1f       	adc	r25, r19
    5c9e:	40 91 64 07 	lds	r20, 0x0764
    5ca2:	50 91 65 07 	lds	r21, 0x0765
    5ca6:	48 17       	cp	r20, r24
    5ca8:	59 07       	cpc	r21, r25
    5caa:	79 f4       	brne	.+30     	; 0x5cca <free+0x12c>
    5cac:	30 97       	sbiw	r30, 0x00	; 0
    5cae:	29 f4       	brne	.+10     	; 0x5cba <free+0x11c>
    5cb0:	10 92 67 07 	sts	0x0767, r1
    5cb4:	10 92 66 07 	sts	0x0766, r1
    5cb8:	02 c0       	rjmp	.+4      	; 0x5cbe <free+0x120>
    5cba:	13 82       	std	Z+3, r1	; 0x03
    5cbc:	12 82       	std	Z+2, r1	; 0x02
    5cbe:	22 50       	subi	r18, 0x02	; 2
    5cc0:	30 40       	sbci	r19, 0x00	; 0
    5cc2:	30 93 65 07 	sts	0x0765, r19
    5cc6:	20 93 64 07 	sts	0x0764, r18
    5cca:	df 91       	pop	r29
    5ccc:	cf 91       	pop	r28
    5cce:	08 95       	ret

00005cd0 <memset>:
    5cd0:	dc 01       	movw	r26, r24
    5cd2:	01 c0       	rjmp	.+2      	; 0x5cd6 <memset+0x6>
    5cd4:	6d 93       	st	X+, r22
    5cd6:	41 50       	subi	r20, 0x01	; 1
    5cd8:	50 40       	sbci	r21, 0x00	; 0
    5cda:	e0 f7       	brcc	.-8      	; 0x5cd4 <memset+0x4>
    5cdc:	08 95       	ret

00005cde <_exit>:
    5cde:	f8 94       	cli

00005ce0 <__stop_program>:
    5ce0:	ff cf       	rjmp	.-2      	; 0x5ce0 <__stop_program>
