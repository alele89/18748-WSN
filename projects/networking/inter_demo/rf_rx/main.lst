   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 288               		.data
 289               	.LC0:
 290 0000 5265 6365 		.string	"Receiver\r"
 290      6976 6572 
 290      0D00 
 291               	.LC1:
 292 000a 5761 6974 		.string	"Waiting for packet...\r"
 292      696E 6720 
 292      666F 7220 
 292      7061 636B 
 292      6574 2E2E 
 293               	.LC2:
 294 0021 7061 636B 		.string	"packet received\r"
 294      6574 2072 
 294      6563 6569 
 294      7665 640D 
 294      00
 295               	.LC3:
 296 0032 5345 514E 		.string	"SEQNUM: %d  SRCADDR: 0x%x  SNR: %d\r\n["
 296      554D 3A20 
 296      2564 2020 
 296      5352 4341 
 296      4444 523A 
 297               	.LC4:
 298 0058 5D0D 0A0D 		.string	"]\r\n\r"
 298      00
 299               	.LC5:
 300 005d 4352 4320 		.string	"CRC failed!\r"
 300      6661 696C 
 300      6564 210D 
 300      00
 301               		.text
 303               	.global	main
 305               	main:
 306               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** 
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <basic_rf.h>
  30:main.c        **** #include <avr/sleep.h>
  31:main.c        **** #include <avr/wdt.h>
  32:main.c        **** #include <avr/eeprom.h>
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** RF_TX_INFO rfTxInfo;
  37:main.c        **** RF_RX_INFO rfRxInfo;
  38:main.c        **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  39:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  40:main.c        **** //------------------------------------------------------------------------------
  41:main.c        **** //      void main (void)
  42:main.c        **** //
  43:main.c        **** //      DESCRIPTION:
  44:main.c        **** //              Startup routine and main loop
  45:main.c        **** //------------------------------------------------------------------------------
  46:main.c        **** int main (void)
  47:main.c        **** {
 308               	.LM0:
 309               	.LFBB1:
 310 0000 1F93      		push r17
 311 0002 CF93      		push r28
 312 0004 DF93      		push r29
 313               	/* prologue: function */
 314               	/* frame size = 0 */
 315               	/* stack size = 3 */
 316               	.L__stack_usage = 3
  48:main.c        ****     uint8_t cnt,i,length,n;
  49:main.c        **** 
  50:main.c        ****     nrk_setup_ports(); 
 318               	.LM1:
 319 0006 0E94 0000 		call nrk_setup_ports
  51:main.c        ****     nrk_setup_uart (UART_BAUDRATE_115K2);
 321               	.LM2:
 322 000a 80E1      		ldi r24,lo8(16)
 323 000c 90E0      		ldi r25,hi8(16)
 324 000e 0E94 0000 		call nrk_setup_uart
  52:main.c        ****  
  53:main.c        ****     printf( "Receiver\r\n" ); 
 326               	.LM3:
 327 0012 80E0      		ldi r24,lo8(.LC0)
 328 0014 90E0      		ldi r25,hi8(.LC0)
 329 0016 0E94 0000 		call puts
  54:main.c        ****     nrk_led_clr(0); 
 331               	.LM4:
 332 001a 80E0      		ldi r24,lo8(0)
 333 001c 90E0      		ldi r25,hi8(0)
 334 001e 0E94 0000 		call nrk_led_clr
  55:main.c        ****     nrk_led_clr(1); 
 336               	.LM5:
 337 0022 81E0      		ldi r24,lo8(1)
 338 0024 90E0      		ldi r25,hi8(1)
 339 0026 0E94 0000 		call nrk_led_clr
  56:main.c        ****     nrk_led_clr(2); 
 341               	.LM6:
 342 002a 82E0      		ldi r24,lo8(2)
 343 002c 90E0      		ldi r25,hi8(2)
 344 002e 0E94 0000 		call nrk_led_clr
  57:main.c        ****     nrk_led_clr(3); 
 346               	.LM7:
 347 0032 83E0      		ldi r24,lo8(3)
 348 0034 90E0      		ldi r25,hi8(3)
 349 0036 0E94 0000 		call nrk_led_clr
  58:main.c        **** 
  59:main.c        ****     rfRxInfo.pPayload = rx_buf;
 351               	.LM8:
 352 003a 80E0      		ldi r24,lo8(rx_buf)
 353 003c 90E0      		ldi r25,hi8(rx_buf)
 354 003e 9093 0000 		sts rfRxInfo+5+1,r25
 355 0042 8093 0000 		sts rfRxInfo+5,r24
  60:main.c        ****     rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
 357               	.LM9:
 358 0046 84E7      		ldi r24,lo8(116)
 359 0048 8093 0000 		sts rfRxInfo+4,r24
  61:main.c        ****     rfRxInfo.ackRequest= 0;
 361               	.LM10:
 362 004c 1092 0000 		sts rfRxInfo+7,__zero_reg__
  62:main.c        **** 		nrk_int_enable();
 364               	.LM11:
 365 0050 0E94 0000 		call nrk_int_enable
  63:main.c        ****     rf_init (&rfRxInfo, 13, 0x2420, 0x1215);
 367               	.LM12:
 368 0054 80E0      		ldi r24,lo8(rfRxInfo)
 369 0056 90E0      		ldi r25,hi8(rfRxInfo)
 370 0058 6DE0      		ldi r22,lo8(13)
 371 005a 40E2      		ldi r20,lo8(9248)
 372 005c 54E2      		ldi r21,hi8(9248)
 373 005e 25E1      		ldi r18,lo8(4629)
 374 0060 32E1      		ldi r19,hi8(4629)
 375 0062 0E94 0000 		call rf_init
  64:main.c        ****     printf( "Waiting for packet...\r\n" );
 377               	.LM13:
 378 0066 80E0      		ldi r24,lo8(.LC1)
 379 0068 90E0      		ldi r25,hi8(.LC1)
 380 006a 0E94 0000 		call puts
  65:main.c        ****     nrk_led_set(ORANGE_LED);
 382               	.LM14:
 383 006e 82E0      		ldi r24,lo8(2)
 384 0070 90E0      		ldi r25,hi8(2)
 385 0072 0E94 0000 		call nrk_led_set
  66:main.c        ****     
  67:main.c        **** 		while(1){
  68:main.c        **** 				nrk_led_clr(GREEN_LED);
  69:main.c        ****         /*
  70:main.c        **** 				rf_init (&rfRxInfo, 13, 0x2420, 0x1215);
  71:main.c        ****         rf_set_rx (&rfRxInfo, 13); 	
  72:main.c        **** 				*/
  73:main.c        **** 
  74:main.c        **** 				rf_polling_rx_on();
  75:main.c        ****         while ((n = rf_rx_check_sfd()) == 0)
  76:main.c        **** 						continue; 
  77:main.c        **** 				nrk_led_set(GREEN_LED);
  78:main.c        ****  				if (n != 0) {
  79:main.c        ****         		n = 0;
  80:main.c        ****         		// Packet on its way
  81:main.c        ****     				cnt=0;
  82:main.c        ****         		while ((n = rf_polling_rx_packet ()) == 0) {
  83:main.c        **** 								if (cnt > 50) {
  84:main.c        ****                 		//printf( "PKT Timeout\r\n" );
  85:main.c        **** 										break;		// huge timeout as failsafe
  86:main.c        **** 								}
  87:main.c        ****         				halWait(10000);
  88:main.c        **** 								cnt++;
  89:main.c        **** 						}
  90:main.c        ****     		}
  91:main.c        **** 
  92:main.c        **** 				//rf_rx_off();
  93:main.c        ****     		if (n == 1) {
  94:main.c        ****     				nrk_led_clr(RED_LED);
  95:main.c        ****         		// CRC and checksum passed
  96:main.c        **** 						printf("packet received\r\n");
  97:main.c        **** 						printf("SEQNUM: %d  SRCADDR: 0x%x  SNR: %d\r\n[",
 387               	.LM15:
 388 0076 C0E0      		ldi r28,lo8(.LC3)
 389 0078 D0E0      		ldi r29,hi8(.LC3)
 390               	.L13:
  68:main.c        **** 				nrk_led_clr(GREEN_LED);
 392               	.LM16:
 393 007a 81E0      		ldi r24,lo8(1)
 394 007c 90E0      		ldi r25,hi8(1)
 395 007e 0E94 0000 		call nrk_led_clr
  74:main.c        **** 				rf_polling_rx_on();
 397               	.LM17:
 398 0082 0E94 0000 		call rf_polling_rx_on
 399               	.L3:
 400               	.LBB2:
  75:main.c        ****         while ((n = rf_rx_check_sfd()) == 0)
 402               	.LM18:
 403 0086 0E94 0000 		call rf_rx_check_sfd
 404 008a 8823      		tst r24
 405 008c 01F0      		breq .L3
 406               	.LBE2:
  77:main.c        **** 				nrk_led_set(GREEN_LED);
 408               	.LM19:
 409 008e 81E0      		ldi r24,lo8(1)
 410 0090 90E0      		ldi r25,hi8(1)
 411 0092 0E94 0000 		call nrk_led_set
 412 0096 10E0      		ldi r17,lo8(0)
 413 0098 00C0      		rjmp .L4
 414               	.L6:
  83:main.c        **** 								if (cnt > 50) {
 416               	.LM20:
 417 009a 1333      		cpi r17,lo8(51)
 418 009c 01F0      		breq .L13
  87:main.c        ****         				halWait(10000);
 420               	.LM21:
 421 009e 80E1      		ldi r24,lo8(10000)
 422 00a0 97E2      		ldi r25,hi8(10000)
 423 00a2 0E94 0000 		call halWait
  88:main.c        **** 								cnt++;
 425               	.LM22:
 426 00a6 1F5F      		subi r17,lo8(-(1))
 427               	.L4:
  82:main.c        ****         		while ((n = rf_polling_rx_packet ()) == 0) {
 429               	.LM23:
 430 00a8 0E94 0000 		call rf_rx_packet_nonblock
 431 00ac 8823      		tst r24
 432 00ae 01F0      		breq .L6
  93:main.c        ****     		if (n == 1) {
 434               	.LM24:
 435 00b0 8130      		cpi r24,lo8(1)
 436 00b2 01F0      		breq .+2
 437 00b4 00C0      		rjmp .L7
  94:main.c        ****     				nrk_led_clr(RED_LED);
 439               	.LM25:
 440 00b6 80E0      		ldi r24,lo8(0)
 441 00b8 90E0      		ldi r25,hi8(0)
 442 00ba 0E94 0000 		call nrk_led_clr
  96:main.c        **** 						printf("packet received\r\n");
 444               	.LM26:
 445 00be 80E0      		ldi r24,lo8(.LC2)
 446 00c0 90E0      		ldi r25,hi8(.LC2)
 447 00c2 0E94 0000 		call puts
 449               	.LM27:
 450 00c6 8DB7      		in r24,__SP_L__
 451 00c8 9EB7      		in r25,__SP_H__
 452 00ca 0897      		sbiw r24,8
 453 00cc 0FB6      		in __tmp_reg__,__SREG__
 454 00ce F894      		cli
 455 00d0 9EBF      		out __SP_H__,r25
 456 00d2 0FBE      		out __SREG__,__tmp_reg__
 457 00d4 8DBF      		out __SP_L__,r24
 458 00d6 EDB7      		in r30,__SP_L__
 459 00d8 FEB7      		in r31,__SP_H__
 460 00da 3196      		adiw r30,1
 461 00dc ADB7      		in r26,__SP_L__
 462 00de BEB7      		in r27,__SP_H__
 463 00e0 1296      		adiw r26,1+1
 464 00e2 DC93      		st X,r29
 465 00e4 CE93      		st -X,r28
 466 00e6 1197      		sbiw r26,1
 467 00e8 8091 0000 		lds r24,rfRxInfo
 468 00ec 8283      		std Z+2,r24
 469 00ee 1382      		std Z+3,__zero_reg__
 470 00f0 8091 0000 		lds r24,rfRxInfo+1
 471 00f4 9091 0000 		lds r25,rfRxInfo+1+1
 472 00f8 9583      		std Z+5,r25
 473 00fa 8483      		std Z+4,r24
 474 00fc 8091 0000 		lds r24,rfRxInfo+8
 475 0100 9927      		clr r25
 476 0102 87FD      		sbrc r24,7
 477 0104 9095      		com r25
 478 0106 9783      		std Z+7,r25
 479 0108 8683      		std Z+6,r24
 480 010a 0E94 0000 		call printf
  98:main.c        **** 								rfRxInfo.seqNumber, rfRxInfo.srcAddr, rfRxInfo.rssi);
  99:main.c        ****         	
 100:main.c        **** 						for(i=0; i<rfRxInfo.length; i++ )
 482               	.LM28:
 483 010e 8DB7      		in r24,__SP_L__
 484 0110 9EB7      		in r25,__SP_H__
 485 0112 0896      		adiw r24,8
 486 0114 0FB6      		in __tmp_reg__,__SREG__
 487 0116 F894      		cli
 488 0118 9EBF      		out __SP_H__,r25
 489 011a 0FBE      		out __SREG__,__tmp_reg__
 490 011c 8DBF      		out __SP_L__,r24
 491 011e 10E0      		ldi r17,lo8(0)
 492 0120 00C0      		rjmp .L8
 493               	.L9:
 101:main.c        **** 								printf( "%c", rfRxInfo.pPayload[i]);
 495               	.LM29:
 496 0122 E091 0000 		lds r30,rfRxInfo+5
 497 0126 F091 0000 		lds r31,rfRxInfo+5+1
 498 012a E80F      		add r30,r24
 499 012c F91F      		adc r31,r25
 500 012e 8081      		ld r24,Z
 501 0130 90E0      		ldi r25,lo8(0)
 502 0132 0E94 0000 		call putchar
 100:main.c        **** 						for(i=0; i<rfRxInfo.length; i++ )
 504               	.LM30:
 505 0136 1F5F      		subi r17,lo8(-(1))
 506               	.L8:
 100:main.c        **** 						for(i=0; i<rfRxInfo.length; i++ )
 508               	.LM31:
 509 0138 812F      		mov r24,r17
 510 013a 90E0      		ldi r25,lo8(0)
 511 013c 2091 0000 		lds r18,rfRxInfo+3
 512 0140 3327      		clr r19
 513 0142 27FD      		sbrc r18,7
 514 0144 3095      		com r19
 515 0146 8217      		cp r24,r18
 516 0148 9307      		cpc r25,r19
 517 014a 04F0      		brlt .L9
 102:main.c        **** 						printf( "]\r\n\r\n" );
 519               	.LM32:
 520 014c 80E0      		ldi r24,lo8(.LC4)
 521 014e 90E0      		ldi r25,hi8(.LC4)
 522 0150 0E94 0000 		call puts
 523 0154 00C0      		rjmp .L13
 524               	.L7:
 103:main.c        ****     		} 
 104:main.c        **** 				else if(n != 0){ 
 105:main.c        **** 						printf( "CRC failed!\r\n" ); nrk_led_set(RED_LED); 
 526               	.LM33:
 527 0156 80E0      		ldi r24,lo8(.LC5)
 528 0158 90E0      		ldi r25,hi8(.LC5)
 529 015a 0E94 0000 		call puts
 530 015e 80E0      		ldi r24,lo8(0)
 531 0160 90E0      		ldi r25,hi8(0)
 532 0162 0E94 0000 		call nrk_led_set
 533 0166 00C0      		rjmp .L13
 539               	.Lscope1:
 541               		.stabd	78,0,0
 542               		.comm _nrk_signal_list,4,1
 543               		.comm rfTxInfo,7,1
 544               		.comm rfRxInfo,12,1
 545               		.comm tx_buf,116,1
 546               		.comm rx_buf,116,1
 553               	.Letext0:
 554               	.global __do_copy_data
 555               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccu6O8Gu.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccu6O8Gu.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccu6O8Gu.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccu6O8Gu.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/ccu6O8Gu.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccu6O8Gu.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccu6O8Gu.s:305    .text:0000000000000000 main
                            *COM*:0000000000000074 rx_buf
                            *COM*:000000000000000c rfRxInfo
                            *COM*:0000000000000004 _nrk_signal_list
                            *COM*:0000000000000007 rfTxInfo
                            *COM*:0000000000000074 tx_buf

UNDEFINED SYMBOLS
nrk_setup_ports
nrk_setup_uart
puts
nrk_led_clr
nrk_int_enable
rf_init
nrk_led_set
rf_polling_rx_on
rf_rx_check_sfd
halWait
rf_rx_packet_nonblock
printf
putchar
__do_copy_data
__do_clear_bss
